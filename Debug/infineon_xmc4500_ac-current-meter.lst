
infineon_xmc4500_ac-current-meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000052d4  08000000  0c000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  10000000  10000000  00018000  2**0
                  ALLOC
  2 .data         0000013c  20000000  0c0052d4  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000023c  2000013c  0c005410  0001013c  2**2
                  ALLOC
  4 .no_init      00000014  2000ffc0  2000ffc0  00017fc0  2**2
                  ALLOC
  5 .debug_aranges 00000f10  00000000  00000000  00010140  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000187f3  00000000  00000000  00011050  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002e5a  00000000  00000000  00029843  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006c4a  00000000  00000000  0002c69d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00004310  00000000  00000000  000332e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000a234  00000000  00000000  000375f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008521  00000000  00000000  0004182c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000d50  00000000  00000000  00049d4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .build_attributes 000008f5  00000000  00000000  0004aa9d  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	a1 37 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     .7..............
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 75 37 00 08 b1 02 00 08 b1 02 00 08     ....u7..........
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 75 30 00 08     ............u0..
 80001ac:	65 30 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     e0..............
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
    Entry   GPDMA1_0_IRQHandler         /* Handler name for SR GPDMA1_0  */
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>
/* ================== START OF VECTOR ROUTINES ============================= */

	.align	1
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)
    .thumb
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c0052d4 	.word	0x0c0052d4
 800024c:	20000000 	.word	0x20000000
 8000250:	0000013c 	.word	0x0000013c
 8000254:	0c005410 	.word	0x0c005410
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c0052d4 	.word	0x0c0052d4
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c0052d4 	.word	0x0c0052d4
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	2000013c 	.word	0x2000013c
 800027c:	00000238 	.word	0x00000238
 8000280:	30000000 	.word	0x30000000
 8000284:	00000000 	.word	0x00000000
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
    Entry   GPDMA1_0_IRQHandler         /* Handler name for SR GPDMA1_0  */
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

 8000290:	10000800 	.word	0x10000800
/* ================== START OF VECTOR ROUTINES ============================= */

	.align	1
 8000294:	080002b5 	.word	0x080002b5
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 80002a8:	08004309 	.word	0x08004309
    blx  r0
#endif

    ldr  r0, =main
 80002ac:	08003919 	.word	0x08003919

080002b0 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 80002b4:	b598      	push	{r3, r4, r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80002b8:	4a05      	ldr	r2, [pc, #20]	; (80002d0 <SystemInit+0x1c>)
 80002ba:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002be:	4614      	mov	r4, r2
 80002c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 80002c6:	f002 ff9d 	bl	8003204 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 80002ca:	f003 f805 	bl	80032d8 <SystemCoreClockSetup>
}
 80002ce:	bd98      	pop	{r3, r4, r7, pc}
 80002d0:	2000ffc4 	.word	0x2000ffc4

080002d4 <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b084      	sub	sp, #16
 80002d8:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80002da:	4b2f      	ldr	r3, [pc, #188]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 80002dc:	68db      	ldr	r3, [r3, #12]
 80002de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d03e      	beq.n	8000364 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80002e6:	4b2d      	ldr	r3, [pc, #180]	; (800039c <SystemCoreClockUpdate+0xc8>)
 80002e8:	68db      	ldr	r3, [r3, #12]
 80002ea:	f003 0301 	and.w	r3, r3, #1
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d002      	beq.n	80002f8 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80002f2:	4b2b      	ldr	r3, [pc, #172]	; (80003a0 <SystemCoreClockUpdate+0xcc>)
 80002f4:	60fb      	str	r3, [r7, #12]
 80002f6:	e002      	b.n	80002fe <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80002f8:	f002 ffe4 	bl	80032c4 <OSCHP_GetFrequency>
 80002fc:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80002fe:	4b27      	ldr	r3, [pc, #156]	; (800039c <SystemCoreClockUpdate+0xc8>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	f003 0304 	and.w	r3, r3, #4
 8000306:	2b00      	cmp	r3, #0
 8000308:	d020      	beq.n	800034c <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 800030a:	4b24      	ldr	r3, [pc, #144]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800030c:	689b      	ldr	r3, [r3, #8]
 800030e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000312:	0e1b      	lsrs	r3, r3, #24
 8000314:	3301      	adds	r3, #1
 8000316:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000318:	4b20      	ldr	r3, [pc, #128]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000320:	0a1b      	lsrs	r3, r3, #8
 8000322:	3301      	adds	r3, #1
 8000324:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8000326:	4b1d      	ldr	r3, [pc, #116]	; (800039c <SystemCoreClockUpdate+0xc8>)
 8000328:	689b      	ldr	r3, [r3, #8]
 800032a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800032e:	0c1b      	lsrs	r3, r3, #16
 8000330:	3301      	adds	r3, #1
 8000332:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8000334:	68bb      	ldr	r3, [r7, #8]
 8000336:	683a      	ldr	r2, [r7, #0]
 8000338:	fb02 f303 	mul.w	r3, r2, r3
 800033c:	68fa      	ldr	r2, [r7, #12]
 800033e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000342:	687a      	ldr	r2, [r7, #4]
 8000344:	fb02 f303 	mul.w	r3, r2, r3
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	e00d      	b.n	8000368 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 800034c:	4b13      	ldr	r3, [pc, #76]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800034e:	689b      	ldr	r3, [r3, #8]
 8000350:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000354:	3301      	adds	r3, #1
 8000356:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 8000358:	68fa      	ldr	r2, [r7, #12]
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000360:	60fb      	str	r3, [r7, #12]
 8000362:	e001      	b.n	8000368 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8000364:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <SystemCoreClockUpdate+0xcc>)
 8000366:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8000368:	4b0b      	ldr	r3, [pc, #44]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 800036a:	68db      	ldr	r3, [r3, #12]
 800036c:	b2db      	uxtb	r3, r3
 800036e:	3301      	adds	r3, #1
 8000370:	68fa      	ldr	r2, [r7, #12]
 8000372:	fbb2 f3f3 	udiv	r3, r2, r3
 8000376:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8000378:	4b07      	ldr	r3, [pc, #28]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 800037a:	691b      	ldr	r3, [r3, #16]
 800037c:	f003 0301 	and.w	r3, r3, #1
 8000380:	3301      	adds	r3, #1
 8000382:	68fa      	ldr	r2, [r7, #12]
 8000384:	fbb2 f3f3 	udiv	r3, r2, r3
 8000388:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 800038a:	4a06      	ldr	r2, [pc, #24]	; (80003a4 <SystemCoreClockUpdate+0xd0>)
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	6013      	str	r3, [r2, #0]
}
 8000390:	3710      	adds	r7, #16
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	50004600 	.word	0x50004600
 800039c:	50004710 	.word	0x50004710
 80003a0:	016e3600 	.word	0x016e3600
 80003a4:	2000ffc0 	.word	0x2000ffc0

080003a8 <XMC_USIC_CH_TXFIFO_IsFull>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80003b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	bf14      	ite	ne
 80003be:	2301      	movne	r3, #1
 80003c0:	2300      	moveq	r3, #0
 80003c2:	b2db      	uxtb	r3, r3
}
 80003c4:	4618      	mov	r0, r3
 80003c6:	370c      	adds	r7, #12
 80003c8:	46bd      	mov	sp, r7
 80003ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ce:	4770      	bx	lr

080003d0 <XMC_USIC_CH_TXFIFO_IsEmpty>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b083      	sub	sp, #12
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80003de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	bf14      	ite	ne
 80003e6:	2301      	movne	r3, #1
 80003e8:	2300      	moveq	r3, #0
 80003ea:	b2db      	uxtb	r3, r3
}
 80003ec:	4618      	mov	r0, r3
 80003ee:	370c      	adds	r7, #12
 80003f0:	46bd      	mov	sp, r7
 80003f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f6:	4770      	bx	lr

080003f8 <XMC_I2C_CH_GetStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_ClearStatusFlag()\n\n
 */
__STATIC_INLINE uint32_t XMC_I2C_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
{
 80003f8:	b480      	push	{r7}
 80003fa:	b083      	sub	sp, #12
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
  return (channel->PSR_IICMode);
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 8000404:	4618      	mov	r0, r3
 8000406:	370c      	adds	r7, #12
 8000408:	46bd      	mov	sp, r7
 800040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040e:	4770      	bx	lr

08000410 <XMC_I2C_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
 8000418:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800041e:	683b      	ldr	r3, [r7, #0]
 8000420:	431a      	orrs	r2, r3
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8000426:	370c      	adds	r7, #12
 8000428:	46bd      	mov	sp, r7
 800042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042e:	4770      	bx	lr

08000430 <ssd1306_Reset>:
// Screen object
SSD1306_t SSD1306;

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000434:	46bd      	mov	sp, r7
 8000436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043a:	4770      	bx	lr

0800043c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	4603      	mov	r3, r0
 8000444:	71fb      	strb	r3, [r7, #7]
	XMC_I2C_CH_MasterStart(SSD1306.channel, SSD1306_I2C_ADDR, XMC_I2C_CH_CMD_WRITE);
 8000446:	4b27      	ldr	r3, [pc, #156]	; (80004e4 <ssd1306_WriteCommand+0xa8>)
 8000448:	689b      	ldr	r3, [r3, #8]
 800044a:	4618      	mov	r0, r3
 800044c:	2178      	movs	r1, #120	; 0x78
 800044e:	2200      	movs	r2, #0
 8000450:	f001 f990 	bl	8001774 <XMC_I2C_CH_MasterStart>
	while ((XMC_I2C_CH_GetStatusFlag(SSD1306.channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U) __NOP();
 8000454:	e000      	b.n	8000458 <ssd1306_WriteCommand+0x1c>
 8000456:	bf00      	nop
 8000458:	4b22      	ldr	r3, [pc, #136]	; (80004e4 <ssd1306_WriteCommand+0xa8>)
 800045a:	689b      	ldr	r3, [r3, #8]
 800045c:	4618      	mov	r0, r3
 800045e:	f7ff ffcb 	bl	80003f8 <XMC_I2C_CH_GetStatusFlag>
 8000462:	4603      	mov	r3, r0
 8000464:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000468:	2b00      	cmp	r3, #0
 800046a:	d0f4      	beq.n	8000456 <ssd1306_WriteCommand+0x1a>
	XMC_I2C_CH_ClearStatusFlag(SSD1306.channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 800046c:	4b1d      	ldr	r3, [pc, #116]	; (80004e4 <ssd1306_WriteCommand+0xa8>)
 800046e:	689b      	ldr	r3, [r3, #8]
 8000470:	4618      	mov	r0, r3
 8000472:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000476:	f7ff ffcb 	bl	8000410 <XMC_I2C_CH_ClearStatusFlag>

	while (XMC_USIC_CH_TXFIFO_IsFull(SSD1306.channel)) __NOP();
 800047a:	e000      	b.n	800047e <ssd1306_WriteCommand+0x42>
 800047c:	bf00      	nop
 800047e:	4b19      	ldr	r3, [pc, #100]	; (80004e4 <ssd1306_WriteCommand+0xa8>)
 8000480:	689b      	ldr	r3, [r3, #8]
 8000482:	4618      	mov	r0, r3
 8000484:	f7ff ff90 	bl	80003a8 <XMC_USIC_CH_TXFIFO_IsFull>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d1f6      	bne.n	800047c <ssd1306_WriteCommand+0x40>
	XMC_I2C_CH_MasterTransmit(SSD1306.channel, 0x00);
 800048e:	4b15      	ldr	r3, [pc, #84]	; (80004e4 <ssd1306_WriteCommand+0xa8>)
 8000490:	689b      	ldr	r3, [r3, #8]
 8000492:	4618      	mov	r0, r3
 8000494:	2100      	movs	r1, #0
 8000496:	f001 f9c7 	bl	8001828 <XMC_I2C_CH_MasterTransmit>
	while (XMC_USIC_CH_TXFIFO_IsFull(SSD1306.channel)) __NOP();
 800049a:	e000      	b.n	800049e <ssd1306_WriteCommand+0x62>
 800049c:	bf00      	nop
 800049e:	4b11      	ldr	r3, [pc, #68]	; (80004e4 <ssd1306_WriteCommand+0xa8>)
 80004a0:	689b      	ldr	r3, [r3, #8]
 80004a2:	4618      	mov	r0, r3
 80004a4:	f7ff ff80 	bl	80003a8 <XMC_USIC_CH_TXFIFO_IsFull>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d1f6      	bne.n	800049c <ssd1306_WriteCommand+0x60>
	XMC_I2C_CH_MasterTransmit(SSD1306.channel, byte);
 80004ae:	4b0d      	ldr	r3, [pc, #52]	; (80004e4 <ssd1306_WriteCommand+0xa8>)
 80004b0:	689a      	ldr	r2, [r3, #8]
 80004b2:	79fb      	ldrb	r3, [r7, #7]
 80004b4:	4610      	mov	r0, r2
 80004b6:	4619      	mov	r1, r3
 80004b8:	f001 f9b6 	bl	8001828 <XMC_I2C_CH_MasterTransmit>
	while (!XMC_USIC_CH_TXFIFO_IsEmpty(SSD1306.channel));
 80004bc:	bf00      	nop
 80004be:	4b09      	ldr	r3, [pc, #36]	; (80004e4 <ssd1306_WriteCommand+0xa8>)
 80004c0:	689b      	ldr	r3, [r3, #8]
 80004c2:	4618      	mov	r0, r3
 80004c4:	f7ff ff84 	bl	80003d0 <XMC_USIC_CH_TXFIFO_IsEmpty>
 80004c8:	4603      	mov	r3, r0
 80004ca:	f083 0301 	eor.w	r3, r3, #1
 80004ce:	b2db      	uxtb	r3, r3
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d1f4      	bne.n	80004be <ssd1306_WriteCommand+0x82>

	XMC_I2C_CH_MasterStop(SSD1306.channel);
 80004d4:	4b03      	ldr	r3, [pc, #12]	; (80004e4 <ssd1306_WriteCommand+0xa8>)
 80004d6:	689b      	ldr	r3, [r3, #8]
 80004d8:	4618      	mov	r0, r3
 80004da:	f001 f97f 	bl	80017dc <XMC_I2C_CH_MasterStop>
}
 80004de:	3708      	adds	r7, #8
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	2000035c 	.word	0x2000035c

080004e8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
 80004f0:	6039      	str	r1, [r7, #0]
//    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);

	XMC_I2C_CH_MasterStart(SSD1306.channel, SSD1306_I2C_ADDR, XMC_I2C_CH_CMD_WRITE);
 80004f2:	4b2e      	ldr	r3, [pc, #184]	; (80005ac <ssd1306_WriteData+0xc4>)
 80004f4:	689b      	ldr	r3, [r3, #8]
 80004f6:	4618      	mov	r0, r3
 80004f8:	2178      	movs	r1, #120	; 0x78
 80004fa:	2200      	movs	r2, #0
 80004fc:	f001 f93a 	bl	8001774 <XMC_I2C_CH_MasterStart>
	while ((XMC_I2C_CH_GetStatusFlag(SSD1306.channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U) __NOP();
 8000500:	e000      	b.n	8000504 <ssd1306_WriteData+0x1c>
 8000502:	bf00      	nop
 8000504:	4b29      	ldr	r3, [pc, #164]	; (80005ac <ssd1306_WriteData+0xc4>)
 8000506:	689b      	ldr	r3, [r3, #8]
 8000508:	4618      	mov	r0, r3
 800050a:	f7ff ff75 	bl	80003f8 <XMC_I2C_CH_GetStatusFlag>
 800050e:	4603      	mov	r3, r0
 8000510:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000514:	2b00      	cmp	r3, #0
 8000516:	d0f4      	beq.n	8000502 <ssd1306_WriteData+0x1a>
	XMC_I2C_CH_ClearStatusFlag(SSD1306.channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 8000518:	4b24      	ldr	r3, [pc, #144]	; (80005ac <ssd1306_WriteData+0xc4>)
 800051a:	689b      	ldr	r3, [r3, #8]
 800051c:	4618      	mov	r0, r3
 800051e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000522:	f7ff ff75 	bl	8000410 <XMC_I2C_CH_ClearStatusFlag>

	while (XMC_USIC_CH_TXFIFO_IsFull(SSD1306.channel)) __NOP();
 8000526:	e000      	b.n	800052a <ssd1306_WriteData+0x42>
 8000528:	bf00      	nop
 800052a:	4b20      	ldr	r3, [pc, #128]	; (80005ac <ssd1306_WriteData+0xc4>)
 800052c:	689b      	ldr	r3, [r3, #8]
 800052e:	4618      	mov	r0, r3
 8000530:	f7ff ff3a 	bl	80003a8 <XMC_USIC_CH_TXFIFO_IsFull>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d1f6      	bne.n	8000528 <ssd1306_WriteData+0x40>
	XMC_I2C_CH_MasterTransmit(SSD1306.channel, 0x40);
 800053a:	4b1c      	ldr	r3, [pc, #112]	; (80005ac <ssd1306_WriteData+0xc4>)
 800053c:	689b      	ldr	r3, [r3, #8]
 800053e:	4618      	mov	r0, r3
 8000540:	2140      	movs	r1, #64	; 0x40
 8000542:	f001 f971 	bl	8001828 <XMC_I2C_CH_MasterTransmit>

	for (uint32_t i=0; i<buff_size; i++)
 8000546:	2300      	movs	r3, #0
 8000548:	60fb      	str	r3, [r7, #12]
 800054a:	e016      	b.n	800057a <ssd1306_WriteData+0x92>
	{
		while (XMC_USIC_CH_TXFIFO_IsFull(SSD1306.channel)) __NOP();
 800054c:	e000      	b.n	8000550 <ssd1306_WriteData+0x68>
 800054e:	bf00      	nop
 8000550:	4b16      	ldr	r3, [pc, #88]	; (80005ac <ssd1306_WriteData+0xc4>)
 8000552:	689b      	ldr	r3, [r3, #8]
 8000554:	4618      	mov	r0, r3
 8000556:	f7ff ff27 	bl	80003a8 <XMC_USIC_CH_TXFIFO_IsFull>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d1f6      	bne.n	800054e <ssd1306_WriteData+0x66>
		XMC_I2C_CH_MasterTransmit(SSD1306.channel, buffer[i]);
 8000560:	4b12      	ldr	r3, [pc, #72]	; (80005ac <ssd1306_WriteData+0xc4>)
 8000562:	6899      	ldr	r1, [r3, #8]
 8000564:	687a      	ldr	r2, [r7, #4]
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	4413      	add	r3, r2
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	4608      	mov	r0, r1
 800056e:	4619      	mov	r1, r3
 8000570:	f001 f95a 	bl	8001828 <XMC_I2C_CH_MasterTransmit>
	XMC_I2C_CH_ClearStatusFlag(SSD1306.channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);

	while (XMC_USIC_CH_TXFIFO_IsFull(SSD1306.channel)) __NOP();
	XMC_I2C_CH_MasterTransmit(SSD1306.channel, 0x40);

	for (uint32_t i=0; i<buff_size; i++)
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	3301      	adds	r3, #1
 8000578:	60fb      	str	r3, [r7, #12]
 800057a:	68fa      	ldr	r2, [r7, #12]
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	429a      	cmp	r2, r3
 8000580:	d3e4      	bcc.n	800054c <ssd1306_WriteData+0x64>
	{
		while (XMC_USIC_CH_TXFIFO_IsFull(SSD1306.channel)) __NOP();
		XMC_I2C_CH_MasterTransmit(SSD1306.channel, buffer[i]);
	}

	while (!XMC_USIC_CH_TXFIFO_IsEmpty(SSD1306.channel));
 8000582:	bf00      	nop
 8000584:	4b09      	ldr	r3, [pc, #36]	; (80005ac <ssd1306_WriteData+0xc4>)
 8000586:	689b      	ldr	r3, [r3, #8]
 8000588:	4618      	mov	r0, r3
 800058a:	f7ff ff21 	bl	80003d0 <XMC_USIC_CH_TXFIFO_IsEmpty>
 800058e:	4603      	mov	r3, r0
 8000590:	f083 0301 	eor.w	r3, r3, #1
 8000594:	b2db      	uxtb	r3, r3
 8000596:	2b00      	cmp	r3, #0
 8000598:	d1f4      	bne.n	8000584 <ssd1306_WriteData+0x9c>

	XMC_I2C_CH_MasterStop(SSD1306.channel);
 800059a:	4b04      	ldr	r3, [pc, #16]	; (80005ac <ssd1306_WriteData+0xc4>)
 800059c:	689b      	ldr	r3, [r3, #8]
 800059e:	4618      	mov	r0, r3
 80005a0:	f001 f91c 	bl	80017dc <XMC_I2C_CH_MasterStop>
}
 80005a4:	3710      	adds	r7, #16
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	2000035c 	.word	0x2000035c

080005b0 <ssd1306_Init>:
    return ret;
}

// Initialize the oled screen
#if defined(SSD1306_USE_I2C)
void ssd1306_Init(XMC_USIC_CH_t* channel, void(*delay_fnc)(uint32_t)) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	6039      	str	r1, [r7, #0]
	SSD1306.rst_port = rst_port;
	SSD1306.rst_pin = rst_pin;
	SSD1306.dc_port = dc_port;
	SSD1306.dc_pin = dc_pin;
#endif
	SSD1306.channel = channel;
 80005ba:	4a37      	ldr	r2, [pc, #220]	; (8000698 <ssd1306_Init+0xe8>)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	6093      	str	r3, [r2, #8]
	SSD1306.delay_fnc = delay_fnc;
 80005c0:	4a35      	ldr	r2, [pc, #212]	; (8000698 <ssd1306_Init+0xe8>)
 80005c2:	683b      	ldr	r3, [r7, #0]
 80005c4:	60d3      	str	r3, [r2, #12]

    // Reset OLED
    ssd1306_Reset();
 80005c6:	f7ff ff33 	bl	8000430 <ssd1306_Reset>

    // Wait for the screen to boot
    SSD1306.delay_fnc(100);
 80005ca:	4b33      	ldr	r3, [pc, #204]	; (8000698 <ssd1306_Init+0xe8>)
 80005cc:	68db      	ldr	r3, [r3, #12]
 80005ce:	2064      	movs	r0, #100	; 0x64
 80005d0:	4798      	blx	r3

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80005d2:	2000      	movs	r0, #0
 80005d4:	f000 f9f8 	bl	80009c8 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80005d8:	2020      	movs	r0, #32
 80005da:	f7ff ff2f 	bl	800043c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80005de:	2000      	movs	r0, #0
 80005e0:	f7ff ff2c 	bl	800043c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80005e4:	20b0      	movs	r0, #176	; 0xb0
 80005e6:	f7ff ff29 	bl	800043c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80005ea:	20c8      	movs	r0, #200	; 0xc8
 80005ec:	f7ff ff26 	bl	800043c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80005f0:	2000      	movs	r0, #0
 80005f2:	f7ff ff23 	bl	800043c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80005f6:	2010      	movs	r0, #16
 80005f8:	f7ff ff20 	bl	800043c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80005fc:	2040      	movs	r0, #64	; 0x40
 80005fe:	f7ff ff1d 	bl	800043c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000602:	20ff      	movs	r0, #255	; 0xff
 8000604:	f000 f9ce 	bl	80009a4 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000608:	20a1      	movs	r0, #161	; 0xa1
 800060a:	f7ff ff17 	bl	800043c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800060e:	20a6      	movs	r0, #166	; 0xa6
 8000610:	f7ff ff14 	bl	800043c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000614:	20a8      	movs	r0, #168	; 0xa8
 8000616:	f7ff ff11 	bl	800043c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 800061a:	201f      	movs	r0, #31
 800061c:	f7ff ff0e 	bl	800043c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000620:	20a4      	movs	r0, #164	; 0xa4
 8000622:	f7ff ff0b 	bl	800043c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000626:	20d3      	movs	r0, #211	; 0xd3
 8000628:	f7ff ff08 	bl	800043c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800062c:	2000      	movs	r0, #0
 800062e:	f7ff ff05 	bl	800043c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000632:	20d5      	movs	r0, #213	; 0xd5
 8000634:	f7ff ff02 	bl	800043c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000638:	20f0      	movs	r0, #240	; 0xf0
 800063a:	f7ff feff 	bl	800043c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800063e:	20d9      	movs	r0, #217	; 0xd9
 8000640:	f7ff fefc 	bl	800043c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000644:	2022      	movs	r0, #34	; 0x22
 8000646:	f7ff fef9 	bl	800043c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800064a:	20da      	movs	r0, #218	; 0xda
 800064c:	f7ff fef6 	bl	800043c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 8000650:	2002      	movs	r0, #2
 8000652:	f7ff fef3 	bl	800043c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000656:	20db      	movs	r0, #219	; 0xdb
 8000658:	f7ff fef0 	bl	800043c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800065c:	2020      	movs	r0, #32
 800065e:	f7ff feed 	bl	800043c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000662:	208d      	movs	r0, #141	; 0x8d
 8000664:	f7ff feea 	bl	800043c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000668:	2014      	movs	r0, #20
 800066a:	f7ff fee7 	bl	800043c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800066e:	2001      	movs	r0, #1
 8000670:	f000 f9aa 	bl	80009c8 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000674:	2000      	movs	r0, #0
 8000676:	f000 f811 	bl	800069c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800067a:	f000 f831 	bl	80006e0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800067e:	4b06      	ldr	r3, [pc, #24]	; (8000698 <ssd1306_Init+0xe8>)
 8000680:	2200      	movs	r2, #0
 8000682:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000684:	4b04      	ldr	r3, [pc, #16]	; (8000698 <ssd1306_Init+0xe8>)
 8000686:	2200      	movs	r2, #0
 8000688:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800068a:	4b03      	ldr	r3, [pc, #12]	; (8000698 <ssd1306_Init+0xe8>)
 800068c:	2201      	movs	r2, #1
 800068e:	715a      	strb	r2, [r3, #5]
}
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	2000035c 	.word	0x2000035c

0800069c <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 800069c:	b480      	push	{r7}
 800069e:	b085      	sub	sp, #20
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
 80006aa:	e00d      	b.n	80006c8 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d101      	bne.n	80006b6 <ssd1306_Fill+0x1a>
 80006b2:	2100      	movs	r1, #0
 80006b4:	e000      	b.n	80006b8 <ssd1306_Fill+0x1c>
 80006b6:	21ff      	movs	r1, #255	; 0xff
 80006b8:	4a08      	ldr	r2, [pc, #32]	; (80006dc <ssd1306_Fill+0x40>)
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	4413      	add	r3, r2
 80006be:	460a      	mov	r2, r1
 80006c0:	701a      	strb	r2, [r3, #0]
// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	3301      	adds	r3, #1
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 80006ce:	d3ed      	bcc.n	80006ac <ssd1306_Fill+0x10>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
    }
}
 80006d0:	3714      	adds	r7, #20
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	2000013c 	.word	0x2000013c

080006e0 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80006e6:	2300      	movs	r3, #0
 80006e8:	71fb      	strb	r3, [r7, #7]
 80006ea:	e01a      	b.n	8000722 <ssd1306_UpdateScreen+0x42>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80006ec:	79fb      	ldrb	r3, [r7, #7]
 80006ee:	3b50      	subs	r3, #80	; 0x50
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	4618      	mov	r0, r3
 80006f4:	f7ff fea2 	bl	800043c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 80006f8:	2000      	movs	r0, #0
 80006fa:	f7ff fe9f 	bl	800043c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 80006fe:	2010      	movs	r0, #16
 8000700:	f7ff fe9c 	bl	800043c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000704:	79fa      	ldrb	r2, [r7, #7]
 8000706:	4613      	mov	r3, r2
 8000708:	019b      	lsls	r3, r3, #6
 800070a:	4413      	add	r3, r2
 800070c:	005b      	lsls	r3, r3, #1
 800070e:	461a      	mov	r2, r3
 8000710:	4b07      	ldr	r3, [pc, #28]	; (8000730 <ssd1306_UpdateScreen+0x50>)
 8000712:	4413      	add	r3, r2
 8000714:	4618      	mov	r0, r3
 8000716:	2182      	movs	r1, #130	; 0x82
 8000718:	f7ff fee6 	bl	80004e8 <ssd1306_WriteData>
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800071c:	79fb      	ldrb	r3, [r7, #7]
 800071e:	3301      	adds	r3, #1
 8000720:	71fb      	strb	r3, [r7, #7]
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	2b03      	cmp	r3, #3
 8000726:	d9e1      	bls.n	80006ec <ssd1306_UpdateScreen+0xc>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
        ssd1306_WriteCommand(0x00);
        ssd1306_WriteCommand(0x10);
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
    }
}
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	2000013c 	.word	0x2000013c

08000734 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	71fb      	strb	r3, [r7, #7]
 800073e:	460b      	mov	r3, r1
 8000740:	71bb      	strb	r3, [r7, #6]
 8000742:	4613      	mov	r3, r2
 8000744:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	2b81      	cmp	r3, #129	; 0x81
 800074a:	d802      	bhi.n	8000752 <ssd1306_DrawPixel+0x1e>
 800074c:	79bb      	ldrb	r3, [r7, #6]
 800074e:	2b1f      	cmp	r3, #31
 8000750:	d900      	bls.n	8000754 <ssd1306_DrawPixel+0x20>
        // Don't write outside the buffer
        return;
 8000752:	e050      	b.n	80007f6 <ssd1306_DrawPixel+0xc2>
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8000754:	4b2a      	ldr	r3, [pc, #168]	; (8000800 <ssd1306_DrawPixel+0xcc>)
 8000756:	791b      	ldrb	r3, [r3, #4]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d006      	beq.n	800076a <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 800075c:	797b      	ldrb	r3, [r7, #5]
 800075e:	2b00      	cmp	r3, #0
 8000760:	bf0c      	ite	eq
 8000762:	2301      	moveq	r3, #1
 8000764:	2300      	movne	r3, #0
 8000766:	b2db      	uxtb	r3, r3
 8000768:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 800076a:	797b      	ldrb	r3, [r7, #5]
 800076c:	2b01      	cmp	r3, #1
 800076e:	d120      	bne.n	80007b2 <ssd1306_DrawPixel+0x7e>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000770:	79fa      	ldrb	r2, [r7, #7]
 8000772:	79bb      	ldrb	r3, [r7, #6]
 8000774:	08db      	lsrs	r3, r3, #3
 8000776:	b2d8      	uxtb	r0, r3
 8000778:	4601      	mov	r1, r0
 800077a:	460b      	mov	r3, r1
 800077c:	019b      	lsls	r3, r3, #6
 800077e:	440b      	add	r3, r1
 8000780:	005b      	lsls	r3, r3, #1
 8000782:	441a      	add	r2, r3
 8000784:	79f9      	ldrb	r1, [r7, #7]
 8000786:	4603      	mov	r3, r0
 8000788:	019b      	lsls	r3, r3, #6
 800078a:	4403      	add	r3, r0
 800078c:	005b      	lsls	r3, r3, #1
 800078e:	440b      	add	r3, r1
 8000790:	491c      	ldr	r1, [pc, #112]	; (8000804 <ssd1306_DrawPixel+0xd0>)
 8000792:	5ccb      	ldrb	r3, [r1, r3]
 8000794:	b2d8      	uxtb	r0, r3
 8000796:	79bb      	ldrb	r3, [r7, #6]
 8000798:	f003 0307 	and.w	r3, r3, #7
 800079c:	2101      	movs	r1, #1
 800079e:	fa01 f303 	lsl.w	r3, r1, r3
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	4601      	mov	r1, r0
 80007a6:	430b      	orrs	r3, r1
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	b2d9      	uxtb	r1, r3
 80007ac:	4b15      	ldr	r3, [pc, #84]	; (8000804 <ssd1306_DrawPixel+0xd0>)
 80007ae:	5499      	strb	r1, [r3, r2]
 80007b0:	e021      	b.n	80007f6 <ssd1306_DrawPixel+0xc2>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80007b2:	79fa      	ldrb	r2, [r7, #7]
 80007b4:	79bb      	ldrb	r3, [r7, #6]
 80007b6:	08db      	lsrs	r3, r3, #3
 80007b8:	b2d8      	uxtb	r0, r3
 80007ba:	4601      	mov	r1, r0
 80007bc:	460b      	mov	r3, r1
 80007be:	019b      	lsls	r3, r3, #6
 80007c0:	440b      	add	r3, r1
 80007c2:	005b      	lsls	r3, r3, #1
 80007c4:	441a      	add	r2, r3
 80007c6:	79f9      	ldrb	r1, [r7, #7]
 80007c8:	4603      	mov	r3, r0
 80007ca:	019b      	lsls	r3, r3, #6
 80007cc:	4403      	add	r3, r0
 80007ce:	005b      	lsls	r3, r3, #1
 80007d0:	440b      	add	r3, r1
 80007d2:	490c      	ldr	r1, [pc, #48]	; (8000804 <ssd1306_DrawPixel+0xd0>)
 80007d4:	5ccb      	ldrb	r3, [r1, r3]
 80007d6:	b2d8      	uxtb	r0, r3
 80007d8:	79bb      	ldrb	r3, [r7, #6]
 80007da:	f003 0307 	and.w	r3, r3, #7
 80007de:	2101      	movs	r1, #1
 80007e0:	fa01 f303 	lsl.w	r3, r1, r3
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	43db      	mvns	r3, r3
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	4601      	mov	r1, r0
 80007ec:	400b      	ands	r3, r1
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	b2d9      	uxtb	r1, r3
 80007f2:	4b04      	ldr	r3, [pc, #16]	; (8000804 <ssd1306_DrawPixel+0xd0>)
 80007f4:	5499      	strb	r1, [r3, r2]
    }
}
 80007f6:	370c      	adds	r7, #12
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr
 8000800:	2000035c 	.word	0x2000035c
 8000804:	2000013c 	.word	0x2000013c

08000808 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8000808:	b590      	push	{r4, r7, lr}
 800080a:	b089      	sub	sp, #36	; 0x24
 800080c:	af00      	add	r7, sp, #0
 800080e:	4604      	mov	r4, r0
 8000810:	1d38      	adds	r0, r7, #4
 8000812:	e880 0006 	stmia.w	r0, {r1, r2}
 8000816:	461a      	mov	r2, r3
 8000818:	4623      	mov	r3, r4
 800081a:	73fb      	strb	r3, [r7, #15]
 800081c:	4613      	mov	r3, r2
 800081e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000820:	7bfb      	ldrb	r3, [r7, #15]
 8000822:	2b1f      	cmp	r3, #31
 8000824:	d902      	bls.n	800082c <ssd1306_WriteChar+0x24>
 8000826:	7bfb      	ldrb	r3, [r7, #15]
 8000828:	2b7e      	cmp	r3, #126	; 0x7e
 800082a:	d901      	bls.n	8000830 <ssd1306_WriteChar+0x28>
        return 0;
 800082c:	2300      	movs	r3, #0
 800082e:	e071      	b.n	8000914 <ssd1306_WriteChar+0x10c>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000830:	4b3a      	ldr	r3, [pc, #232]	; (800091c <ssd1306_WriteChar+0x114>)
 8000832:	881b      	ldrh	r3, [r3, #0]
 8000834:	461a      	mov	r2, r3
 8000836:	793b      	ldrb	r3, [r7, #4]
 8000838:	4413      	add	r3, r2
 800083a:	2b82      	cmp	r3, #130	; 0x82
 800083c:	dc06      	bgt.n	800084c <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800083e:	4b37      	ldr	r3, [pc, #220]	; (800091c <ssd1306_WriteChar+0x114>)
 8000840:	885b      	ldrh	r3, [r3, #2]
 8000842:	461a      	mov	r2, r3
 8000844:	797b      	ldrb	r3, [r7, #5]
 8000846:	4413      	add	r3, r2
    // Check if character is valid
    if (ch < 32 || ch > 126)
        return 0;
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000848:	2b20      	cmp	r3, #32
 800084a:	dd01      	ble.n	8000850 <ssd1306_WriteChar+0x48>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
    {
        // Not enough space on current line
        return 0;
 800084c:	2300      	movs	r3, #0
 800084e:	e061      	b.n	8000914 <ssd1306_WriteChar+0x10c>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8000850:	2300      	movs	r3, #0
 8000852:	61fb      	str	r3, [r7, #28]
 8000854:	e050      	b.n	80008f8 <ssd1306_WriteChar+0xf0>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000856:	68ba      	ldr	r2, [r7, #8]
 8000858:	7bfb      	ldrb	r3, [r7, #15]
 800085a:	3b20      	subs	r3, #32
 800085c:	7979      	ldrb	r1, [r7, #5]
 800085e:	fb01 f303 	mul.w	r3, r1, r3
 8000862:	4619      	mov	r1, r3
 8000864:	69fb      	ldr	r3, [r7, #28]
 8000866:	440b      	add	r3, r1
 8000868:	005b      	lsls	r3, r3, #1
 800086a:	4413      	add	r3, r2
 800086c:	881b      	ldrh	r3, [r3, #0]
 800086e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8000870:	2300      	movs	r3, #0
 8000872:	61bb      	str	r3, [r7, #24]
 8000874:	e038      	b.n	80008e8 <ssd1306_WriteChar+0xe0>
            if((b << j) & 0x8000)  {
 8000876:	69bb      	ldr	r3, [r7, #24]
 8000878:	697a      	ldr	r2, [r7, #20]
 800087a:	fa02 f303 	lsl.w	r3, r2, r3
 800087e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000882:	2b00      	cmp	r3, #0
 8000884:	d014      	beq.n	80008b0 <ssd1306_WriteChar+0xa8>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000886:	4b25      	ldr	r3, [pc, #148]	; (800091c <ssd1306_WriteChar+0x114>)
 8000888:	881b      	ldrh	r3, [r3, #0]
 800088a:	b2da      	uxtb	r2, r3
 800088c:	69bb      	ldr	r3, [r7, #24]
 800088e:	b2db      	uxtb	r3, r3
 8000890:	4413      	add	r3, r2
 8000892:	b2d9      	uxtb	r1, r3
 8000894:	4b21      	ldr	r3, [pc, #132]	; (800091c <ssd1306_WriteChar+0x114>)
 8000896:	885b      	ldrh	r3, [r3, #2]
 8000898:	b2da      	uxtb	r2, r3
 800089a:	69fb      	ldr	r3, [r7, #28]
 800089c:	b2db      	uxtb	r3, r3
 800089e:	4413      	add	r3, r2
 80008a0:	b2da      	uxtb	r2, r3
 80008a2:	7bbb      	ldrb	r3, [r7, #14]
 80008a4:	4608      	mov	r0, r1
 80008a6:	4611      	mov	r1, r2
 80008a8:	461a      	mov	r2, r3
 80008aa:	f7ff ff43 	bl	8000734 <ssd1306_DrawPixel>
 80008ae:	e018      	b.n	80008e2 <ssd1306_WriteChar+0xda>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80008b0:	4b1a      	ldr	r3, [pc, #104]	; (800091c <ssd1306_WriteChar+0x114>)
 80008b2:	881b      	ldrh	r3, [r3, #0]
 80008b4:	b2da      	uxtb	r2, r3
 80008b6:	69bb      	ldr	r3, [r7, #24]
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	4413      	add	r3, r2
 80008bc:	b2d9      	uxtb	r1, r3
 80008be:	4b17      	ldr	r3, [pc, #92]	; (800091c <ssd1306_WriteChar+0x114>)
 80008c0:	885b      	ldrh	r3, [r3, #2]
 80008c2:	b2da      	uxtb	r2, r3
 80008c4:	69fb      	ldr	r3, [r7, #28]
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	4413      	add	r3, r2
 80008ca:	b2da      	uxtb	r2, r3
 80008cc:	7bbb      	ldrb	r3, [r7, #14]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	bf0c      	ite	eq
 80008d2:	2301      	moveq	r3, #1
 80008d4:	2300      	movne	r3, #0
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	4608      	mov	r0, r1
 80008da:	4611      	mov	r1, r2
 80008dc:	461a      	mov	r2, r3
 80008de:	f7ff ff29 	bl	8000734 <ssd1306_DrawPixel>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
        for(j = 0; j < Font.FontWidth; j++) {
 80008e2:	69bb      	ldr	r3, [r7, #24]
 80008e4:	3301      	adds	r3, #1
 80008e6:	61bb      	str	r3, [r7, #24]
 80008e8:	793b      	ldrb	r3, [r7, #4]
 80008ea:	461a      	mov	r2, r3
 80008ec:	69bb      	ldr	r3, [r7, #24]
 80008ee:	429a      	cmp	r2, r3
 80008f0:	d8c1      	bhi.n	8000876 <ssd1306_WriteChar+0x6e>
        // Not enough space on current line
        return 0;
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80008f2:	69fb      	ldr	r3, [r7, #28]
 80008f4:	3301      	adds	r3, #1
 80008f6:	61fb      	str	r3, [r7, #28]
 80008f8:	797b      	ldrb	r3, [r7, #5]
 80008fa:	461a      	mov	r2, r3
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	429a      	cmp	r2, r3
 8000900:	d8a9      	bhi.n	8000856 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8000902:	4b06      	ldr	r3, [pc, #24]	; (800091c <ssd1306_WriteChar+0x114>)
 8000904:	881a      	ldrh	r2, [r3, #0]
 8000906:	793b      	ldrb	r3, [r7, #4]
 8000908:	b29b      	uxth	r3, r3
 800090a:	4413      	add	r3, r2
 800090c:	b29a      	uxth	r2, r3
 800090e:	4b03      	ldr	r3, [pc, #12]	; (800091c <ssd1306_WriteChar+0x114>)
 8000910:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000912:	7bfb      	ldrb	r3, [r7, #15]
}
 8000914:	4618      	mov	r0, r3
 8000916:	3724      	adds	r7, #36	; 0x24
 8000918:	46bd      	mov	sp, r7
 800091a:	bd90      	pop	{r4, r7, pc}
 800091c:	2000035c 	.word	0x2000035c

08000920 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8000920:	b590      	push	{r4, r7, lr}
 8000922:	b085      	sub	sp, #20
 8000924:	af00      	add	r7, sp, #0
 8000926:	60f8      	str	r0, [r7, #12]
 8000928:	1d38      	adds	r0, r7, #4
 800092a:	e880 0006 	stmia.w	r0, {r1, r2}
 800092e:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8000930:	e015      	b.n	800095e <ssd1306_WriteString+0x3e>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	78fc      	ldrb	r4, [r7, #3]
 8000938:	4618      	mov	r0, r3
 800093a:	1d3b      	adds	r3, r7, #4
 800093c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000940:	4623      	mov	r3, r4
 8000942:	f7ff ff61 	bl	8000808 <ssd1306_WriteChar>
 8000946:	4603      	mov	r3, r0
 8000948:	461a      	mov	r2, r3
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	429a      	cmp	r2, r3
 8000950:	d002      	beq.n	8000958 <ssd1306_WriteString+0x38>
            // Char could not be written
            return *str;
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	e008      	b.n	800096a <ssd1306_WriteString+0x4a>
        }
        
        // Next char
        str++;
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	3301      	adds	r3, #1
 800095c:	60fb      	str	r3, [r7, #12]
}

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
    // Write until null-byte
    while (*str) {
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d1e5      	bne.n	8000932 <ssd1306_WriteString+0x12>
        // Next char
        str++;
    }
    
    // Everything ok
    return *str;
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	781b      	ldrb	r3, [r3, #0]
}
 800096a:	4618      	mov	r0, r3
 800096c:	3714      	adds	r7, #20
 800096e:	46bd      	mov	sp, r7
 8000970:	bd90      	pop	{r4, r7, pc}
 8000972:	bf00      	nop

08000974 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	460a      	mov	r2, r1
 800097e:	71fb      	strb	r3, [r7, #7]
 8000980:	4613      	mov	r3, r2
 8000982:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000984:	79fb      	ldrb	r3, [r7, #7]
 8000986:	b29a      	uxth	r2, r3
 8000988:	4b05      	ldr	r3, [pc, #20]	; (80009a0 <ssd1306_SetCursor+0x2c>)
 800098a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800098c:	79bb      	ldrb	r3, [r7, #6]
 800098e:	b29a      	uxth	r2, r3
 8000990:	4b03      	ldr	r3, [pc, #12]	; (80009a0 <ssd1306_SetCursor+0x2c>)
 8000992:	805a      	strh	r2, [r3, #2]
}
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	2000035c 	.word	0x2000035c

080009a4 <ssd1306_SetContrast>:
  ssd1306_Line(x1,y2,x1,y1,color);

  return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80009ae:	2381      	movs	r3, #129	; 0x81
 80009b0:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80009b2:	7bfb      	ldrb	r3, [r7, #15]
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff fd41 	bl	800043c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff fd3d 	bl	800043c <ssd1306_WriteCommand>
}
 80009c2:	3710      	adds	r7, #16
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d005      	beq.n	80009e4 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80009d8:	23af      	movs	r3, #175	; 0xaf
 80009da:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80009dc:	4b07      	ldr	r3, [pc, #28]	; (80009fc <ssd1306_SetDisplayOn+0x34>)
 80009de:	2201      	movs	r2, #1
 80009e0:	719a      	strb	r2, [r3, #6]
 80009e2:	e004      	b.n	80009ee <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80009e4:	23ae      	movs	r3, #174	; 0xae
 80009e6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80009e8:	4b04      	ldr	r3, [pc, #16]	; (80009fc <ssd1306_SetDisplayOn+0x34>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 80009ee:	7bfb      	ldrb	r3, [r7, #15]
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff fd23 	bl	800043c <ssd1306_WriteCommand>
}
 80009f6:	3710      	adds	r7, #16
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	2000035c 	.word	0x2000035c

08000a00 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b085      	sub	sp, #20
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	60f8      	str	r0, [r7, #12]
 8000a08:	460b      	mov	r3, r1
 8000a0a:	607a      	str	r2, [r7, #4]
 8000a0c:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));

  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 8000a0e:	7afb      	ldrb	r3, [r7, #11]
 8000a10:	089b      	lsrs	r3, r3, #2
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	4618      	mov	r0, r3
 8000a16:	7afb      	ldrb	r3, [r7, #11]
 8000a18:	089b      	lsrs	r3, r3, #2
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	3204      	adds	r2, #4
 8000a22:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000a26:	7afb      	ldrb	r3, [r7, #11]
 8000a28:	f003 0303 	and.w	r3, r3, #3
 8000a2c:	00db      	lsls	r3, r3, #3
 8000a2e:	4619      	mov	r1, r3
 8000a30:	23f8      	movs	r3, #248	; 0xf8
 8000a32:	408b      	lsls	r3, r1
 8000a34:	43db      	mvns	r3, r3
 8000a36:	ea02 0103 	and.w	r1, r2, r3
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	1d02      	adds	r2, r0, #4
 8000a3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000a46:	7afb      	ldrb	r3, [r7, #11]
 8000a48:	005b      	lsls	r3, r3, #1
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	408b      	lsls	r3, r1
 8000a50:	43db      	mvns	r3, r3
 8000a52:	401a      	ands	r2, r3
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	4a3a      	ldr	r2, [pc, #232]	; (8000b44 <XMC_GPIO_Init+0x144>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d003      	beq.n	8000a68 <XMC_GPIO_Init+0x68>
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	4a39      	ldr	r2, [pc, #228]	; (8000b48 <XMC_GPIO_Init+0x148>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d10a      	bne.n	8000a7e <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000a6c:	7afb      	ldrb	r3, [r7, #11]
 8000a6e:	2101      	movs	r1, #1
 8000a70:	fa01 f303 	lsl.w	r3, r1, r3
 8000a74:	43db      	mvns	r3, r3
 8000a76:	401a      	ands	r2, r3
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	661a      	str	r2, [r3, #96]	; 0x60
 8000a7c:	e042      	b.n	8000b04 <XMC_GPIO_Init+0x104>
  }
  else
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	b25b      	sxtb	r3, r3
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	da3c      	bge.n	8000b04 <XMC_GPIO_Init+0x104>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	685a      	ldr	r2, [r3, #4]
 8000a8e:	7afb      	ldrb	r3, [r7, #11]
 8000a90:	409a      	lsls	r2, r3
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	605a      	str	r2, [r3, #4]

      /* Set output driver strength */
      port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8000a96:	7afb      	ldrb	r3, [r7, #11]
 8000a98:	08db      	lsrs	r3, r3, #3
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	7afb      	ldrb	r3, [r7, #11]
 8000aa0:	08db      	lsrs	r3, r3, #3
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	3210      	adds	r2, #16
 8000aaa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000aae:	7afb      	ldrb	r3, [r7, #11]
 8000ab0:	f003 0307 	and.w	r3, r3, #7
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	2307      	movs	r3, #7
 8000aba:	408b      	lsls	r3, r1
 8000abc:	43db      	mvns	r3, r3
 8000abe:	ea02 0103 	and.w	r1, r2, r3
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	f100 0210 	add.w	r2, r0, #16
 8000ac8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8000acc:	7afb      	ldrb	r3, [r7, #11]
 8000ace:	08db      	lsrs	r3, r3, #3
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	7afb      	ldrb	r3, [r7, #11]
 8000ad6:	08db      	lsrs	r3, r3, #3
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	461a      	mov	r2, r3
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	3210      	adds	r2, #16
 8000ae0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	7a1b      	ldrb	r3, [r3, #8]
 8000ae8:	4619      	mov	r1, r3
 8000aea:	7afb      	ldrb	r3, [r7, #11]
 8000aec:	f003 0307 	and.w	r3, r3, #7
 8000af0:	009b      	lsls	r3, r3, #2
 8000af2:	fa01 f303 	lsl.w	r3, r1, r3
 8000af6:	ea42 0103 	orr.w	r1, r2, r3
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	f100 0210 	add.w	r2, r0, #16
 8000b00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8000b04:	7afb      	ldrb	r3, [r7, #11]
 8000b06:	089b      	lsrs	r3, r3, #2
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	7afb      	ldrb	r3, [r7, #11]
 8000b0e:	089b      	lsrs	r3, r3, #2
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	461a      	mov	r2, r3
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	3204      	adds	r2, #4
 8000b18:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	4619      	mov	r1, r3
 8000b22:	7afb      	ldrb	r3, [r7, #11]
 8000b24:	f003 0303 	and.w	r3, r3, #3
 8000b28:	00db      	lsls	r3, r3, #3
 8000b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b2e:	ea42 0103 	orr.w	r1, r2, r3
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	1d02      	adds	r2, r0, #4
 8000b36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000b3a:	3714      	adds	r7, #20
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	48028e00 	.word	0x48028e00
 8000b48:	48028f00 	.word	0x48028f00

08000b4c <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000b50:	4b03      	ldr	r3, [pc, #12]	; (8000b60 <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 8000b52:	681b      	ldr	r3, [r3, #0]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	2000ffc0 	.word	0x2000ffc0

08000b64 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  return (SCU_GENERAL->MIRRSTS);
 8000b68:	4b03      	ldr	r3, [pc, #12]	; (8000b78 <XMC_SCU_GetMirrorStatus+0x14>)
 8000b6a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	50004000 	.word	0x50004000

08000b7c <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 8000b84:	f7ff fba6 	bl	80002d4 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8000b88:	4b0b      	ldr	r3, [pc, #44]	; (8000bb8 <XMC_SCU_lDelay+0x3c>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a0b      	ldr	r2, [pc, #44]	; (8000bbc <XMC_SCU_lDelay+0x40>)
 8000b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b92:	0c9a      	lsrs	r2, r3, #18
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	fb02 f303 	mul.w	r3, r2, r3
 8000b9a:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	e003      	b.n	8000baa <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 8000ba2:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	68fa      	ldr	r2, [r7, #12]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	429a      	cmp	r2, r3
 8000bb0:	d3f7      	bcc.n	8000ba2 <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 8000bb2:	3710      	adds	r7, #16
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	2000ffc0 	.word	0x2000ffc0
 8000bbc:	431bde83 	.word	0x431bde83

08000bc0 <XMC_SCU_INTERUPT_GetEventStatus>:
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  return (SCU_INTERRUPT->SRRAW);
 8000bc4:	4b03      	ldr	r3, [pc, #12]	; (8000bd4 <XMC_SCU_INTERUPT_GetEventStatus+0x14>)
 8000bc6:	685b      	ldr	r3, [r3, #4]
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	50004074 	.word	0x50004074

08000bd8 <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 8000be0:	4a03      	ldr	r2, [pc, #12]	; (8000bf0 <XMC_SCU_INTERRUPT_ClearEventStatus+0x18>)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	60d3      	str	r3, [r2, #12]
}
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	50004074 	.word	0x50004074

08000bf4 <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 8000bf4:	b5b0      	push	{r4, r5, r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af02      	add	r7, sp, #8
 8000bfa:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
             (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                  (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 8000bfc:	2000      	movs	r0, #0
 8000bfe:	f000 f8c5 	bl	8000d8c <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 8000c02:	f000 fa87 	bl	8001114 <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	79db      	ldrb	r3, [r3, #7]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d00a      	beq.n	8000c24 <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 8000c0e:	f000 fabf 	bl	8001190 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 8000c12:	bf00      	nop
 8000c14:	f000 faaa 	bl	800116c <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	f083 0301 	eor.w	r3, r3, #1
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d1f7      	bne.n	8000c14 <XMC_SCU_CLOCK_Init+0x20>
  }

  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	7a5b      	ldrb	r3, [r3, #9]
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f000 f929 	bl	8000e80 <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 8000c2e:	bf00      	nop
 8000c30:	f7ff ff98 	bl	8000b64 <XMC_SCU_GetMirrorStatus>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d1fa      	bne.n	8000c30 <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	7a1b      	ldrb	r3, [r3, #8]
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f000 fa42 	bl	80010c8 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	7c1b      	ldrb	r3, [r3, #16]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f000 f937 	bl	8000ebc <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	7c5b      	ldrb	r3, [r3, #17]
 8000c52:	4618      	mov	r0, r3
 8000c54:	f000 f95a 	bl	8000f0c <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	7c9b      	ldrb	r3, [r3, #18]
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f000 f941 	bl	8000ee4 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	7cdb      	ldrb	r3, [r3, #19]
 8000c66:	4618      	mov	r0, r3
 8000c68:	f000 f964 	bl	8000f34 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	799b      	ldrb	r3, [r3, #6]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d00a      	beq.n	8000c8a <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 8000c74:	f000 fac4 	bl	8001200 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while (XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 8000c78:	bf00      	nop
 8000c7a:	f000 fae9 	bl	8001250 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	f083 0301 	eor.w	r3, r3, #1
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d1f7      	bne.n	8000c7a <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	78db      	ldrb	r3, [r3, #3]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d109      	bne.n	8000ca6 <XMC_SCU_CLOCK_Init+0xb2>
  {
    /* Do not enable PLL Power Down Mode when the OSC Watchdog is enabled */
    if (config->enable_oschp == false)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	799b      	ldrb	r3, [r3, #6]
 8000c96:	f083 0301 	eor.w	r3, r3, #1
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d017      	beq.n	8000cd0 <XMC_SCU_CLOCK_Init+0xdc>
    {
      XMC_SCU_CLOCK_DisableSystemPll();
 8000ca0:	f000 fafa 	bl	8001298 <XMC_SCU_CLOCK_DisableSystemPll>
 8000ca4:	e014      	b.n	8000cd0 <XMC_SCU_CLOCK_Init+0xdc>
    }
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 8000ca6:	f000 fae7 	bl	8001278 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	8899      	ldrh	r1, [r3, #4]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000cb6:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000cbc:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000cc2:	9300      	str	r3, [sp, #0]
 8000cc4:	4608      	mov	r0, r1
 8000cc6:	4611      	mov	r1, r2
 8000cc8:	462a      	mov	r2, r5
 8000cca:	4623      	mov	r3, r4
 8000ccc:	f000 faf4 	bl	80012b8 <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cd8:	d103      	bne.n	8000ce2 <XMC_SCU_CLOCK_Init+0xee>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);
 8000cda:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000cde:	f000 f855 	bl	8000d8c <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 8000ce2:	f7ff faf7 	bl	80002d4 <SystemCoreClockUpdate>
}
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bdb0      	pop	{r4, r5, r7, pc}

08000cec <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(volatile uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	0f1b      	lsrs	r3, r3, #28
 8000cf8:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000d00:	60bb      	str	r3, [r7, #8]

  *(volatile uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 8000d02:	68fa      	ldr	r2, [r7, #12]
 8000d04:	4613      	mov	r3, r2
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	4413      	add	r3, r2
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	4b04      	ldr	r3, [pc, #16]	; (8000d20 <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 8000d10:	4413      	add	r3, r2
 8000d12:	68ba      	ldr	r2, [r7, #8]
 8000d14:	601a      	str	r2, [r3, #0]
}
 8000d16:	3714      	adds	r7, #20
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	50004414 	.word	0x50004414

08000d24 <XMC_SCU_RESET_IsPeripheralResetAsserted>:

/* Find out if the peripheral reset is asserted */
bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	0f1b      	lsrs	r3, r3, #28
 8000d30:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000d38:	60bb      	str	r3, [r7, #8]

  return ((*(const volatile uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 8000d3a:	68fa      	ldr	r2, [r7, #12]
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	4413      	add	r3, r2
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	461a      	mov	r2, r3
 8000d46:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <XMC_SCU_RESET_IsPeripheralResetAsserted+0x44>)
 8000d48:	4413      	add	r3, r2
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	bf14      	ite	ne
 8000d54:	2301      	movne	r3, #1
 8000d56:	2300      	moveq	r3, #0
 8000d58:	b2db      	uxtb	r3, r3
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3714      	adds	r7, #20
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	5000440c 	.word	0x5000440c

08000d6c <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8000d70:	f7ff feec 	bl	8000b4c <XMC_SCU_CLOCK_GetCpuClockFrequency>
 8000d74:	4602      	mov	r2, r0
                    ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));
 8000d76:	4b04      	ldr	r3, [pc, #16]	; (8000d88 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 8000d78:	695b      	ldr	r3, [r3, #20]
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	fa22 f303 	lsr.w	r3, r2, r3
                    ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	50004600 	.word	0x50004600

08000d8c <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 8000d94:	4906      	ldr	r1, [pc, #24]	; (8000db0 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8000d96:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8000d98:	68db      	ldr	r3, [r3, #12]
 8000d9a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	50004600 	.word	0x50004600

08000db4 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 8000dbc:	4906      	ldr	r1, [pc, #24]	; (8000dd8 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8000dbe:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8000dc0:	699b      	ldr	r3, [r3, #24]
 8000dc2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	50004600 	.word	0x50004600

08000ddc <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 8000de4:	4906      	ldr	r1, [pc, #24]	; (8000e00 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8000de6:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8000de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	50004600 	.word	0x50004600

08000e04 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 8000e0e:	88fb      	ldrh	r3, [r7, #6]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d108      	bne.n	8000e26 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000e14:	4a0a      	ldr	r2, [pc, #40]	; (8000e40 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000e16:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000e18:	68db      	ldr	r3, [r3, #12]
 8000e1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e1e:	f023 0301 	bic.w	r3, r3, #1
 8000e22:	60d3      	str	r3, [r2, #12]
 8000e24:	e007      	b.n	8000e36 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000e26:	4a06      	ldr	r2, [pc, #24]	; (8000e40 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000e28:	4b05      	ldr	r3, [pc, #20]	; (8000e40 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	60d3      	str	r3, [r2, #12]
  }
}
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	50004710 	.word	0x50004710

08000e44 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8000e4e:	bf00      	nop
 8000e50:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 8000e52:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000e56:	f003 0308 	and.w	r3, r3, #8
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d1f8      	bne.n	8000e50 <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 8000e5e:	4907      	ldr	r1, [pc, #28]	; (8000e7c <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 8000e68:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	50004000 	.word	0x50004000
 8000e7c:	50004300 	.word	0x50004300

08000e80 <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8000e8a:	bf00      	nop
 8000e8c:	4b09      	ldr	r3, [pc, #36]	; (8000eb4 <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 8000e8e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000e92:	f003 0308 	and.w	r3, r3, #8
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d1f8      	bne.n	8000e8c <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8000e9a:	4907      	ldr	r1, [pc, #28]	; (8000eb8 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
{
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	50004000 	.word	0x50004000
 8000eb8:	50004300 	.word	0x50004300

08000ebc <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8000ec4:	4906      	ldr	r1, [pc, #24]	; (8000ee0 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8000ec6:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8000ec8:	68db      	ldr	r3, [r3, #12]
 8000eca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	50004600 	.word	0x50004600

08000ee4 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8000eec:	4906      	ldr	r1, [pc, #24]	; (8000f08 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8000eee:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8000ef0:	6a1b      	ldr	r3, [r3, #32]
 8000ef2:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8000efa:	4313      	orrs	r3, r2
 8000efc:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	50004600 	.word	0x50004600

08000f0c <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000f14:	4906      	ldr	r1, [pc, #24]	; (8000f30 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8000f16:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8000f18:	691b      	ldr	r3, [r3, #16]
 8000f1a:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000f22:	4313      	orrs	r3, r2
 8000f24:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	50004600 	.word	0x50004600

08000f34 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8000f3c:	4906      	ldr	r1, [pc, #24]	; (8000f58 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 8000f3e:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 8000f40:	695b      	ldr	r3, [r3, #20]
 8000f42:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	50004600 	.word	0x50004600

08000f5c <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8000f64:	4906      	ldr	r1, [pc, #24]	; (8000f80 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8000f66:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8000f68:	699b      	ldr	r3, [r3, #24]
 8000f6a:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8000f72:	4313      	orrs	r3, r2
 8000f74:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos);
}
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	50004600 	.word	0x50004600

08000f84 <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8000f8c:	4906      	ldr	r1, [pc, #24]	; (8000fa8 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 8000f8e:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 8000f90:	69db      	ldr	r3, [r3, #28]
 8000f92:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	61cb      	str	r3, [r1, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
}
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	50004600 	.word	0x50004600

08000fac <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8000fb4:	4906      	ldr	r1, [pc, #24]	; (8000fd0 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 8000fb6:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 8000fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	50004600 	.word	0x50004600

08000fd4 <XMC_SCU_CLOCK_EnableClock>:
}
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 8000fde:	4a04      	ldr	r2, [pc, #16]	; (8000ff0 <XMC_SCU_CLOCK_EnableClock+0x1c>)
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	6053      	str	r3, [r2, #4]
}
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	50004600 	.word	0x50004600

08000ff4 <XMC_SCU_CLOCK_EnableUsbPll>:
  return ((SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC33V_Msk) >> SCU_POWER_EVRVADCSTAT_VADC33V_Pos) * XMC_SCU_POWER_LSB33V;
}

/* API to enable USB PLL for USB clock */
void XMC_SCU_CLOCK_EnableUsbPll(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON &= (uint32_t)~(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 8000ff8:	4a05      	ldr	r2, [pc, #20]	; (8001010 <XMC_SCU_CLOCK_EnableUsbPll+0x1c>)
 8000ffa:	4b05      	ldr	r3, [pc, #20]	; (8001010 <XMC_SCU_CLOCK_EnableUsbPll+0x1c>)
 8000ffc:	695b      	ldr	r3, [r3, #20]
 8000ffe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001002:	f023 0302 	bic.w	r3, r3, #2
 8001006:	6153      	str	r3, [r2, #20]
}
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	50004710 	.word	0x50004710

08001014 <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 800101e:	4a28      	ldr	r2, [pc, #160]	; (80010c0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8001020:	4b27      	ldr	r3, [pc, #156]	; (80010c0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8001022:	695b      	ldr	r3, [r3, #20]
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	6153      	str	r3, [r2, #20]
  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) == 0U)
 800102a:	bf00      	nop
 800102c:	4b24      	ldr	r3, [pc, #144]	; (80010c0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800102e:	691b      	ldr	r3, [r3, #16]
 8001030:	f003 0301 	and.w	r3, r3, #1
 8001034:	2b00      	cmp	r3, #0
 8001036:	d0f9      	beq.n	800102c <XMC_SCU_CLOCK_StartUsbPll+0x18>
  {
    /* wait for prescaler mode */
  }

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 8001038:	4a21      	ldr	r2, [pc, #132]	; (80010c0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800103a:	4b21      	ldr	r3, [pc, #132]	; (80010c0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800103c:	695b      	ldr	r3, [r3, #20]
 800103e:	f043 0310 	orr.w	r3, r3, #16
 8001042:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv - 1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8001044:	491e      	ldr	r1, [pc, #120]	; (80010c0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	3b01      	subs	r3, #1
 800104a:	021a      	lsls	r2, r3, #8
                                  (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	3b01      	subs	r3, #1
 8001050:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv - 1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8001052:	4313      	orrs	r3, r2
 8001054:	614b      	str	r3, [r1, #20]
                                  (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8001056:	4a1a      	ldr	r2, [pc, #104]	; (80010c0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8001058:	4b19      	ldr	r3, [pc, #100]	; (80010c0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800105a:	695b      	ldr	r3, [r3, #20]
 800105c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001060:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8001062:	4a17      	ldr	r2, [pc, #92]	; (80010c0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8001064:	4b16      	ldr	r3, [pc, #88]	; (80010c0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8001066:	695b      	ldr	r3, [r3, #20]
 8001068:	f023 0310 	bic.w	r3, r3, #16
 800106c:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 800106e:	4a14      	ldr	r2, [pc, #80]	; (80010c0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8001070:	4b13      	ldr	r3, [pc, #76]	; (80010c0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8001072:	695b      	ldr	r3, [r3, #20]
 8001074:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001078:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 800107a:	bf00      	nop
 800107c:	4b10      	ldr	r3, [pc, #64]	; (80010c0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800107e:	691b      	ldr	r3, [r3, #16]
 8001080:	f003 0304 	and.w	r3, r3, #4
 8001084:	2b00      	cmp	r3, #0
 8001086:	d0f9      	beq.n	800107c <XMC_SCU_CLOCK_StartUsbPll+0x68>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8001088:	4a0d      	ldr	r2, [pc, #52]	; (80010c0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800108a:	4b0d      	ldr	r3, [pc, #52]	; (80010c0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800108c:	695b      	ldr	r3, [r3, #20]
 800108e:	f023 0301 	bic.w	r3, r3, #1
 8001092:	6153      	str	r3, [r2, #20]
  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) != 0U)
 8001094:	bf00      	nop
 8001096:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8001098:	691b      	ldr	r3, [r3, #16]
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d1f9      	bne.n	8001096 <XMC_SCU_CLOCK_StartUsbPll+0x82>
  {
    /* wait for normal mode */
  }

  /* Reset OSCDISCDIS */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 80010a2:	4a07      	ldr	r2, [pc, #28]	; (80010c0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80010a6:	695b      	ldr	r3, [r3, #20]
 80010a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80010ac:	6153      	str	r3, [r2, #20]

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_UVCOLCKT_Msk;
 80010ae:	4b05      	ldr	r3, [pc, #20]	; (80010c4 <XMC_SCU_CLOCK_StartUsbPll+0xb0>)
 80010b0:	2208      	movs	r2, #8
 80010b2:	60da      	str	r2, [r3, #12]
}
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	50004710 	.word	0x50004710
 80010c4:	50004160 	.word	0x50004160

080010c8 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 80010d2:	4a0f      	ldr	r2, [pc, #60]	; (8001110 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80010d4:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80010dc:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d10e      	bne.n	8001102 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 80010e4:	4a0a      	ldr	r2, [pc, #40]	; (8001110 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80010e6:	4b0a      	ldr	r3, [pc, #40]	; (8001110 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80010ee:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 80010f0:	2064      	movs	r0, #100	; 0x64
 80010f2:	f7ff fd43 	bl	8000b7c <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 80010f6:	4a06      	ldr	r2, [pc, #24]	; (8001110 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80010f8:	4b05      	ldr	r3, [pc, #20]	; (8001110 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001100:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 8001102:	2064      	movs	r0, #100	; 0x64
 8001104:	f7ff fd3a 	bl	8000b7c <XMC_SCU_lDelay>
}
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	50004710 	.word	0x50004710

08001114 <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if ((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8001118:	4b12      	ldr	r3, [pc, #72]	; (8001164 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f003 0301 	and.w	r3, r3, #1
 8001120:	2b00      	cmp	r3, #0
 8001122:	d109      	bne.n	8001138 <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8001124:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8001126:	2201      	movs	r2, #1
 8001128:	605a      	str	r2, [r3, #4]

    while ((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 800112a:	bf00      	nop
 800112c:	4b0d      	ldr	r3, [pc, #52]	; (8001164 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f003 0301 	and.w	r3, r3, #1
 8001134:	2b00      	cmp	r3, #0
 8001136:	d0f9      	beq.n	800112c <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if ((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8001138:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001140:	2b00      	cmp	r3, #0
 8001142:	d00a      	beq.n	800115a <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8001144:	4b08      	ldr	r3, [pc, #32]	; (8001168 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8001146:	f44f 7200 	mov.w	r2, #512	; 0x200
 800114a:	609a      	str	r2, [r3, #8]
    while ((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 800114c:	bf00      	nop
 800114e:	4b06      	ldr	r3, [pc, #24]	; (8001168 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001156:	2b00      	cmp	r3, #0
 8001158:	d1f9      	bne.n	800114e <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	50004200 	.word	0x50004200
 8001168:	50004400 	.word	0x50004400

0800116c <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8001170:	4b06      	ldr	r3, [pc, #24]	; (800118c <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f003 0308 	and.w	r3, r3, #8
 8001178:	2b00      	cmp	r3, #0
 800117a:	bf0c      	ite	eq
 800117c:	2301      	moveq	r3, #1
 800117e:	2300      	movne	r3, #0
 8001180:	b2db      	uxtb	r3, r3
}
 8001182:	4618      	mov	r0, r3
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	50004300 	.word	0x50004300

08001190 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED);
 8001194:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001198:	f7ff fd1e 	bl	8000bd8 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 800119c:	4a17      	ldr	r2, [pc, #92]	; (80011fc <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 800119e:	4b17      	ldr	r3, [pc, #92]	; (80011fc <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 80011a0:	69db      	ldr	r3, [r3, #28]
 80011a2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80011a6:	61d3      	str	r3, [r2, #28]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);
 80011a8:	bf00      	nop
 80011aa:	f7ff fd09 	bl	8000bc0 <XMC_SCU_INTERUPT_GetEventStatus>
 80011ae:	4603      	mov	r3, r0
 80011b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d0f8      	beq.n	80011aa <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x1a>

  /* Clear ULP WDG status */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED);
 80011b8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80011bc:	f7ff fd0c 	bl	8000bd8 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 80011c0:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 80011c2:	2208      	movs	r2, #8
 80011c4:	605a      	str	r2, [r3, #4]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);
 80011c6:	bf00      	nop
 80011c8:	f7ff fcfa 	bl	8000bc0 <XMC_SCU_INTERUPT_GetEventStatus>
 80011cc:	4603      	mov	r3, r0
 80011ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d0f8      	beq.n	80011c8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x38>

  /* Enable ULP WDG */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED);
 80011d6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80011da:	f7ff fcfd 	bl	8000bd8 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 80011de:	4a07      	ldr	r2, [pc, #28]	; (80011fc <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 80011e0:	4b06      	ldr	r3, [pc, #24]	; (80011fc <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	f043 0308 	orr.w	r3, r3, #8
 80011e8:	60d3      	str	r3, [r2, #12]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED) == 0);
 80011ea:	bf00      	nop
 80011ec:	f7ff fce8 	bl	8000bc0 <XMC_SCU_INTERUPT_GetEventStatus>
 80011f0:	4603      	mov	r3, r0
 80011f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d0f8      	beq.n	80011ec <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>
}
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	50004300 	.word	0x50004300

08001200 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8001200:	b5b0      	push	{r4, r5, r7, lr}
 8001202:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8001204:	4a0f      	ldr	r2, [pc, #60]	; (8001244 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8001206:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800120e:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8001210:	4d0d      	ldr	r5, [pc, #52]	; (8001248 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8001212:	4b0d      	ldr	r3, [pc, #52]	; (8001248 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 800121a:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 800121e:	f002 f851 	bl	80032c4 <OSCHP_GetFrequency>
 8001222:	4602      	mov	r2, r0
 8001224:	4b09      	ldr	r3, [pc, #36]	; (800124c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8001226:	fba3 2302 	umull	r2, r3, r3, r2
 800122a:	0d1b      	lsrs	r3, r3, #20
 800122c:	3b01      	subs	r3, #1
 800122e:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8001230:	4323      	orrs	r3, r4
 8001232:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8001234:	4a03      	ldr	r2, [pc, #12]	; (8001244 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8001236:	4b03      	ldr	r3, [pc, #12]	; (8001244 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800123e:	6053      	str	r3, [r2, #4]
}
 8001240:	bdb0      	pop	{r4, r5, r7, pc}
 8001242:	bf00      	nop
 8001244:	50004710 	.word	0x50004710
 8001248:	50004700 	.word	0x50004700
 800124c:	6b5fca6b 	.word	0x6b5fca6b

08001250 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8001254:	4b07      	ldr	r3, [pc, #28]	; (8001274 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f403 7360 	and.w	r3, r3, #896	; 0x380
 800125c:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8001260:	bf0c      	ite	eq
 8001262:	2301      	moveq	r3, #1
 8001264:	2300      	movne	r3, #0
 8001266:	b2db      	uxtb	r3, r3
}
 8001268:	4618      	mov	r0, r3
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	50004710 	.word	0x50004710

08001278 <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 800127c:	4a05      	ldr	r2, [pc, #20]	; (8001294 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 800127e:	4b05      	ldr	r3, [pc, #20]	; (8001294 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001286:	f023 0302 	bic.w	r3, r3, #2
 800128a:	6053      	str	r3, [r2, #4]
}
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	50004710 	.word	0x50004710

08001298 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 800129c:	4a05      	ldr	r2, [pc, #20]	; (80012b4 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 800129e:	4b05      	ldr	r3, [pc, #20]	; (80012b4 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a6:	f043 0302 	orr.w	r3, r3, #2
 80012aa:	6053      	str	r3, [r2, #4]
}
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	50004710 	.word	0x50004710

080012b8 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60ba      	str	r2, [r7, #8]
 80012c0:	607b      	str	r3, [r7, #4]
 80012c2:	4603      	mov	r3, r0
 80012c4:	81fb      	strh	r3, [r7, #14]
 80012c6:	460b      	mov	r3, r1
 80012c8:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 80012ca:	89fb      	ldrh	r3, [r7, #14]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff fd99 	bl	8000e04 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 80012d2:	7b7b      	ldrb	r3, [r7, #13]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	f040 808b 	bne.w	80013f0 <XMC_SCU_CLOCK_StartSystemPll+0x138>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 80012da:	89fb      	ldrh	r3, [r7, #14]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d109      	bne.n	80012f4 <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 80012e0:	f001 fff0 	bl	80032c4 <OSCHP_GetFrequency>
 80012e4:	4602      	mov	r2, r0
 80012e6:	4b54      	ldr	r3, [pc, #336]	; (8001438 <XMC_SCU_CLOCK_StartSystemPll+0x180>)
 80012e8:	fba3 2302 	umull	r2, r3, r3, r2
 80012ec:	0c9b      	lsrs	r3, r3, #18
 80012ee:	059b      	lsls	r3, r3, #22
 80012f0:	617b      	str	r3, [r7, #20]
 80012f2:	e002      	b.n	80012fa <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 80012f4:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 80012f8:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	fb02 f203 	mul.w	r2, r2, r3
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	fbb2 f3f3 	udiv	r3, r2, r3
 8001308:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	4a4b      	ldr	r2, [pc, #300]	; (800143c <XMC_SCU_CLOCK_StartSystemPll+0x184>)
 800130e:	fba2 2303 	umull	r2, r3, r2, r3
 8001312:	091b      	lsrs	r3, r3, #4
 8001314:	0d9b      	lsrs	r3, r3, #22
 8001316:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8001318:	4a49      	ldr	r2, [pc, #292]	; (8001440 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 800131a:	4b49      	ldr	r3, [pc, #292]	; (8001440 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f043 0301 	orr.w	r3, r3, #1
 8001322:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8001324:	bf00      	nop
 8001326:	4b46      	ldr	r3, [pc, #280]	; (8001440 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	2b00      	cmp	r3, #0
 8001330:	d0f9      	beq.n	8001326 <XMC_SCU_CLOCK_StartSystemPll+0x6e>
    {
      /* wait for prescaler mode */
    }

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8001332:	4a43      	ldr	r2, [pc, #268]	; (8001440 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8001334:	4b42      	ldr	r3, [pc, #264]	; (8001440 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f043 0310 	orr.w	r3, r3, #16
 800133c:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 800133e:	4940      	ldr	r1, [pc, #256]	; (8001440 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8001340:	4b3f      	ldr	r3, [pc, #252]	; (8001440 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8001342:	689a      	ldr	r2, [r3, #8]
 8001344:	4b3f      	ldr	r3, [pc, #252]	; (8001444 <XMC_SCU_CLOCK_StartSystemPll+0x18c>)
 8001346:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	3a01      	subs	r2, #1
 800134c:	0212      	lsls	r2, r2, #8
 800134e:	431a      	orrs	r2, r3
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	3b01      	subs	r3, #1
 8001354:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8001356:	431a      	orrs	r2, r3
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                  ((pdiv - 1UL) << SCU_PLL_PLLCON1_PDIV_Pos));
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	3b01      	subs	r3, #1
 800135c:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 800135e:	4313      	orrs	r3, r2
 8001360:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                  ((pdiv - 1UL) << SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8001362:	4a37      	ldr	r2, [pc, #220]	; (8001440 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8001364:	4b36      	ldr	r3, [pc, #216]	; (8001440 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800136c:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 800136e:	4a34      	ldr	r2, [pc, #208]	; (8001440 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8001370:	4b33      	ldr	r3, [pc, #204]	; (8001440 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f023 0310 	bic.w	r3, r3, #16
 8001378:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 800137a:	4a31      	ldr	r2, [pc, #196]	; (8001440 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 800137c:	4b30      	ldr	r3, [pc, #192]	; (8001440 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001384:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8001386:	bf00      	nop
 8001388:	4b2d      	ldr	r3, [pc, #180]	; (8001440 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 0304 	and.w	r3, r3, #4
 8001390:	2b00      	cmp	r3, #0
 8001392:	d0f9      	beq.n	8001388 <XMC_SCU_CLOCK_StartSystemPll+0xd0>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8001394:	4a2a      	ldr	r2, [pc, #168]	; (8001440 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8001396:	4b2a      	ldr	r3, [pc, #168]	; (8001440 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f023 0301 	bic.w	r3, r3, #1
 800139e:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 80013a0:	bf00      	nop
 80013a2:	4b27      	ldr	r3, [pc, #156]	; (8001440 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d1f9      	bne.n	80013a2 <XMC_SCU_CLOCK_StartSystemPll+0xea>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	4a25      	ldr	r2, [pc, #148]	; (8001448 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 80013b2:	fba2 2303 	umull	r2, r3, r2, r3
 80013b6:	095b      	lsrs	r3, r3, #5
 80013b8:	0d9b      	lsrs	r3, r3, #22
 80013ba:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 80013bc:	6a3a      	ldr	r2, [r7, #32]
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d202      	bcs.n	80013ca <XMC_SCU_CLOCK_StartSystemPll+0x112>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 80013c4:	6938      	ldr	r0, [r7, #16]
 80013c6:	f000 f845 	bl	8001454 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	085b      	lsrs	r3, r3, #1
 80013ce:	4a1f      	ldr	r2, [pc, #124]	; (800144c <XMC_SCU_CLOCK_StartSystemPll+0x194>)
 80013d0:	fba2 2303 	umull	r2, r3, r2, r3
 80013d4:	095b      	lsrs	r3, r3, #5
 80013d6:	0d9b      	lsrs	r3, r3, #22
 80013d8:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 80013da:	6a3a      	ldr	r2, [r7, #32]
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	429a      	cmp	r2, r3
 80013e0:	d202      	bcs.n	80013e8 <XMC_SCU_CLOCK_StartSystemPll+0x130>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 80013e2:	6938      	ldr	r0, [r7, #16]
 80013e4:	f000 f836 	bl	8001454 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 80013e8:	6a38      	ldr	r0, [r7, #32]
 80013ea:	f000 f833 	bl	8001454 <XMC_SCU_CLOCK_StepSystemPllFrequency>
 80013ee:	e01c      	b.n	800142a <XMC_SCU_CLOCK_StartSystemPll+0x172>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 80013f0:	4913      	ldr	r1, [pc, #76]	; (8001440 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 80013f2:	4b13      	ldr	r3, [pc, #76]	; (8001440 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                                  ((kdiv - 1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 80013fa:	6a3b      	ldr	r3, [r7, #32]
 80013fc:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 80013fe:	4313      	orrs	r3, r2
 8001400:	608b      	str	r3, [r1, #8]
                                  ((kdiv - 1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K1RDY_Msk) == 0U)
 8001402:	bf00      	nop
 8001404:	4b0e      	ldr	r3, [pc, #56]	; (8001440 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0310 	and.w	r3, r3, #16
 800140c:	2b00      	cmp	r3, #0
 800140e:	d0f9      	beq.n	8001404 <XMC_SCU_CLOCK_StartSystemPll+0x14c>
    {
      /* wait until K1-divider operates on the configured value  */
    }

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8001410:	4a0b      	ldr	r2, [pc, #44]	; (8001440 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8001412:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f043 0301 	orr.w	r3, r3, #1
 800141a:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 800141c:	bf00      	nop
 800141e:	4b08      	ldr	r3, [pc, #32]	; (8001440 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	2b00      	cmp	r3, #0
 8001428:	d0f9      	beq.n	800141e <XMC_SCU_CLOCK_StartSystemPll+0x166>
    {
      /* wait for prescaler mode */
    }
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 800142a:	4b09      	ldr	r3, [pc, #36]	; (8001450 <XMC_SCU_CLOCK_StartSystemPll+0x198>)
 800142c:	2205      	movs	r2, #5
 800142e:	60da      	str	r2, [r3, #12]
}
 8001430:	3718      	adds	r7, #24
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	431bde83 	.word	0x431bde83
 800143c:	aaaaaaab 	.word	0xaaaaaaab
 8001440:	50004710 	.word	0x50004710
 8001444:	f08080ff 	.word	0xf08080ff
 8001448:	88888889 	.word	0x88888889
 800144c:	b60b60b7 	.word	0xb60b60b7
 8001450:	50004160 	.word	0x50004160

08001454 <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 800145c:	490b      	ldr	r1, [pc, #44]	; (800148c <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 800145e:	4b0b      	ldr	r3, [pc, #44]	; (800148c <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                                ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	3b01      	subs	r3, #1
 800146a:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 800146c:	4313      	orrs	r3, r2
 800146e:	608b      	str	r3, [r1, #8]
                                ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K2RDY_Msk) == 0U)
 8001470:	bf00      	nop
 8001472:	4b06      	ldr	r3, [pc, #24]	; (800148c <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0320 	and.w	r3, r3, #32
 800147a:	2b00      	cmp	r3, #0
 800147c:	d0f9      	beq.n	8001472 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x1e>
  {
    /* wait until K2-divider operates on the configured value  */
  }

  XMC_SCU_lDelay(50U);
 800147e:	2032      	movs	r0, #50	; 0x32
 8001480:	f7ff fb7c 	bl	8000b7c <XMC_SCU_lDelay>
}
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	50004710 	.word	0x50004710

08001490 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800149e:	60da      	str	r2, [r3, #12]
}
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop

080014ac <XMC_CCU4_lDeassertReset>:
    XMC_ASSERT("XMC_CCU4_lAssertReset:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	4a10      	ldr	r2, [pc, #64]	; (80014f8 <XMC_CCU4_lDeassertReset+0x4c>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d103      	bne.n	80014c4 <XMC_CCU4_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 80014bc:	2004      	movs	r0, #4
 80014be:	f7ff fc15 	bl	8000cec <XMC_SCU_RESET_DeassertPeripheralReset>
 80014c2:	e016      	b.n	80014f2 <XMC_CCU4_lDeassertReset+0x46>
  }
#if defined(CCU41)
  else if (module == CCU41)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	4a0d      	ldr	r2, [pc, #52]	; (80014fc <XMC_CCU4_lDeassertReset+0x50>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d103      	bne.n	80014d4 <XMC_CCU4_lDeassertReset+0x28>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 80014cc:	2008      	movs	r0, #8
 80014ce:	f7ff fc0d 	bl	8000cec <XMC_SCU_RESET_DeassertPeripheralReset>
 80014d2:	e00e      	b.n	80014f2 <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU42)
  else if (module == CCU42)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4a0a      	ldr	r2, [pc, #40]	; (8001500 <XMC_CCU4_lDeassertReset+0x54>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d103      	bne.n	80014e4 <XMC_CCU4_lDeassertReset+0x38>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 80014dc:	2010      	movs	r0, #16
 80014de:	f7ff fc05 	bl	8000cec <XMC_SCU_RESET_DeassertPeripheralReset>
 80014e2:	e006      	b.n	80014f2 <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4a07      	ldr	r2, [pc, #28]	; (8001504 <XMC_CCU4_lDeassertReset+0x58>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d102      	bne.n	80014f2 <XMC_CCU4_lDeassertReset+0x46>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 80014ec:	4806      	ldr	r0, [pc, #24]	; (8001508 <XMC_CCU4_lDeassertReset+0x5c>)
 80014ee:	f7ff fbfd 	bl	8000cec <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	4000c000 	.word	0x4000c000
 80014fc:	40010000 	.word	0x40010000
 8001500:	40014000 	.word	0x40014000
 8001504:	48004000 	.word	0x48004000
 8001508:	10000001 	.word	0x10000001

0800150c <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8001514:	2010      	movs	r0, #16
 8001516:	f7ff fd5d 	bl	8000fd4 <XMC_SCU_CLOCK_EnableClock>
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f7ff ffc6 	bl	80014ac <XMC_CCU4_lDeassertReset>
#endif
}
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop

08001528 <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	460b      	mov	r3, r1
 8001532:	70fb      	strb	r3, [r7, #3]

  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f7ff ffe9 	bl	800150c <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f7ff ffa8 	bl	8001490 <XMC_CCU4_StartPrescaler>

  gctrl = module->GCTRL;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800154c:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 800154e:	78fb      	ldrb	r3, [r7, #3]
 8001550:	039b      	lsls	r3, r3, #14
 8001552:	68fa      	ldr	r2, [r7, #12]
 8001554:	4313      	orrs	r3, r2
 8001556:	60fb      	str	r3, [r7, #12]

  module->GCTRL = gctrl;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	68fa      	ldr	r2, [r7, #12]
 800155c:	601a      	str	r2, [r3, #0]
}
 800155e:	3710      	adds	r7, #16
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <XMC_GPIO_SetMode>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	460b      	mov	r3, r1
 800156e:	70fb      	strb	r3, [r7, #3]
 8001570:	4613      	mov	r3, r2
 8001572:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
 8001574:	78fb      	ldrb	r3, [r7, #3]
 8001576:	089b      	lsrs	r3, r3, #2
 8001578:	b2db      	uxtb	r3, r3
 800157a:	4618      	mov	r0, r3
 800157c:	78fb      	ldrb	r3, [r7, #3]
 800157e:	089b      	lsrs	r3, r3, #2
 8001580:	b2db      	uxtb	r3, r3
 8001582:	461a      	mov	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	3204      	adds	r2, #4
 8001588:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800158c:	78fb      	ldrb	r3, [r7, #3]
 800158e:	f003 0303 	and.w	r3, r3, #3
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	4619      	mov	r1, r3
 8001596:	23f8      	movs	r3, #248	; 0xf8
 8001598:	408b      	lsls	r3, r1
 800159a:	43db      	mvns	r3, r3
 800159c:	ea02 0103 	and.w	r1, r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	1d02      	adds	r2, r0, #4
 80015a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 80015a8:	78fb      	ldrb	r3, [r7, #3]
 80015aa:	089b      	lsrs	r3, r3, #2
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	4618      	mov	r0, r3
 80015b0:	78fb      	ldrb	r3, [r7, #3]
 80015b2:	089b      	lsrs	r3, r3, #2
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	461a      	mov	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	3204      	adds	r2, #4
 80015bc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80015c0:	78bb      	ldrb	r3, [r7, #2]
 80015c2:	78f9      	ldrb	r1, [r7, #3]
 80015c4:	f001 0103 	and.w	r1, r1, #3
 80015c8:	00c9      	lsls	r1, r1, #3
 80015ca:	408b      	lsls	r3, r1
 80015cc:	ea42 0103 	orr.w	r1, r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	1d02      	adds	r2, r0, #4
 80015d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop

080015e4 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80015f6:	b2db      	uxtb	r3, r3
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <XMC_I2C_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	431a      	orrs	r2, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <XMC_I2C_CH_InitEx>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/
/* Initializes the USIC channel by setting the data format, slave address, baudrate, transfer buffer */
void XMC_I2C_CH_InitEx(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_CONFIG_t *const config, bool init_brg)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	4613      	mov	r3, r2
 8001630:	71fb      	strb	r3, [r7, #7]
  XMC_USIC_CH_Enable(channel);
 8001632:	68f8      	ldr	r0, [r7, #12]
 8001634:	f000 f9a2 	bl	800197c <XMC_USIC_CH_Enable>

  /* Data format configuration */
  channel->SCTR = ((uint32_t)TRANSMISSION_MODE << (uint32_t)USIC_CH_SCTR_TRM_Pos) | /* Transmision mode */
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	4a11      	ldr	r2, [pc, #68]	; (8001680 <XMC_I2C_CH_InitEx+0x5c>)
 800163c:	635a      	str	r2, [r3, #52]	; 0x34
                  ((uint32_t)WORDLENGTH << (uint32_t)USIC_CH_SCTR_WLE_Pos) | /* 8 data bits */
                  USIC_CH_SCTR_FLE_Msk |           /* unlimited data flow */
                  USIC_CH_SCTR_SDIR_Msk |          /* MSB shifted first */
                  USIC_CH_SCTR_PDL_Msk;            /* Passive Data Level */

  XMC_I2C_CH_SetSlaveAddress(channel, config->address);
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	88db      	ldrh	r3, [r3, #6]
 8001642:	68f8      	ldr	r0, [r7, #12]
 8001644:	4619      	mov	r1, r3
 8001646:	f000 f81d 	bl	8001684 <XMC_I2C_CH_SetSlaveAddress>

  if (init_brg)
 800164a:	79fb      	ldrb	r3, [r7, #7]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d008      	beq.n	8001662 <XMC_I2C_CH_InitEx+0x3e>
  {
    (void)XMC_I2C_CH_SetBaudrateEx(channel, config->baudrate, config->normal_divider_mode);
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	791b      	ldrb	r3, [r3, #4]
 8001658:	68f8      	ldr	r0, [r7, #12]
 800165a:	4611      	mov	r1, r2
 800165c:	461a      	mov	r2, r3
 800165e:	f000 f83b 	bl	80016d8 <XMC_I2C_CH_SetBaudrateEx>
  }


  /* Enable transfer buffer */
  channel->TCSR = ((uint32_t)SET_TDV << (uint32_t)USIC_CH_TCSR_TDEN_Pos) | USIC_CH_TCSR_TDSSM_Msk;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8001668:	639a      	str	r2, [r3, #56]	; 0x38

  /* Clear status flags */
  channel->PSCR = 0xFFFFFFFFU;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	f04f 32ff 	mov.w	r2, #4294967295
 8001670:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Disable parity generation */
  channel->CCR = 0x0U;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2200      	movs	r2, #0
 8001676:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	073f0303 	.word	0x073f0303

08001684 <XMC_I2C_CH_SetSlaveAddress>:

/* Sets the slave address */
void XMC_I2C_CH_SetSlaveAddress(XMC_USIC_CH_t *const channel, const uint16_t address)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	460b      	mov	r3, r1
 800168e:	807b      	strh	r3, [r7, #2]
  if ((address & XMC_I2C_10BIT_ADDR_MASK) == XMC_I2C_10BIT_ADDR_GROUP)
 8001690:	887b      	ldrh	r3, [r7, #2]
 8001692:	f403 43f8 	and.w	r3, r3, #31744	; 0x7c00
 8001696:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 800169a:	d10e      	bne.n	80016ba <XMC_I2C_CH_SetSlaveAddress+0x36>
  {
    channel->PCR_IICMode = (channel->PCR_IICMode & (uint32_t)~USIC_CH_PCR_IICMode_SLAD_Msk) |
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016a0:	0c1b      	lsrs	r3, r3, #16
 80016a2:	041b      	lsls	r3, r3, #16
 80016a4:	887a      	ldrh	r2, [r7, #2]
 80016a6:	b2d2      	uxtb	r2, r2
 80016a8:	431a      	orrs	r2, r3
                           (address & 0x00ffU) | ((address << 1) & 0xfe00U);
 80016aa:	887b      	ldrh	r3, [r7, #2]
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	f403 437e 	and.w	r3, r3, #65024	; 0xfe00
 80016b2:	431a      	orrs	r2, r3
/* Sets the slave address */
void XMC_I2C_CH_SetSlaveAddress(XMC_USIC_CH_t *const channel, const uint16_t address)
{
  if ((address & XMC_I2C_10BIT_ADDR_MASK) == XMC_I2C_10BIT_ADDR_GROUP)
  {
    channel->PCR_IICMode = (channel->PCR_IICMode & (uint32_t)~USIC_CH_PCR_IICMode_SLAD_Msk) |
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	63da      	str	r2, [r3, #60]	; 0x3c
 80016b8:	e008      	b.n	80016cc <XMC_I2C_CH_SetSlaveAddress+0x48>
                           (address & 0x00ffU) | ((address << 1) & 0xfe00U);
  }
  else
  {
    channel->PCR_IICMode = (channel->PCR_IICMode & (uint32_t)~USIC_CH_PCR_IICMode_SLAD_Msk) |
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016be:	0c1b      	lsrs	r3, r3, #16
 80016c0:	041b      	lsls	r3, r3, #16
                           ((uint32_t)address) << XMC_I2C_7BIT_ADDR_Pos;
 80016c2:	887a      	ldrh	r2, [r7, #2]
 80016c4:	0212      	lsls	r2, r2, #8
    channel->PCR_IICMode = (channel->PCR_IICMode & (uint32_t)~USIC_CH_PCR_IICMode_SLAD_Msk) |
                           (address & 0x00ffU) | ((address << 1) & 0xfe00U);
  }
  else
  {
    channel->PCR_IICMode = (channel->PCR_IICMode & (uint32_t)~USIC_CH_PCR_IICMode_SLAD_Msk) |
 80016c6:	431a      	orrs	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	63da      	str	r2, [r3, #60]	; 0x3c
                           ((uint32_t)address) << XMC_I2C_7BIT_ADDR_Pos;
  }
}
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop

080016d8 <XMC_I2C_CH_SetBaudrateEx>:
  return status;
}

/* Sets the baudrate and oversampling based on standard speed or fast speed */
XMC_I2C_CH_STATUS_t XMC_I2C_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, uint32_t rate, bool normal_divider_mode)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	4613      	mov	r3, r2
 80016e4:	71fb      	strb	r3, [r7, #7]
  XMC_USIC_CH_STATUS_t status;

  if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_STANDARD)
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	4a20      	ldr	r2, [pc, #128]	; (800176c <XMC_I2C_CH_SetBaudrateEx+0x94>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d819      	bhi.n	8001722 <XMC_I2C_CH_SetBaudrateEx+0x4a>
  {
    channel->PCR_IICMode &= (uint32_t)~USIC_CH_PCR_IICMode_STIM_Msk;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	63da      	str	r2, [r3, #60]	; 0x3c
    if (normal_divider_mode)
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d008      	beq.n	8001712 <XMC_I2C_CH_SetBaudrateEx+0x3a>
    {
      status = XMC_USIC_CH_SetBaudrateEx(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD);
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	68f8      	ldr	r0, [r7, #12]
 8001704:	4619      	mov	r1, r3
 8001706:	220a      	movs	r2, #10
 8001708:	f000 f9f6 	bl	8001af8 <XMC_USIC_CH_SetBaudrateEx>
 800170c:	4603      	mov	r3, r0
 800170e:	75fb      	strb	r3, [r7, #23]
 8001710:	e027      	b.n	8001762 <XMC_I2C_CH_SetBaudrateEx+0x8a>
    }
    else
    {
      /* Fractional divider mode */
      status = XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD);
 8001712:	68f8      	ldr	r0, [r7, #12]
 8001714:	68b9      	ldr	r1, [r7, #8]
 8001716:	220a      	movs	r2, #10
 8001718:	f000 f97c 	bl	8001a14 <XMC_USIC_CH_SetBaudrate>
 800171c:	4603      	mov	r3, r0
 800171e:	75fb      	strb	r3, [r7, #23]
 8001720:	e01f      	b.n	8001762 <XMC_I2C_CH_SetBaudrateEx+0x8a>
    }
  }
  else if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_FAST)
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	4a12      	ldr	r2, [pc, #72]	; (8001770 <XMC_I2C_CH_SetBaudrateEx+0x98>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d819      	bhi.n	800175e <XMC_I2C_CH_SetBaudrateEx+0x86>
  {
    channel->PCR_IICMode |= (uint32_t)USIC_CH_PCR_IICMode_STIM_Msk;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800172e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	63da      	str	r2, [r3, #60]	; 0x3c
    if (normal_divider_mode)
 8001736:	79fb      	ldrb	r3, [r7, #7]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d008      	beq.n	800174e <XMC_I2C_CH_SetBaudrateEx+0x76>
    {
      status = XMC_USIC_CH_SetBaudrateEx(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST);
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	68f8      	ldr	r0, [r7, #12]
 8001740:	4619      	mov	r1, r3
 8001742:	2219      	movs	r2, #25
 8001744:	f000 f9d8 	bl	8001af8 <XMC_USIC_CH_SetBaudrateEx>
 8001748:	4603      	mov	r3, r0
 800174a:	75fb      	strb	r3, [r7, #23]
 800174c:	e009      	b.n	8001762 <XMC_I2C_CH_SetBaudrateEx+0x8a>
    }
    else
    {
      /* Fractional divider mode */
      status = XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST);
 800174e:	68f8      	ldr	r0, [r7, #12]
 8001750:	68b9      	ldr	r1, [r7, #8]
 8001752:	2219      	movs	r2, #25
 8001754:	f000 f95e 	bl	8001a14 <XMC_USIC_CH_SetBaudrate>
 8001758:	4603      	mov	r3, r0
 800175a:	75fb      	strb	r3, [r7, #23]
 800175c:	e001      	b.n	8001762 <XMC_I2C_CH_SetBaudrateEx+0x8a>
    }
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	75fb      	strb	r3, [r7, #23]
  }

  return (XMC_I2C_CH_STATUS_t)status;
 8001762:	7dfb      	ldrb	r3, [r7, #23]
}
 8001764:	4618      	mov	r0, r3
 8001766:	3718      	adds	r7, #24
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	000186a0 	.word	0x000186a0
 8001770:	00061a80 	.word	0x00061a80

08001774 <XMC_I2C_CH_MasterStart>:

/* Sends master start condition along with read/write command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	460b      	mov	r3, r1
 800177e:	807b      	strh	r3, [r7, #2]
 8001780:	4613      	mov	r3, r2
 8001782:	707b      	strb	r3, [r7, #1]
  uint32_t temp;

  temp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_START;
 8001784:	887b      	ldrh	r3, [r7, #2]
 8001786:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800178a:	b29b      	uxth	r3, r3
 800178c:	60fb      	str	r3, [r7, #12]
  if (command == XMC_I2C_CH_CMD_READ)
 800178e:	787b      	ldrb	r3, [r7, #1]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d103      	bne.n	800179c <XMC_I2C_CH_MasterStart+0x28>
  {
    temp |= 0x1U;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f043 0301 	orr.w	r3, r3, #1
 800179a:	60fb      	str	r3, [r7, #12]
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80017a2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d110      	bne.n	80017cc <XMC_I2C_CH_MasterStart+0x58>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 80017aa:	bf00      	nop
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff ff19 	bl	80015e4 <XMC_USIC_CH_GetTransmitBufferStatus>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b80      	cmp	r3, #128	; 0x80
 80017b6:	d0f9      	beq.n	80017ac <XMC_I2C_CH_MasterStart+0x38>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017be:	f7ff ff21 	bl	8001604 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = temp;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	68fa      	ldr	r2, [r7, #12]
 80017c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80017ca:	e003      	b.n	80017d4 <XMC_I2C_CH_MasterStart+0x60>
  }
  else
  {
    channel->IN[0U] = temp;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	68fa      	ldr	r2, [r7, #12]
 80017d0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop

080017dc <XMC_I2C_CH_MasterStop>:
  }
}

/* Sends master stop command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStop(XMC_USIC_CH_t *const channel)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80017ea:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d111      	bne.n	8001816 <XMC_I2C_CH_MasterStop+0x3a>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 80017f2:	bf00      	nop
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f7ff fef5 	bl	80015e4 <XMC_USIC_CH_GetTransmitBufferStatus>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b80      	cmp	r3, #128	; 0x80
 80017fe:	d0f9      	beq.n	80017f4 <XMC_I2C_CH_MasterStop+0x18>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001806:	f7ff fefd 	bl	8001604 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001810:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001814:	e004      	b.n	8001820 <XMC_I2C_CH_MasterStop+0x44>
  }
  else
  {
    channel->IN[0U] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800181c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop

08001828 <XMC_I2C_CH_MasterTransmit>:

/* Sends master send command along with data to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterTransmit(XMC_USIC_CH_t *const channel, const uint8_t data)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	460b      	mov	r3, r1
 8001832:	70fb      	strb	r3, [r7, #3]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800183a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d110      	bne.n	8001864 <XMC_I2C_CH_MasterTransmit+0x3c>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8001842:	bf00      	nop
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f7ff fecd 	bl	80015e4 <XMC_USIC_CH_GetTransmitBufferStatus>
 800184a:	4603      	mov	r3, r0
 800184c:	2b80      	cmp	r3, #128	; 0x80
 800184e:	d0f9      	beq.n	8001844 <XMC_I2C_CH_MasterTransmit+0x1c>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001856:	f7ff fed5 	bl	8001604 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 800185a:	78fa      	ldrb	r2, [r7, #3]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001862:	e003      	b.n	800186c <XMC_I2C_CH_MasterTransmit+0x44>
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 8001864:	78fa      	ldrb	r2, [r7, #3]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop

08001874 <XMC_I2C_CH_MasterReceiveAck>:
  }
}

/* Sends master receive ack command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterReceiveAck(XMC_USIC_CH_t *const channel)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001882:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d111      	bne.n	80018ae <XMC_I2C_CH_MasterReceiveAck+0x3a>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 800188a:	bf00      	nop
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f7ff fea9 	bl	80015e4 <XMC_USIC_CH_GetTransmitBufferStatus>
 8001892:	4603      	mov	r3, r0
 8001894:	2b80      	cmp	r3, #128	; 0x80
 8001896:	d0f9      	beq.n	800188c <XMC_I2C_CH_MasterReceiveAck+0x18>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800189e:	f7ff feb1 	bl	8001604 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80018ac:	e004      	b.n	80018b8 <XMC_I2C_CH_MasterReceiveAck+0x44>
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018b4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop

080018c0 <XMC_I2C_CH_MasterReceiveNack>:

/* Sends master receive nack command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterReceiveNack(XMC_USIC_CH_t *const channel)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80018ce:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d111      	bne.n	80018fa <XMC_I2C_CH_MasterReceiveNack+0x3a>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 80018d6:	bf00      	nop
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f7ff fe83 	bl	80015e4 <XMC_USIC_CH_GetTransmitBufferStatus>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b80      	cmp	r3, #128	; 0x80
 80018e2:	d0f9      	beq.n	80018d8 <XMC_I2C_CH_MasterReceiveNack+0x18>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018ea:	f7ff fe8b 	bl	8001604 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f44f 7240 	mov.w	r2, #768	; 0x300
 80018f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80018f8:	e004      	b.n	8001904 <XMC_I2C_CH_MasterReceiveNack+0x44>
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001900:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop

0800190c <XMC_I2C_CH_GetReceivedData>:

/* Reads the data from RBUF if FIFO size is 0 otherwise from OUTR. */
uint8_t XMC_I2C_CH_GetReceivedData(const XMC_USIC_CH_t *const channel)
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  uint8_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800191a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d103      	bne.n	800192a <XMC_I2C_CH_GetReceivedData+0x1e>
  {
    retval = (uint8_t)channel->RBUF;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001926:	73fb      	strb	r3, [r7, #15]
 8001928:	e003      	b.n	8001932 <XMC_I2C_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint8_t)channel->OUTR;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8001930:	73fb      	strb	r3, [r7, #15]
  }

  return retval;
 8001932:	7bfb      	ldrb	r3, [r7, #15]
}
 8001934:	4618      	mov	r0, r3
 8001936:	3714      	adds	r7, #20
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <XMC_I2C_CH_DisableEvent>:
  channel->CCR |= (event & 0x1fc00U);
  channel->PCR_IICMode |= ((event) & 0x41fc0000U);
}

void XMC_I2C_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  channel->CCR &= (uint32_t)~(event & 0x1fc00U);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	f403 33fe 	and.w	r3, r3, #130048	; 0x1fc00
 8001954:	43db      	mvns	r3, r3
 8001956:	401a      	ands	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	641a      	str	r2, [r3, #64]	; 0x40
  channel->PCR_IICMode &= (uint32_t)~((event) & 0x41fc0000U);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001960:	6839      	ldr	r1, [r7, #0]
 8001962:	4b05      	ldr	r3, [pc, #20]	; (8001978 <XMC_I2C_CH_DisableEvent+0x38>)
 8001964:	400b      	ands	r3, r1
 8001966:	43db      	mvns	r3, r3
 8001968:	401a      	ands	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	41fc0000 	.word	0x41fc0000

0800197c <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a1a      	ldr	r2, [pc, #104]	; (80019f0 <XMC_USIC_CH_Enable+0x74>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d003      	beq.n	8001994 <XMC_USIC_CH_Enable+0x18>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a19      	ldr	r2, [pc, #100]	; (80019f4 <XMC_USIC_CH_Enable+0x78>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d103      	bne.n	800199c <XMC_USIC_CH_Enable+0x20>
  {
    XMC_USIC_Enable(XMC_USIC0);
 8001994:	4818      	ldr	r0, [pc, #96]	; (80019f8 <XMC_USIC_CH_Enable+0x7c>)
 8001996:	f000 f9f1 	bl	8001d7c <XMC_USIC_Enable>
 800199a:	e016      	b.n	80019ca <XMC_USIC_CH_Enable+0x4e>
  }
#if defined(USIC1)
  else if ((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4a17      	ldr	r2, [pc, #92]	; (80019fc <XMC_USIC_CH_Enable+0x80>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d003      	beq.n	80019ac <XMC_USIC_CH_Enable+0x30>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a16      	ldr	r2, [pc, #88]	; (8001a00 <XMC_USIC_CH_Enable+0x84>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d103      	bne.n	80019b4 <XMC_USIC_CH_Enable+0x38>
  {
    XMC_USIC_Enable(XMC_USIC1);
 80019ac:	4815      	ldr	r0, [pc, #84]	; (8001a04 <XMC_USIC_CH_Enable+0x88>)
 80019ae:	f000 f9e5 	bl	8001d7c <XMC_USIC_Enable>
 80019b2:	e00a      	b.n	80019ca <XMC_USIC_CH_Enable+0x4e>
  }
#endif
#if defined(USIC2)
  else if ((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1))
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4a14      	ldr	r2, [pc, #80]	; (8001a08 <XMC_USIC_CH_Enable+0x8c>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d003      	beq.n	80019c4 <XMC_USIC_CH_Enable+0x48>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	4a13      	ldr	r2, [pc, #76]	; (8001a0c <XMC_USIC_CH_Enable+0x90>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d102      	bne.n	80019ca <XMC_USIC_CH_Enable+0x4e>
  {
    XMC_USIC_Enable(XMC_USIC2);
 80019c4:	4812      	ldr	r0, [pc, #72]	; (8001a10 <XMC_USIC_CH_Enable+0x94>)
 80019c6:	f000 f9d9 	bl	8001d7c <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2203      	movs	r2, #3
 80019ce:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 80019d0:	bf00      	nop
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d0f9      	beq.n	80019d2 <XMC_USIC_CH_Enable+0x56>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e2:	f023 020f 	bic.w	r2, r3, #15
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	641a      	str	r2, [r3, #64]	; 0x40
}
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40030000 	.word	0x40030000
 80019f4:	40030200 	.word	0x40030200
 80019f8:	40030008 	.word	0x40030008
 80019fc:	48020000 	.word	0x48020000
 8001a00:	48020200 	.word	0x48020200
 8001a04:	48020008 	.word	0x48020008
 8001a08:	48024000 	.word	0x48024000
 8001a0c:	48024200 	.word	0x48024200
 8001a10:	48024008 	.word	0x48024008

08001a14 <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b08e      	sub	sp, #56	; 0x38
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]

  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	2b63      	cmp	r3, #99	; 0x63
 8001a24:	d95a      	bls.n	8001adc <XMC_USIC_CH_SetBaudrate+0xc8>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d057      	beq.n	8001adc <XMC_USIC_CH_SetBaudrate+0xc8>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 8001a2c:	f7ff f99e 	bl	8000d6c <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8001a30:	4602      	mov	r2, r0
 8001a32:	4b2f      	ldr	r3, [pc, #188]	; (8001af0 <XMC_USIC_CH_SetBaudrate+0xdc>)
 8001a34:	fba3 2302 	umull	r2, r3, r3, r2
 8001a38:	095b      	lsrs	r3, r3, #5
 8001a3a:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	4a2c      	ldr	r2, [pc, #176]	; (8001af0 <XMC_USIC_CH_SetBaudrate+0xdc>)
 8001a40:	fba2 2303 	umull	r2, r3, r2, r3
 8001a44:	095b      	lsrs	r3, r3, #5
 8001a46:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1024U;
 8001a48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
 8001a52:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8001a56:	627b      	str	r3, [r7, #36]	; 0x24

    for (clock_divider = 1024U; clock_divider > 0U; --clock_divider)
 8001a58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a5c:	633b      	str	r3, [r7, #48]	; 0x30
 8001a5e:	e022      	b.n	8001aa6 <XMC_USIC_CH_SetBaudrate+0x92>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 8001a60:	6a3b      	ldr	r3, [r7, #32]
 8001a62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a64:	fb02 f203 	mul.w	r2, r2, r3
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	6879      	ldr	r1, [r7, #4]
 8001a6c:	fb01 f303 	mul.w	r3, r1, r3
 8001a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a74:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	0a9b      	lsrs	r3, r3, #10
 8001a7a:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a82:	617b      	str	r3, [r7, #20]

      if ((pdiv_int <= 1024U) && (pdiv_frac < pdiv_frac_min))
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a8a:	d809      	bhi.n	8001aa0 <XMC_USIC_CH_SetBaudrate+0x8c>
 8001a8c:	697a      	ldr	r2, [r7, #20]
 8001a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d205      	bcs.n	8001aa0 <XMC_USIC_CH_SetBaudrate+0x8c>
      {
        pdiv_frac_min = pdiv_frac;
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
 8001a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a9e:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1024U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for (clock_divider = 1024U; clock_divider > 0U; --clock_divider)
 8001aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	633b      	str	r3, [r7, #48]	; 0x30
 8001aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1d9      	bne.n	8001a60 <XMC_USIC_CH_SetBaudrate+0x4c>
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);
 8001aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aae:	3b01      	subs	r3, #1
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 8001ab0:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	611a      	str	r2, [r3, #16]
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	695a      	ldr	r2, [r3, #20]
 8001abc:	4b0d      	ldr	r3, [pc, #52]	; (8001af4 <XMC_USIC_CH_SetBaudrate+0xe0>)
 8001abe:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	3a01      	subs	r2, #1
 8001ac4:	0292      	lsls	r2, r2, #10
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 8001ac6:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
 8001ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aca:	3b01      	subs	r3, #1
 8001acc:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8001ace:	431a      	orrs	r2, r3
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);

    status = XMC_USIC_CH_STATUS_OK;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001ada:	e002      	b.n	8001ae2 <XMC_USIC_CH_SetBaudrate+0xce>
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  return status;
 8001ae2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3738      	adds	r7, #56	; 0x38
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	51eb851f 	.word	0x51eb851f
 8001af4:	fc0080ef 	.word	0xfc0080ef

08001af8 <XMC_USIC_CH_SetBaudrateEx>:

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, int32_t rate, int32_t oversampling)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b08c      	sub	sp, #48	; 0x30
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
  int32_t peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 8001b04:	f7ff f932 	bl	8000d6c <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	623b      	str	r3, [r7, #32]
  int32_t brg_clock = rate * oversampling;
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	fb02 f303 	mul.w	r3, r2, r3
 8001b14:	61fb      	str	r3, [r7, #28]
  int32_t actual_rate_upper;
  int32_t actual_rate_lower;
  uint32_t pdiv = 1;
 8001b16:	2301      	movs	r3, #1
 8001b18:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t divider_step;
  XMC_USIC_CH_STATUS_t status;

  if (peripheral_clock > brg_clock)
 8001b1a:	6a3a      	ldr	r2, [r7, #32]
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	dd5f      	ble.n	8001be2 <XMC_USIC_CH_SetBaudrateEx+0xea>
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
 8001b22:	6a3a      	ldr	r2, [r7, #32]
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b2a:	62bb      	str	r3, [r7, #40]	; 0x28
    while (divider_step >= 1023)
 8001b2c:	e010      	b.n	8001b50 <XMC_USIC_CH_SetBaudrateEx+0x58>
    {
      pdiv++;
 8001b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b30:	3301      	adds	r3, #1
 8001b32:	62fb      	str	r3, [r7, #44]	; 0x2c
      brg_clock = rate * oversampling * pdiv;
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	fb02 f303 	mul.w	r3, r2, r3
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b40:	fb03 f302 	mul.w	r3, r3, r2
 8001b44:	61fb      	str	r3, [r7, #28]
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
 8001b46:	6a3a      	ldr	r2, [r7, #32]
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b4e:	62bb      	str	r3, [r7, #40]	; 0x28
  XMC_USIC_CH_STATUS_t status;

  if (peripheral_clock > brg_clock)
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    while (divider_step >= 1023)
 8001b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b52:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d8e9      	bhi.n	8001b2e <XMC_USIC_CH_SetBaudrateEx+0x36>
    {
      pdiv++;
      brg_clock = rate * oversampling * pdiv;
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    }
    actual_rate_upper = peripheral_clock / (divider_step * oversampling * pdiv);
 8001b5a:	6a3a      	ldr	r2, [r7, #32]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b60:	fb01 f303 	mul.w	r3, r1, r3
 8001b64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001b66:	fb01 f303 	mul.w	r3, r1, r3
 8001b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b6e:	61bb      	str	r3, [r7, #24]
    actual_rate_lower = peripheral_clock / ((divider_step + 1) * oversampling * pdiv);
 8001b70:	6a3a      	ldr	r2, [r7, #32]
 8001b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b74:	3301      	adds	r3, #1
 8001b76:	6879      	ldr	r1, [r7, #4]
 8001b78:	fb01 f303 	mul.w	r3, r1, r3
 8001b7c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001b7e:	fb01 f303 	mul.w	r3, r1, r3
 8001b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b86:	617b      	str	r3, [r7, #20]

    // choose better approximation if the peripheral frequency is not a multiple of the baudrate
    if (abs(rate - actual_rate_lower) < abs(rate - actual_rate_upper))
 8001b88:	68ba      	ldr	r2, [r7, #8]
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001b92:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001b96:	68b9      	ldr	r1, [r7, #8]
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	1acb      	subs	r3, r1, r3
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	bfb8      	it	lt
 8001ba0:	425b      	neglt	r3, r3
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	da02      	bge.n	8001bac <XMC_USIC_CH_SetBaudrateEx+0xb4>
    {
      divider_step += 1;
 8001ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ba8:	3301      	adds	r3, #1
 8001baa:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    divider_step = 1024 - divider_step;
 8001bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bae:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8001bb2:	62bb      	str	r3, [r7, #40]	; 0x28


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
 8001bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bb6:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	611a      	str	r2, [r3, #16]
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	695a      	ldr	r2, [r3, #20]
 8001bc2:	4b0c      	ldr	r3, [pc, #48]	; (8001bf4 <XMC_USIC_CH_SetBaudrateEx+0xfc>)
 8001bc4:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	3a01      	subs	r2, #1
 8001bca:	0292      	lsls	r2, r2, #10
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 8001bcc:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv - 1) << USIC_CH_BRG_PDIV_Pos);
 8001bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8001bd4:	431a      	orrs	r2, r3


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv - 1) << USIC_CH_BRG_PDIV_Pos);

    status = XMC_USIC_CH_STATUS_OK;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001be0:	e002      	b.n	8001be8 <XMC_USIC_CH_SetBaudrateEx+0xf0>
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return status;
 8001be8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3730      	adds	r7, #48	; 0x30
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	fc0080ef 	.word	0xfc0080ef

08001bf8 <XMC_USIC_CH_TXFIFO_Configure>:

void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	603b      	str	r3, [r7, #0]
 8001c04:	4613      	mov	r3, r2
 8001c06:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001c0e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001c1e:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <XMC_USIC_CH_TXFIFO_Configure+0x4c>)
 8001c20:	4013      	ands	r3, r2
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 8001c22:	683a      	ldr	r2, [r7, #0]
 8001c24:	0211      	lsls	r1, r2, #8
 8001c26:	68ba      	ldr	r2, [r7, #8]
 8001c28:	4311      	orrs	r1, r2
                              (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                              ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
 8001c2a:	79fa      	ldrb	r2, [r7, #7]
 8001c2c:	0612      	lsls	r2, r2, #24
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 8001c2e:	430a      	orrs	r2, r1
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
 8001c30:	431a      	orrs	r2, r3
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
                              (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                              ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
}
 8001c38:	3714      	adds	r7, #20
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	f8ffc0c0 	.word	0xf8ffc0c0

08001c48 <XMC_USIC_CH_RXFIFO_Configure>:

void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	603b      	str	r3, [r7, #0]
 8001c54:	4613      	mov	r3, r2
 8001c56:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001c5e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8001c6e:	4b0a      	ldr	r3, [pc, #40]	; (8001c98 <XMC_USIC_CH_RXFIFO_Configure+0x50>)
 8001c70:	4013      	ands	r3, r2
                               USIC_CH_RBCTR_DPTR_Msk |
                               USIC_CH_RBCTR_LOF_Msk)) |
                              ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
 8001c72:	683a      	ldr	r2, [r7, #0]
 8001c74:	0211      	lsls	r1, r2, #8
 8001c76:	68ba      	ldr	r2, [r7, #8]
 8001c78:	4311      	orrs	r1, r2
                               (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                               ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
 8001c7a:	79fa      	ldrb	r2, [r7, #7]
 8001c7c:	0612      	lsls	r2, r2, #24
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
                               USIC_CH_RBCTR_DPTR_Msk |
                               USIC_CH_RBCTR_LOF_Msk)) |
                              ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                               (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
 8001c7e:	430a      	orrs	r2, r1
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 8001c80:	4313      	orrs	r3, r2
 8001c82:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                               USIC_CH_RBCTR_LOF_Msk)) |
                              ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                               (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                               ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
                               (uint32_t)USIC_CH_RBCTR_LOF_Msk));
}
 8001c8c:	3714      	adds	r7, #20
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	efffc0c0 	.word	0xefffc0c0

08001c9c <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>:
}

void XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_FIFO_SIZE_t size,
    const uint32_t limit)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	607a      	str	r2, [r7, #4]
 8001ca8:	72fb      	strb	r3, [r7, #11]
  XMC_UNUSED_ARG(size);

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001cb0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
                              (limit << USIC_CH_RBCTR_LIMIT_Pos));
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	021b      	lsls	r3, r3, #8
    const XMC_USIC_CH_FIFO_SIZE_t size,
    const uint32_t limit)
{
  XMC_UNUSED_ARG(size);

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 8001cb8:	431a      	orrs	r2, r3
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                              (limit << USIC_CH_RBCTR_LIMIT_Pos));
}
 8001cc0:	3714      	adds	r7, #20
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop

08001ccc <XMC_USIC_CH_SetInterruptNodePointer>:

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	607a      	str	r2, [r7, #4]
 8001cd8:	72fb      	strb	r3, [r7, #11]
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	699a      	ldr	r2, [r3, #24]
 8001cde:	7afb      	ldrb	r3, [r7, #11]
 8001ce0:	2107      	movs	r1, #7
 8001ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	401a      	ands	r2, r3
                             (service_request << (uint32_t)interrupt_node));
 8001cea:	7afb      	ldrb	r3, [r7, #11]
 8001cec:	6879      	ldr	r1, [r7, #4]
 8001cee:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001cf2:	431a      	orrs	r2, r3
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	619a      	str	r2, [r3, #24]
                             (service_request << (uint32_t)interrupt_node));
}
 8001cf8:	3714      	adds	r7, #20
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop

08001d04 <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>:

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	607a      	str	r2, [r7, #4]
 8001d10:	72fb      	strb	r3, [r7, #11]
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001d18:	7afb      	ldrb	r3, [r7, #11]
 8001d1a:	2107      	movs	r1, #7
 8001d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d20:	43db      	mvns	r3, r3
 8001d22:	401a      	ands	r2, r3
                              (service_request << (uint32_t)interrupt_node));
 8001d24:	7afb      	ldrb	r3, [r7, #11]
 8001d26:	6879      	ldr	r1, [r7, #4]
 8001d28:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001d2c:	431a      	orrs	r2, r3
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                              (service_request << (uint32_t)interrupt_node));
}
 8001d34:	3714      	adds	r7, #20
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop

08001d40 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>:

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	460b      	mov	r3, r1
 8001d4a:	607a      	str	r2, [r7, #4]
 8001d4c:	72fb      	strb	r3, [r7, #11]
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8001d54:	7afb      	ldrb	r3, [r7, #11]
 8001d56:	2107      	movs	r1, #7
 8001d58:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	401a      	ands	r2, r3
                              (service_request << (uint32_t)interrupt_node));
 8001d60:	7afb      	ldrb	r3, [r7, #11]
 8001d62:	6879      	ldr	r1, [r7, #4]
 8001d64:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001d68:	431a      	orrs	r2, r3
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                              (service_request << (uint32_t)interrupt_node));
}
 8001d70:	3714      	adds	r7, #20
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop

08001d7c <XMC_USIC_Enable>:

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4a18      	ldr	r2, [pc, #96]	; (8001de8 <XMC_USIC_Enable+0x6c>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d10c      	bne.n	8001da6 <XMC_USIC_Enable+0x2a>
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC0));
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 8001d8c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001d90:	f7fe ffac 	bl	8000cec <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC0));
 8001d94:	bf00      	nop
 8001d96:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001d9a:	f7fe ffc3 	bl	8000d24 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d1f8      	bne.n	8001d96 <XMC_USIC_Enable+0x1a>
 8001da4:	e01c      	b.n	8001de0 <XMC_USIC_Enable+0x64>
#endif
  }
#if defined(USIC1)
  else if (usic == USIC1)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a10      	ldr	r2, [pc, #64]	; (8001dec <XMC_USIC_Enable+0x70>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d10a      	bne.n	8001dc4 <XMC_USIC_Enable+0x48>
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC1));
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 8001dae:	4810      	ldr	r0, [pc, #64]	; (8001df0 <XMC_USIC_Enable+0x74>)
 8001db0:	f7fe ff9c 	bl	8000cec <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC1));
 8001db4:	bf00      	nop
 8001db6:	480e      	ldr	r0, [pc, #56]	; (8001df0 <XMC_USIC_Enable+0x74>)
 8001db8:	f7fe ffb4 	bl	8000d24 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1f9      	bne.n	8001db6 <XMC_USIC_Enable+0x3a>
 8001dc2:	e00d      	b.n	8001de0 <XMC_USIC_Enable+0x64>
#endif
  }
#endif
#if defined(USIC2)
  else if (usic == USIC2)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a0b      	ldr	r2, [pc, #44]	; (8001df4 <XMC_USIC_Enable+0x78>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d109      	bne.n	8001de0 <XMC_USIC_Enable+0x64>
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC2);
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC2));
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC2);
 8001dcc:	480a      	ldr	r0, [pc, #40]	; (8001df8 <XMC_USIC_Enable+0x7c>)
 8001dce:	f7fe ff8d 	bl	8000cec <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC2));
 8001dd2:	bf00      	nop
 8001dd4:	4808      	ldr	r0, [pc, #32]	; (8001df8 <XMC_USIC_Enable+0x7c>)
 8001dd6:	f7fe ffa5 	bl	8000d24 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d1f9      	bne.n	8001dd4 <XMC_USIC_Enable+0x58>
#endif
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40030008 	.word	0x40030008
 8001dec:	48020008 	.word	0x48020008
 8001df0:	10000080 	.word	0x10000080
 8001df4:	48024008 	.word	0x48024008
 8001df8:	10000100 	.word	0x10000100

08001dfc <XMC_VADC_GROUP_ExternalMuxControlInit>:
 * \par<b>Related APIs:</b><BR>
 * None
 */
__STATIC_INLINE void XMC_VADC_GROUP_ExternalMuxControlInit(XMC_VADC_GROUP_t *const group_ptr,
    const XMC_VADC_GROUP_EMUXCFG_t emux_cfg)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
 8001e06:	783b      	ldrb	r3, [r7, #0]
 8001e08:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	461a      	mov	r2, r3
                ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
 8001e10:	78bb      	ldrb	r3, [r7, #2]
 8001e12:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	041b      	lsls	r3, r3, #16
{
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	60fb      	str	r3, [r7, #12]
                ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	68fa      	ldr	r2, [r7, #12]
 8001e22:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 8001e26:	78fb      	ldrb	r3, [r7, #3]
 8001e28:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	071a      	lsls	r2, r3, #28
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos) |
 8001e30:	78fb      	ldrb	r3, [r7, #3]
 8001e32:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	069b      	lsls	r3, r3, #26

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
                ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 8001e3a:	431a      	orrs	r2, r3
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos) |
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);
 8001e3c:	78fb      	ldrb	r3, [r7, #3]
 8001e3e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	075b      	lsls	r3, r3, #29

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
                ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 8001e46:	4313      	orrs	r3, r2
 8001e48:	60fb      	str	r3, [r7, #12]
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);

#if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
  emux_config |= ((uint32_t)emux_cfg.emux_channel_select_style << (uint32_t)VADC_G_EMUXCTR_EMXCSS_Pos);
#endif
  group_ptr->EMUXCTR  |= (emux_config | ((uint32_t)VADC_G_EMUXCTR_EMXWC_Msk)) ;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f8d3 21f0 	ldr.w	r2, [r3, #496]	; 0x1f0
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
}
 8001e5e:	3714      	adds	r7, #20
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <XMC_VADC_GROUP_BackgroundEnableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_BackgroundDisableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_BackgroundEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR |= (uint32_t)VADC_G_ARBPR_ASEN2_Msk;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e76:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop

08001e8c <XMC_VADC_GROUP_BackgroundDisableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_BackgroundEnableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_BackgroundDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN2_Msk);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e9a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop

08001eb0 <XMC_VADC_GLOBAL_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/*API to enable the VADC Module*/
void XMC_VADC_GLOBAL_EnableModule(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  /* Reset the Hardware */
  XMC_SCU_RESET_DeassertPeripheralReset((XMC_SCU_PERIPHERAL_RESET_t)XMC_SCU_PERIPHERAL_RESET_VADC );
 8001eb4:	2001      	movs	r0, #1
 8001eb6:	f7fe ff19 	bl	8000cec <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
}
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <XMC_VADC_GLOBAL_Init>:
}


/* API to initialize global resources */
void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *config)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
#if (UC_SERIES == XMC14)
  XMC_SCU_CLOCK_SetAdcClockSrc(XMC_SCU_CLOCK_ADCCLKSRC_48MHZ);
#endif

  /* Enable the VADC module*/
  XMC_VADC_GLOBAL_EnableModule();
 8001ec6:	f7ff fff3 	bl	8001eb0 <XMC_VADC_GLOBAL_EnableModule>

  global_ptr->CLC = (uint32_t)(config->clc);
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	695a      	ldr	r2, [r3, #20]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	601a      	str	r2, [r3, #0]

  /* Clock configuration */

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  global_ptr->GLOBCFG  = (uint32_t)(config->clock_config.globcfg | (uint32_t)(VADC_GLOBCFG_DIVWC_Msk));
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif

  /* ICLASS-0 configuration */
  global_ptr->GLOBICLASS[0] = (uint32_t)(config->class0.globiclass);
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	689a      	ldr	r2, [r3, #8]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* ICLASS-1 configuration */
  global_ptr->GLOBICLASS[1] = (uint32_t)(config->class1.globiclass);
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	68da      	ldr	r2, [r3, #12]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4


  /*Result generation related configuration */
  global_ptr->GLOBRCR = (uint32_t)(config->globrcr);
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	691a      	ldr	r2, [r3, #16]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280

#if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)

  /* Boundaries */
  global_ptr->GLOBBOUND = (uint32_t)(config->globbound);
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  /* From the Errata sheet of XMC1100 V1.7*/
  XMC_VADC_CONV_ENABLE_FOR_XMC11 = 1U;
#endif

}
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop

08001f10 <XMC_VADC_GLOBAL_InputClassInit>:

/* API to Set the Global IClass registers*/
void XMC_VADC_GLOBAL_InputClassInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CLASS_t config,
                                    const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	603b      	str	r3, [r7, #0]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	71fb      	strb	r3, [r7, #7]
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Conversion Type", ((conv_type) <= XMC_VADC_GROUP_CONV_EMUX))
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong ICLASS set number", (set_num < XMC_VADC_MAX_ICLASS_SET))

#if(XMC_VADC_EMUX_AVAILABLE == 1U)
  if (conv_type == XMC_VADC_GROUP_CONV_STD )
 8001f20:	79fb      	ldrb	r3, [r7, #7]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d109      	bne.n	8001f3a <XMC_VADC_GLOBAL_InputClassInit+0x2a>
  {
#endif
    XMC_UNUSED_ARG(conv_type);
    global_ptr->GLOBICLASS[set_num] = config.globiclass &
 8001f26:	68ba      	ldr	r2, [r7, #8]
 8001f28:	f240 731f 	movw	r3, #1823	; 0x71f
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	6839      	ldr	r1, [r7, #0]
 8001f32:	3128      	adds	r1, #40	; 0x28
 8001f34:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8001f38:	e007      	b.n	8001f4a <XMC_VADC_GLOBAL_InputClassInit+0x3a>
                                      (uint32_t)(VADC_GLOBICLASS_CMS_Msk | VADC_GLOBICLASS_STCS_Msk);
#if(XMC_VADC_EMUX_AVAILABLE == 1U)
  }
  else
  {
    global_ptr->GLOBICLASS[set_num] = config.globiclass & (uint32_t)(VADC_GLOBICLASS_CME_Msk | VADC_GLOBICLASS_STCE_Msk);
 8001f3a:	68ba      	ldr	r2, [r7, #8]
 8001f3c:	4b05      	ldr	r3, [pc, #20]	; (8001f54 <XMC_VADC_GLOBAL_InputClassInit+0x44>)
 8001f3e:	4013      	ands	r3, r2
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	6839      	ldr	r1, [r7, #0]
 8001f44:	3128      	adds	r1, #40	; 0x28
 8001f46:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  }
#endif
}
 8001f4a:	3714      	adds	r7, #20
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	071f0000 	.word	0x071f0000

08001f58 <XMC_VADC_GLOBAL_StartupCalibration>:

/* API to enable startup calibration feature */
void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  VADC_G_TypeDef *group_ptr;
#endif

  XMC_ASSERT("XMC_VADC_GLOBAL_StartupCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f66:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for (i = 0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001f70:	2300      	movs	r3, #0
 8001f72:	73fb      	strb	r3, [r7, #15]
 8001f74:	e017      	b.n	8001fa6 <XMC_VADC_GLOBAL_StartupCalibration+0x4e>
  {
    group_ptr = g_xmc_vadc_group_array[i];
 8001f76:	7bfb      	ldrb	r3, [r7, #15]
 8001f78:	4a0f      	ldr	r2, [pc, #60]	; (8001fb8 <XMC_VADC_GLOBAL_StartupCalibration+0x60>)
 8001f7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f7e:	60bb      	str	r3, [r7, #8]
    if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f86:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d008      	beq.n	8001fa0 <XMC_VADC_GLOBAL_StartupCalibration+0x48>
      while ((group_ptr->ARBCFG & (uint32_t)VADC_G_ARBCFG_CALS_Msk) == 0)
      {
        __NOP();
      }
#endif
      while ((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
 8001f8e:	e000      	b.n	8001f92 <XMC_VADC_GLOBAL_StartupCalibration+0x3a>
      {
        __NOP();
 8001f90:	bf00      	nop
      while ((group_ptr->ARBCFG & (uint32_t)VADC_G_ARBCFG_CALS_Msk) == 0)
      {
        __NOP();
      }
#endif
      while ((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d1f7      	bne.n	8001f90 <XMC_VADC_GLOBAL_StartupCalibration+0x38>

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for (i = 0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001fa0:	7bfb      	ldrb	r3, [r7, #15]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	73fb      	strb	r3, [r7, #15]
 8001fa6:	7bfb      	ldrb	r3, [r7, #15]
 8001fa8:	2b03      	cmp	r3, #3
 8001faa:	d9e4      	bls.n	8001f76 <XMC_VADC_GLOBAL_StartupCalibration+0x1e>
         XMC_VADC_SHS_START_UP_CAL_ACTIVE )
  {
    __NOP();
  }
#endif
}
 8001fac:	3714      	adds	r7, #20
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	08005164 	.word	0x08005164

08001fbc <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode>:
  global_ptr->GLOBEVNP |= (uint32_t)(node << VADC_GLOBEVNP_REV0NP_Pos);
}

/* API to bind request source event with a service request line */
void XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC_VADC_SR_t sr)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	70fb      	strb	r3, [r7, #3]
  uint32_t node;

  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:Wrong Module Pointer", (global_ptr == VADC))

  if (sr >= XMC_VADC_SR_SHARED_SR0)
 8001fc8:	78fb      	ldrb	r3, [r7, #3]
 8001fca:	2b03      	cmp	r3, #3
 8001fcc:	d903      	bls.n	8001fd6 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode+0x1a>
  {
    node = (uint32_t)sr - (uint32_t)XMC_VADC_SR_SHARED_SR0;
 8001fce:	78fb      	ldrb	r3, [r7, #3]
 8001fd0:	3b04      	subs	r3, #4
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	e001      	b.n	8001fda <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode+0x1e>
  }
  else
  {
    node = (uint32_t)sr;
 8001fd6:	78fb      	ldrb	r3, [r7, #3]
 8001fd8:	60fb      	str	r3, [r7, #12]
  }

  global_ptr->GLOBEVNP &= ~((uint32_t)VADC_GLOBEVNP_SEV0NP_Msk);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001fe0:	f023 020f 	bic.w	r2, r3, #15
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
  global_ptr->GLOBEVNP |= (uint32_t) (node << VADC_GLOBEVNP_SEV0NP_Pos);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	431a      	orrs	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 8001ffa:	3714      	adds	r7, #20
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <XMC_VADC_GROUP_Init>:

/* API to initialize an instance of group of VADC hardware */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
void XMC_VADC_GROUP_Init( XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_Init:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  /* Program the input classes */
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_STD, 0U);
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	6859      	ldr	r1, [r3, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	2300      	movs	r3, #0
 8002018:	f000 f828 	bl	800206c <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_EMUX, 0U);
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	6859      	ldr	r1, [r3, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	2300      	movs	r3, #0
 8002026:	f000 f821 	bl	800206c <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_STD, 1U);
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	6899      	ldr	r1, [r3, #8]
 8002030:	2200      	movs	r2, #0
 8002032:	2301      	movs	r3, #1
 8002034:	f000 f81a 	bl	800206c <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_EMUX, 1U);
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	6899      	ldr	r1, [r3, #8]
 800203e:	2201      	movs	r2, #1
 8002040:	2301      	movs	r3, #1
 8002042:	f000 f813 	bl	800206c <XMC_VADC_GROUP_InputClassInit>

  group_ptr->ARBCFG = config->g_arbcfg;
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	691a      	ldr	r2, [r3, #16]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  group_ptr->BOUND = config->g_bound;
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	68da      	ldr	r2, [r3, #12]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  /* External mux configuration */
  XMC_VADC_GROUP_ExternalMuxControlInit(group_ptr, config->emux_config);
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	6819      	ldr	r1, [r3, #0]
 8002060:	f7ff fecc 	bl	8001dfc <XMC_VADC_GROUP_ExternalMuxControlInit>

}
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop

0800206c <XMC_VADC_GROUP_InputClassInit>:

/* API to program conversion characteristics */
void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t config,
                                   const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
 800206c:	b480      	push	{r7}
 800206e:	b08d      	sub	sp, #52	; 0x34
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	603b      	str	r3, [r7, #0]
 8002078:	4613      	mov	r3, r2
 800207a:	71fb      	strb	r3, [r7, #7]

  /*
   * Obtain the mask and position macros of the parameters based on what is being requested - Standard channels vs
   * external mux channels.
   */
  if (XMC_VADC_GROUP_CONV_STD == conv_type)
 800207c:	79fb      	ldrb	r3, [r7, #7]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d113      	bne.n	80020aa <XMC_VADC_GROUP_InputClassInit+0x3e>
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CMS_Pos;
 8002082:	2308      	movs	r3, #8
 8002084:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CMS_Msk;
 8002086:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800208a:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCS_Pos;
 800208c:	2300      	movs	r3, #0
 800208e:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCS_Msk;
 8002090:	231f      	movs	r3, #31
 8002092:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sample_time_std_conv;
 8002094:	7a3b      	ldrb	r3, [r7, #8]
 8002096:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800209a:	b2db      	uxtb	r3, r3
 800209c:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_standard;
 800209e:	7a7b      	ldrb	r3, [r7, #9]
 80020a0:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	76fb      	strb	r3, [r7, #27]
 80020a8:	e013      	b.n	80020d2 <XMC_VADC_GROUP_InputClassInit+0x66>
  }
  else
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CME_Pos;
 80020aa:	2318      	movs	r3, #24
 80020ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CME_Msk;
 80020ae:	f04f 63e0 	mov.w	r3, #117440512	; 0x7000000
 80020b2:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCE_Pos;
 80020b4:	2310      	movs	r3, #16
 80020b6:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCE_Msk;
 80020b8:	f44f 13f8 	mov.w	r3, #2031616	; 0x1f0000
 80020bc:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sampling_phase_emux_channel;
 80020be:	7abb      	ldrb	r3, [r7, #10]
 80020c0:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
 80020c8:	7afb      	ldrb	r3, [r7, #11]
 80020ca:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	76fb      	strb	r3, [r7, #27]
  }

  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	683a      	ldr	r2, [r7, #0]
 80020d6:	3228      	adds	r2, #40	; 0x28
 80020d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020dc:	617b      	str	r3, [r7, #20]

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e0:	43db      	mvns	r3, r3
 80020e2:	697a      	ldr	r2, [r7, #20]
 80020e4:	4013      	ands	r3, r2
 80020e6:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
 80020e8:	7efa      	ldrb	r2, [r7, #27]
 80020ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	697a      	ldr	r2, [r7, #20]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	617b      	str	r3, [r7, #20]
  conv_class &= ~(sample_time_mask);
 80020f6:	6a3b      	ldr	r3, [r7, #32]
 80020f8:	43db      	mvns	r3, r3
 80020fa:	697a      	ldr	r2, [r7, #20]
 80020fc:	4013      	ands	r3, r2
 80020fe:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
 8002100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002102:	69fa      	ldr	r2, [r7, #28]
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	697a      	ldr	r2, [r7, #20]
 800210a:	4313      	orrs	r3, r2
 800210c:	617b      	str	r3, [r7, #20]
  group_ptr->ICLASS[set_num] = conv_class;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	3228      	adds	r2, #40	; 0x28
 8002114:	6979      	ldr	r1, [r7, #20]
 8002116:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800211a:	3734      	adds	r7, #52	; 0x34
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <XMC_VADC_GROUP_SetPowerMode>:

/* API which sets the power mode of analog converter of a VADC group */
void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_t power_mode)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	460b      	mov	r3, r1
 800212e:	70fb      	strb	r3, [r7, #3]
  uint32_t arbcfg;

  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Power Mode", (power_mode <= XMC_VADC_GROUP_POWERMODE_NORMAL))

  arbcfg = group_ptr->ARBCFG;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002136:	60fb      	str	r3, [r7, #12]

  arbcfg &= ~((uint32_t)VADC_G_ARBCFG_ANONC_Msk);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f023 0303 	bic.w	r3, r3, #3
 800213e:	60fb      	str	r3, [r7, #12]
  arbcfg |= (uint32_t)power_mode;
 8002140:	78fb      	ldrb	r3, [r7, #3]
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	4313      	orrs	r3, r2
 8002146:	60fb      	str	r3, [r7, #12]

  group_ptr->ARBCFG = arbcfg;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8002150:	3714      	adds	r7, #20
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop

0800215c <XMC_VADC_GLOBAL_BackgroundInit>:
}
#endif

/* API to initialize background scan request source hardware */
void XMC_VADC_GLOBAL_BackgroundInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_BACKGROUND_CONFIG_t *config)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b086      	sub	sp, #24
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
#endif

  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundInit:Wrong Module Pointer", (global_ptr == VADC))

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for (i = (uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8002166:	2300      	movs	r3, #0
 8002168:	75fb      	strb	r3, [r7, #23]
 800216a:	e009      	b.n	8002180 <XMC_VADC_GLOBAL_BackgroundInit+0x24>
  {
    XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 800216c:	7dfb      	ldrb	r3, [r7, #23]
 800216e:	4a39      	ldr	r2, [pc, #228]	; (8002254 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8002170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff fe89 	bl	8001e8c <XMC_VADC_GROUP_BackgroundDisableArbitrationSlot>
#endif

  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundInit:Wrong Module Pointer", (global_ptr == VADC))

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for (i = (uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 800217a:	7dfb      	ldrb	r3, [r7, #23]
 800217c:	3301      	adds	r3, #1
 800217e:	75fb      	strb	r3, [r7, #23]
 8002180:	7dfb      	ldrb	r3, [r7, #23]
 8002182:	2b03      	cmp	r3, #3
 8002184:	d9f2      	bls.n	800216c <XMC_VADC_GLOBAL_BackgroundInit+0x10>
  {
    XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
  }

  conv_start_mask = (uint32_t) 0;
 8002186:	2300      	movs	r3, #0
 8002188:	613b      	str	r3, [r7, #16]
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	f003 0303 	and.w	r3, r3, #3
 8002192:	b2db      	uxtb	r3, r3
 8002194:	2b00      	cmp	r3, #0
 8002196:	d002      	beq.n	800219e <XMC_VADC_GLOBAL_BackgroundInit+0x42>
  {
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
 8002198:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800219c:	613b      	str	r3, [r7, #16]
  }

  for (i = 0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 800219e:	2300      	movs	r3, #0
 80021a0:	75fb      	strb	r3, [r7, #23]
 80021a2:	e021      	b.n	80021e8 <XMC_VADC_GLOBAL_BackgroundInit+0x8c>
  {
    reg = g_xmc_vadc_group_array[i]->ARBPR;
 80021a4:	7dfb      	ldrb	r3, [r7, #23]
 80021a6:	4a2b      	ldr	r2, [pc, #172]	; (8002254 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 80021a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021b0:	60fb      	str	r3, [r7, #12]

    reg &= ~(uint32_t)(VADC_G_ARBPR_PRIO2_Msk);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021b8:	60fb      	str	r3, [r7, #12]

    /* Program the priority of the request source */
    reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO2_Pos);
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	021b      	lsls	r3, r3, #8
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	60fb      	str	r3, [r7, #12]

    /* Program the start mode */
    reg |= conv_start_mask;
 80021cc:	68fa      	ldr	r2, [r7, #12]
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	60fb      	str	r3, [r7, #12]

    g_xmc_vadc_group_array[i]->ARBPR = reg;
 80021d4:	7dfb      	ldrb	r3, [r7, #23]
 80021d6:	4a1f      	ldr	r2, [pc, #124]	; (8002254 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 80021d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021dc:	68fa      	ldr	r2, [r7, #12]
 80021de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
  {
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
  }

  for (i = 0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 80021e2:	7dfb      	ldrb	r3, [r7, #23]
 80021e4:	3301      	adds	r3, #1
 80021e6:	75fb      	strb	r3, [r7, #23]
 80021e8:	7dfb      	ldrb	r3, [r7, #23]
 80021ea:	2b03      	cmp	r3, #3
 80021ec:	d9da      	bls.n	80021a4 <XMC_VADC_GLOBAL_BackgroundInit+0x48>

  }
#endif

  /* program BRSCTRL register */
  global_ptr->BRSCTRL = (uint32_t)(config->asctrl | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VADC_BRSCTRL_GTWC_Msk);
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80021f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  /* program BRSMR register */
  global_ptr->BRSMR = (uint32_t)((config->asmr) | (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VADC_BRSMR_ENGT_Pos));
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f043 0201 	orr.w	r2, r3, #1
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	f003 0303 	and.w	r3, r3, #3
 8002216:	b2db      	uxtb	r3, r3
 8002218:	2b02      	cmp	r3, #2
 800221a:	d107      	bne.n	800222c <XMC_VADC_GLOBAL_BackgroundInit+0xd0>
  {
    global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002222:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  }
#endif

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for (i = (uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 800222c:	2300      	movs	r3, #0
 800222e:	75fb      	strb	r3, [r7, #23]
 8002230:	e009      	b.n	8002246 <XMC_VADC_GLOBAL_BackgroundInit+0xea>
  {
    XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 8002232:	7dfb      	ldrb	r3, [r7, #23]
 8002234:	4a07      	ldr	r2, [pc, #28]	; (8002254 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8002236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800223a:	4618      	mov	r0, r3
 800223c:	f7ff fe14 	bl	8001e68 <XMC_VADC_GROUP_BackgroundEnableArbitrationSlot>
    global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
  }
#endif

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for (i = (uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8002240:	7dfb      	ldrb	r3, [r7, #23]
 8002242:	3301      	adds	r3, #1
 8002244:	75fb      	strb	r3, [r7, #23]
 8002246:	7dfb      	ldrb	r3, [r7, #23]
 8002248:	2b03      	cmp	r3, #3
 800224a:	d9f2      	bls.n	8002232 <XMC_VADC_GLOBAL_BackgroundInit+0xd6>
  {
    XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
  }
#endif

}
 800224c:	3718      	adds	r7, #24
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	08005164 	.word	0x08005164

08002258 <XMC_VADC_GROUP_ChannelInit>:

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
/* API to initialize a channel unit */
void XMC_VADC_GROUP_ChannelInit(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num,
                                const XMC_VADC_CHANNEL_CONFIG_t *config)
{
 8002258:	b480      	push	{r7}
 800225a:	b089      	sub	sp, #36	; 0x24
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]


  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))

  prio  = (uint32_t)config->channel_priority;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	7a1b      	ldrb	r3, [r3, #8]
 8002268:	61bb      	str	r3, [r7, #24]

  /* Priority channel */
  ch_assign  = group_ptr->CHASS;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002270:	617b      	str	r3, [r7, #20]
  ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	2201      	movs	r2, #1
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	43db      	mvns	r3, r3
 800227c:	697a      	ldr	r2, [r7, #20]
 800227e:	4013      	ands	r3, r2
 8002280:	617b      	str	r3, [r7, #20]
  ch_assign |= (uint32_t)(prio << ch_num);
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	697a      	ldr	r2, [r7, #20]
 800228c:	4313      	orrs	r3, r2
 800228e:	617b      	str	r3, [r7, #20]
  group_ptr->CHASS = ch_assign;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	697a      	ldr	r2, [r7, #20]
 8002294:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Alias channel */
  if (config->alias_channel >= (int32_t)0)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	7a5b      	ldrb	r3, [r3, #9]
 800229c:	b25b      	sxtb	r3, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	db29      	blt.n	80022f6 <XMC_VADC_GROUP_ChannelInit+0x9e>
  {
    mask = (uint32_t)0;
 80022a2:	2300      	movs	r3, #0
 80022a4:	61fb      	str	r3, [r7, #28]
    if ((uint32_t)1 == ch_num)
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d10a      	bne.n	80022c2 <XMC_VADC_GROUP_ChannelInit+0x6a>
    {
      mask = VADC_G_ALIAS_ALIAS1_Pos;
 80022ac:	2308      	movs	r3, #8
 80022ae:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS1_Msk);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80022b6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80022c0:	e00c      	b.n	80022dc <XMC_VADC_GROUP_ChannelInit+0x84>
    }
    else if ((uint32_t)0 == ch_num)
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d109      	bne.n	80022dc <XMC_VADC_GROUP_ChannelInit+0x84>
    {
      mask = VADC_G_ALIAS_ALIAS0_Pos;
 80022c8:	2300      	movs	r3, #0
 80022ca:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS0_Msk);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80022d2:	f023 021f 	bic.w	r2, r3, #31
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }

    group_ptr->ALIAS |= (uint32_t)(config->alias_channel << mask);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	7a52      	ldrb	r2, [r2, #9]
 80022e6:	b251      	sxtb	r1, r2
 80022e8:	69fa      	ldr	r2, [r7, #28]
 80022ea:	fa01 f202 	lsl.w	r2, r1, r2
 80022ee:	431a      	orrs	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  }

  group_ptr->BFL |= config->bfl;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	431a      	orrs	r2, r3
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

#if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
  group_ptr->BFLC |= config->bflc;
#endif
  /* Program the CHCTR register */
  group_ptr->CHCTR[ch_num] = config->chctr;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6819      	ldr	r1, [r3, #0]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	68ba      	ldr	r2, [r7, #8]
 8002310:	3280      	adds	r2, #128	; 0x80
 8002312:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 8002316:	3724      	adds	r7, #36	; 0x24
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 8002328:	4b14      	ldr	r3, [pc, #80]	; (800237c <_sbrk+0x5c>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d102      	bne.n	8002336 <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 8002330:	4b12      	ldr	r3, [pc, #72]	; (800237c <_sbrk+0x5c>)
 8002332:	4a13      	ldr	r2, [pc, #76]	; (8002380 <_sbrk+0x60>)
 8002334:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 8002336:	4b11      	ldr	r3, [pc, #68]	; (800237c <_sbrk+0x5c>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	3303      	adds	r3, #3
 8002340:	f023 0303 	bic.w	r3, r3, #3
 8002344:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 8002346:	4b0d      	ldr	r3, [pc, #52]	; (800237c <_sbrk+0x5c>)
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4413      	add	r3, r2
 800234e:	4a0d      	ldr	r2, [pc, #52]	; (8002384 <_sbrk+0x64>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d207      	bcs.n	8002364 <_sbrk+0x44>
  {
    heap_ptr += nbytes;
 8002354:	4b09      	ldr	r3, [pc, #36]	; (800237c <_sbrk+0x5c>)
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4413      	add	r3, r2
 800235c:	4a07      	ldr	r2, [pc, #28]	; (800237c <_sbrk+0x5c>)
 800235e:	6013      	str	r3, [r2, #0]
    return (base);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	e006      	b.n	8002372 <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 8002364:	f001 ffca 	bl	80042fc <__errno>
 8002368:	4602      	mov	r2, r0
 800236a:	230c      	movs	r3, #12
 800236c:	6013      	str	r3, [r2, #0]
    return ((caddr_t)-1);
 800236e:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8002372:	4618      	mov	r0, r3
 8002374:	3710      	adds	r7, #16
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	20000344 	.word	0x20000344
 8002380:	20000378 	.word	0x20000378
 8002384:	2000ffc0 	.word	0x2000ffc0

08002388 <_init>:

/* Init */
void _init(void)
{}
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800239e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	db0c      	blt.n	80023c0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023a6:	4909      	ldr	r1, [pc, #36]	; (80023cc <__NVIC_ClearPendingIRQ+0x38>)
 80023a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ac:	095b      	lsrs	r3, r3, #5
 80023ae:	79fa      	ldrb	r2, [r7, #7]
 80023b0:	f002 021f 	and.w	r2, r2, #31
 80023b4:	2001      	movs	r0, #1
 80023b6:	fa00 f202 	lsl.w	r2, r0, r2
 80023ba:	3360      	adds	r3, #96	; 0x60
 80023bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	e000e100 	.word	0xe000e100

080023d0 <XMC_USIC_CH_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  channel->CCR &= (uint32_t)~event;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	43db      	mvns	r3, r3
 80023e2:	401a      	ands	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop

080023f4 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002400:	b2db      	uxtb	r3, r3
 8002402:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002406:	b2db      	uxtb	r3, r3
}
 8002408:	4618      	mov	r0, r3
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <XMC_USIC_CH_TXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  channel->TBCTR |= event;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	431a      	orrs	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <XMC_USIC_CH_TXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
  channel->TBCTR &= (uint32_t)~event;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	43db      	mvns	r3, r3
 800244c:	401a      	ands	r2, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop

08002460 <XMC_USIC_CH_TXFIFO_IsFull>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800246e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002472:	2b00      	cmp	r3, #0
 8002474:	bf14      	ite	ne
 8002476:	2301      	movne	r3, #1
 8002478:	2300      	moveq	r3, #0
 800247a:	b2db      	uxtb	r3, r3
}
 800247c:	4618      	mov	r0, r3
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <XMC_USIC_CH_TXFIFO_IsEmpty>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8002496:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800249a:	2b00      	cmp	r3, #0
 800249c:	bf14      	ite	ne
 800249e:	2301      	movne	r3, #1
 80024a0:	2300      	moveq	r3, #0
 80024a2:	b2db      	uxtb	r3, r3
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <XMC_USIC_CH_RXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  channel->RBCTR &= (uint32_t)~event;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	43db      	mvns	r3, r3
 80024c4:	401a      	ands	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop

080024d8 <XMC_USIC_CH_RXFIFO_IsEmpty>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80024e6:	f003 0308 	and.w	r3, r3, #8
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	bf14      	ite	ne
 80024ee:	2301      	movne	r3, #1
 80024f0:	2300      	moveq	r3, #0
 80024f2:	b2db      	uxtb	r3, r3
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <XMC_I2C_CH_GetStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_ClearStatusFlag()\n\n
 */
__STATIC_INLINE uint32_t XMC_I2C_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  return (channel->PSR_IICMode);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 800250c:	4618      	mov	r0, r3
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <XMC_I2C_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	431a      	orrs	r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <I2C_MASTER_SetRXFIFOTriggerLimit>:
 *
 * @endcode
 */
__STATIC_INLINE void I2C_MASTER_SetRXFIFOTriggerLimit(I2C_MASTER_t * const handle, const uint32_t size,
		                                              const uint32_t limit)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("I2C_MASTER_SetRXFIFOTriggerLimit: invalid handle", (handle != NULL));
  XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel, (XMC_USIC_CH_FIFO_SIZE_t)size, limit);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	b2db      	uxtb	r3, r3
 800254c:	4610      	mov	r0, r2
 800254e:	4619      	mov	r1, r3
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	f7ff fba3 	bl	8001c9c <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>
}
 8002556:	3710      	adds	r7, #16
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <I2C_MASTER_IsTXFIFOFull>:
 *  }
 * }
 * @endcode
 */
__STATIC_INLINE bool I2C_MASTER_IsTXFIFOFull(const I2C_MASTER_t* const handle)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_IsTXFIFOFull: invalid handle", (handle != NULL));
  return XMC_USIC_CH_TXFIFO_IsFull(handle->channel);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4618      	mov	r0, r3
 800256a:	f7ff ff79 	bl	8002460 <XMC_USIC_CH_TXFIFO_IsFull>
 800256e:	4603      	mov	r3, r0
}
 8002570:	4618      	mov	r0, r3
 8002572:	3708      	adds	r7, #8
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <I2C_MASTER_IsRXFIFOEmpty>:
 *   }
 *  }
 * @endcode
 */
__STATIC_INLINE bool I2C_MASTER_IsRXFIFOEmpty(const I2C_MASTER_t* const handle)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_IsRXFIFOEmpty: invalid handle", (handle != NULL));
  return XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff ffa7 	bl	80024d8 <XMC_USIC_CH_RXFIFO_IsEmpty>
 800258a:	4603      	mov	r3, r0
}
 800258c:	4618      	mov	r0, r3
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <I2C_MASTER_GetReceivedByte>:
 * @endcode
 *
 */
/* Wrapper to the LLD API for reading back the value of the RBUF or OUTR register */
__STATIC_INLINE uint8_t I2C_MASTER_GetReceivedByte(I2C_MASTER_t * const handle)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_GetReceivedByte: invalid handle", (handle != NULL));
  return (uint8_t)XMC_I2C_CH_GetReceivedData(handle->channel);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff f9b3 	bl	800190c <XMC_I2C_CH_GetReceivedData>
 80025a6:	4603      	mov	r3, r0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3708      	adds	r7, #8
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <I2C_MASTER_TransmitByte>:
 *    }
 *  }
 * @endcode
 */
__STATIC_INLINE void I2C_MASTER_TransmitByte(I2C_MASTER_t * const handle, uint8_t byte)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	460b      	mov	r3, r1
 80025ba:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("I2C_MASTER_TransmitByte: invalid handle", (handle != NULL));
  XMC_I2C_CH_MasterTransmit(handle->channel, byte);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	78fb      	ldrb	r3, [r7, #3]
 80025c2:	4610      	mov	r0, r2
 80025c4:	4619      	mov	r1, r3
 80025c6:	f7ff f92f 	bl	8001828 <XMC_I2C_CH_MasterTransmit>
}
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <I2C_MASTER_DisableEvent>:
 *  }
 * @endcode
 *
 */
__STATIC_INLINE void I2C_MASTER_DisableEvent(I2C_MASTER_t * const handle, uint32_t event)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("I2C_MASTER_DisableEvent: invalid handle", (handle != NULL));
  XMC_I2C_CH_DisableEvent(handle->channel, event);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	6839      	ldr	r1, [r7, #0]
 80025e2:	f7ff f9ad 	bl	8001940 <XMC_I2C_CH_DisableEvent>
}
 80025e6:	3708      	adds	r7, #8
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <I2C_MASTER_ReceiveACK>:
 *    return 1U;
 *  }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL));
  XMC_I2C_CH_MasterReceiveAck(handle->channel);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff f93b 	bl	8001874 <XMC_I2C_CH_MasterReceiveAck>
}
 80025fe:	3708      	adds	r7, #8
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <I2C_MASTER_ReceiveNACK>:
 *    return 1U;
 *  }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL));
  XMC_I2C_CH_MasterReceiveNack(handle->channel);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff f955 	bl	80018c0 <XMC_I2C_CH_MasterReceiveNack>
}
 8002616:	3708      	adds	r7, #8
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <I2C_MASTER_SendStop>:
 *    return 1U;
 *  }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_SendStop(I2C_MASTER_t * const handle)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_SendStop: invalid handle", (handle != NULL));
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_STOP_CONDITION_RECEIVED);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4618      	mov	r0, r3
 800262a:	2110      	movs	r1, #16
 800262c:	f7ff ff74 	bl	8002518 <XMC_I2C_CH_ClearStatusFlag>
  XMC_I2C_CH_MasterStop(handle->channel);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4618      	mov	r0, r3
 8002636:	f7ff f8d1 	bl	80017dc <XMC_I2C_CH_MasterStop>
}
 800263a:	3708      	adds	r7, #8
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <calculate_minfifosize>:
 */
void I2C_MASTER_ProtocolHandler(I2C_MASTER_t * const handle);

#if ((I2C_MASTER_INTERRUPT_TX_ENABLED == 1) || (I2C_MASTER_INTERRUPT_RX_ENABLED == 1))
static uint32_t calculate_minfifosize(uint32_t a, uint32_t b)
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  uint32_t result;

  if (a < b)
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	429a      	cmp	r2, r3
 8002650:	d202      	bcs.n	8002658 <calculate_minfifosize+0x18>
  {
    result = a;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	60fb      	str	r3, [r7, #12]
 8002656:	e001      	b.n	800265c <calculate_minfifosize+0x1c>
  }
  else
  {
    result = b;
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	60fb      	str	r3, [r7, #12]
  }
  return (result);
 800265c:	68fb      	ldr	r3, [r7, #12]
}
 800265e:	4618      	mov	r0, r3
 8002660:	3714      	adds	r7, #20
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop

0800266c <I2C_MASTER_Init>:
  return (version);
}

/* Function to initialize the USIC Channel with GUI configured values.*/
I2C_MASTER_STATUS_t I2C_MASTER_Init(const I2C_MASTER_t *const handle)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  I2C_MASTER_STATUS_t status;

  if (handle != NULL)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d006      	beq.n	8002688 <I2C_MASTER_Init+0x1c>
  {
    /*Initialize the multiplexers required for I2C_MASTER configuration*/
    handle->config->fptr_i2c_config();
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	4798      	blx	r3

    status = I2C_MASTER_STATUS_SUCCESS;
 8002682:	2300      	movs	r3, #0
 8002684:	73fb      	strb	r3, [r7, #15]
 8002686:	e001      	b.n	800268c <I2C_MASTER_Init+0x20>
  }
  else
  {
    status = I2C_MASTER_STATUS_FAILURE;
 8002688:	2301      	movs	r3, #1
 800268a:	73fb      	strb	r3, [r7, #15]
  }
  return (status);
 800268c:	7bfb      	ldrb	r3, [r7, #15]
}
 800268e:	4618      	mov	r0, r3
 8002690:	3710      	adds	r7, #16
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop

08002698 <I2C_MASTER_GetFlagStatus>:

/* Function to get flag status of the requested parameter */
uint32_t I2C_MASTER_GetFlagStatus(const I2C_MASTER_t *handle, uint32_t flagtype)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  uint32_t status;

  status = XMC_I2C_CH_GetStatusFlag(handle->channel);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7ff ff2a 	bl	8002500 <XMC_I2C_CH_GetStatusFlag>
 80026ac:	60f8      	str	r0, [r7, #12]

  return (status & flagtype);
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	4013      	ands	r3, r2
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3710      	adds	r7, #16
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <I2C_MASTER_ClearFlag>:

/* Function to clear flag status of the requested parameter */
void I2C_MASTER_ClearFlag(const I2C_MASTER_t *handle, uint32_t flagtype)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  XMC_I2C_CH_ClearStatusFlag(handle->channel,flagtype);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	6839      	ldr	r1, [r7, #0]
 80026ce:	f7ff ff23 	bl	8002518 <XMC_I2C_CH_ClearStatusFlag>
}
 80026d2:	3708      	adds	r7, #8
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <I2C_MASTER_TransmitHandler>:
 *  @param  handle I2C_MASTER APP handle pointer of type I2C_MASTER_t*
 *
 *  @return void
 */
void I2C_MASTER_TransmitHandler(I2C_MASTER_t * const handle)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  I2C_MASTER_RUNTIME_t * ptr_runtime;
  uint8_t fifo_min;

  ptr_runtime = handle->runtime;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	60bb      	str	r3, [r7, #8]
  fifo_min = 0U;
 80026e6:	2300      	movs	r3, #0
 80026e8:	73fb      	strb	r3, [r7, #15]

  /* check if any error flag is set */
  if (I2C_MASTER_GetFlagStatus(handle, ((uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED |
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80026f0:	f7ff ffd2 	bl	8002698 <I2C_MASTER_GetFlagStatus>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d011      	beq.n	800271e <I2C_MASTER_TransmitHandler+0x46>
                                        (uint32_t)XMC_I2C_CH_STATUS_FLAG_ARBITRATION_LOST |
                                        (uint32_t)XMC_I2C_CH_STATUS_FLAG_ERROR |
                    (uint32_t)XMC_I2C_CH_STATUS_FLAG_WRONG_TDF_CODE_FOUND)))
  {
    /* Disable the transmit events */
    XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4618      	mov	r0, r3
 8002700:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002704:	f7ff fe98 	bl	8002438 <XMC_USIC_CH_TXFIFO_DisableEvent>
    XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4618      	mov	r0, r3
 800270e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002712:	f7ff fe5d 	bl	80023d0 <XMC_USIC_CH_DisableEvent>

    I2C_MASTER_ProtocolHandler(handle);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f000 fa96 	bl	8002c48 <I2C_MASTER_ProtocolHandler>
 800271c:	e105      	b.n	800292a <I2C_MASTER_TransmitHandler+0x252>
  else
  {
/***********************************************************************************************************************
  Direction = Transmit, Tx FIFO enabled
***********************************************************************************************************************/
  if (ptr_runtime->direction == (uint32_t)I2C_MASTER_DIRECTION_TRANSMIT)
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	699b      	ldr	r3, [r3, #24]
 8002722:	2b00      	cmp	r3, #0
 8002724:	f040 8082 	bne.w	800282c <I2C_MASTER_TransmitHandler+0x154>
  {
    if (handle->config->txFIFO_size > 0)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002730:	2b00      	cmp	r3, #0
 8002732:	d05a      	beq.n	80027ea <I2C_MASTER_TransmitHandler+0x112>
    {
      if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	68da      	ldr	r2, [r3, #12]
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	429a      	cmp	r2, r3
 800273e:	d22e      	bcs.n	800279e <I2C_MASTER_TransmitHandler+0xc6>
      {
      I2C_MASTER_DisableEvent(handle,(uint32_t)XMC_I2C_CH_EVENT_ACK);
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002746:	f7ff ff43 	bl	80025d0 <I2C_MASTER_DisableEvent>
      XMC_USIC_CH_TXFIFO_EnableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002754:	f7ff fe5e 	bl	8002414 <XMC_USIC_CH_TXFIFO_EnableEvent>
        /*Fill the transmit FIFO */
        while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 8002758:	e017      	b.n	800278a <I2C_MASTER_TransmitHandler+0xb2>
        {
          /* transmit each byte till index reaches to the last byte */
          if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	68da      	ldr	r2, [r3, #12]
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	429a      	cmp	r2, r3
 8002764:	d20f      	bcs.n	8002786 <I2C_MASTER_TransmitHandler+0xae>
          {
            /* load the FIFO, byte by byte till either FIFO is full or all data is loaded*/
            I2C_MASTER_TransmitByte(handle, (uint8_t)ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	4413      	add	r3, r2
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	4619      	mov	r1, r3
 8002776:	f7ff ff1b 	bl	80025b0 <I2C_MASTER_TransmitByte>
            ptr_runtime->tx_data_index++;
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	1c5a      	adds	r2, r3, #1
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	60da      	str	r2, [r3, #12]
 8002784:	e001      	b.n	800278a <I2C_MASTER_TransmitHandler+0xb2>
          }
          else
          {
            break;
 8002786:	bf00      	nop
 8002788:	e0cf      	b.n	800292a <I2C_MASTER_TransmitHandler+0x252>
      if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
      {
      I2C_MASTER_DisableEvent(handle,(uint32_t)XMC_I2C_CH_EVENT_ACK);
      XMC_USIC_CH_TXFIFO_EnableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
        /*Fill the transmit FIFO */
        while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f7ff fee6 	bl	800255c <I2C_MASTER_IsTXFIFOFull>
 8002790:	4603      	mov	r3, r0
 8002792:	f083 0301 	eor.w	r3, r3, #1
 8002796:	b2db      	uxtb	r3, r3
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1de      	bne.n	800275a <I2C_MASTER_TransmitHandler+0x82>
 800279c:	e0c5      	b.n	800292a <I2C_MASTER_TransmitHandler+0x252>
        } /* end of while */
      }
      else
      {
        /* if index is reached to last byte and "bus acquired" flag is set to true, then issue Send Stop */
      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80027a8:	f7ff fe46 	bl	8002438 <XMC_USIC_CH_TXFIFO_DisableEvent>
      NVIC_ClearPendingIRQ(handle->config->tx_irqn);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80027b4:	b25b      	sxtb	r3, r3
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff fdec 	bl	8002394 <__NVIC_ClearPendingIRQ>

      /*make sure data is transmitted in FIFO*/
        while (!XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel)){}
 80027bc:	bf00      	nop
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff fe60 	bl	8002488 <XMC_USIC_CH_TXFIFO_IsEmpty>
 80027c8:	4603      	mov	r3, r0
 80027ca:	f083 0301 	eor.w	r3, r3, #1
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d1f4      	bne.n	80027be <I2C_MASTER_TransmitHandler+0xe6>

          if (ptr_runtime->bus_acquired == true)
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f000 80a4 	beq.w	800292a <I2C_MASTER_TransmitHandler+0x252>
          {
            I2C_MASTER_lSendStop_JumpTo_TxCallback(handle);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 f8a4 	bl	8002930 <I2C_MASTER_lSendStop_JumpTo_TxCallback>
 80027e8:	e09f      	b.n	800292a <I2C_MASTER_TransmitHandler+0x252>
    Direction = transmit and Tx FIFO disabled
***********************************************************************************************************************/
    else
    {
      /* transmit each byte till the last byte */
      if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	68da      	ldr	r2, [r3, #12]
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d20f      	bcs.n	8002816 <I2C_MASTER_TransmitHandler+0x13e>
      {
        I2C_MASTER_TransmitByte(handle, ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	4413      	add	r3, r2
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	4619      	mov	r1, r3
 8002806:	f7ff fed3 	bl	80025b0 <I2C_MASTER_TransmitByte>
        ptr_runtime->tx_data_index++;
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	1c5a      	adds	r2, r3, #1
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	60da      	str	r2, [r3, #12]
 8002814:	e089      	b.n	800292a <I2C_MASTER_TransmitHandler+0x252>
      }
      else
      {
        /* if index reaches last byte and bus_acquired flag is set to true, issue send stop */
        if (ptr_runtime->bus_acquired == true)
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	f000 8083 	beq.w	800292a <I2C_MASTER_TransmitHandler+0x252>
        {
          I2C_MASTER_lSendStop_JumpTo_TxCallback(handle);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f000 f883 	bl	8002930 <I2C_MASTER_lSendStop_JumpTo_TxCallback>
 800282a:	e07e      	b.n	800292a <I2C_MASTER_TransmitHandler+0x252>
/***********************************************************************************************************************
  Direction = Receive, Tx, Rx FIFO enabled.
  Minimum FIFO value is calculated by comparing Tx FIFO and Rx FIFO size.
  If Rx FIFO is not enabled, default size of 2 is considered.
***********************************************************************************************************************/
    if (handle->config->txFIFO_size > 0)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002834:	2b00      	cmp	r3, #0
 8002836:	d054      	beq.n	80028e2 <I2C_MASTER_TransmitHandler+0x20a>
    {
      if ((handle->config->rxFIFO_size > 0))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002840:	2b00      	cmp	r3, #0
 8002842:	d015      	beq.n	8002870 <I2C_MASTER_TransmitHandler+0x198>
      {
        fifo_min = (uint8_t)calculate_minfifosize(((uint32_t)1 << (uint32_t)handle->config->txFIFO_size),
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800284c:	461a      	mov	r2, r3
 800284e:	2301      	movs	r3, #1
 8002850:	fa03 f202 	lsl.w	r2, r3, r2
                                              ((uint32_t)1 << (uint32_t)handle->config->rxFIFO_size));
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
***********************************************************************************************************************/
    if (handle->config->txFIFO_size > 0)
    {
      if ((handle->config->rxFIFO_size > 0))
      {
        fifo_min = (uint8_t)calculate_minfifosize(((uint32_t)1 << (uint32_t)handle->config->txFIFO_size),
 800285c:	4619      	mov	r1, r3
 800285e:	2301      	movs	r3, #1
 8002860:	408b      	lsls	r3, r1
 8002862:	4610      	mov	r0, r2
 8002864:	4619      	mov	r1, r3
 8002866:	f7ff feeb 	bl	8002640 <calculate_minfifosize>
 800286a:	4603      	mov	r3, r0
 800286c:	73fb      	strb	r3, [r7, #15]
 800286e:	e001      	b.n	8002874 <I2C_MASTER_TransmitHandler+0x19c>
                                              ((uint32_t)1 << (uint32_t)handle->config->rxFIFO_size));
      }
      else
      {
        /* if Rx FIFO is disabled, set minimum FIFO size as 2 */
        fifo_min = 2U;
 8002870:	2302      	movs	r3, #2
 8002872:	73fb      	strb	r3, [r7, #15]
      }

      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4618      	mov	r0, r3
 800287a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800287e:	f7ff fddb 	bl	8002438 <XMC_USIC_CH_TXFIFO_DisableEvent>

      /* fill the FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 8002882:	e023      	b.n	80028cc <I2C_MASTER_TransmitHandler+0x1f4>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	68da      	ldr	r2, [r3, #12]
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	429a      	cmp	r2, r3
 800288e:	d21c      	bcs.n	80028ca <I2C_MASTER_TransmitHandler+0x1f2>
        {
          /* check for last byte and send_nack is set to true */
          if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	1c5a      	adds	r2, r3, #1
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	429a      	cmp	r2, r3
 800289c:	d107      	bne.n	80028ae <I2C_MASTER_TransmitHandler+0x1d6>
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	6a1b      	ldr	r3, [r3, #32]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d103      	bne.n	80028ae <I2C_MASTER_TransmitHandler+0x1d6>
          {
            I2C_MASTER_ReceiveNACK(handle);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f7ff feac 	bl	8002604 <I2C_MASTER_ReceiveNACK>
 80028ac:	e002      	b.n	80028b4 <I2C_MASTER_TransmitHandler+0x1dc>
          }
          else
          {
            I2C_MASTER_ReceiveACK(handle);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f7ff fe9c 	bl	80025ec <I2C_MASTER_ReceiveACK>
          }
          ptr_runtime->tx_data_index++;
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	1c5a      	adds	r2, r3, #1
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	60da      	str	r2, [r3, #12]

          /*if index reaches fifo size - break*/
          if ((ptr_runtime->tx_data_index) >= fifo_min)
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	68da      	ldr	r2, [r3, #12]
 80028c2:	7bfb      	ldrb	r3, [r7, #15]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d301      	bcc.n	80028cc <I2C_MASTER_TransmitHandler+0x1f4>
          {
            break;
 80028c8:	e00a      	b.n	80028e0 <I2C_MASTER_TransmitHandler+0x208>
          }
        }
        else
        {
          break;
 80028ca:	e009      	b.n	80028e0 <I2C_MASTER_TransmitHandler+0x208>
      }

      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);

      /* fill the FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f7ff fe45 	bl	800255c <I2C_MASTER_IsTXFIFOFull>
 80028d2:	4603      	mov	r3, r0
 80028d4:	f083 0301 	eor.w	r3, r3, #1
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1d2      	bne.n	8002884 <I2C_MASTER_TransmitHandler+0x1ac>
 80028de:	e017      	b.n	8002910 <I2C_MASTER_TransmitHandler+0x238>
 80028e0:	e016      	b.n	8002910 <I2C_MASTER_TransmitHandler+0x238>
   Direction = Receive, Tx FIFO disabled
 **********************************************************************************************************************/
    else
    {
      /* check for last byte and send_nack is set to true */
      if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	1c5a      	adds	r2, r3, #1
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d107      	bne.n	8002900 <I2C_MASTER_TransmitHandler+0x228>
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	6a1b      	ldr	r3, [r3, #32]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d103      	bne.n	8002900 <I2C_MASTER_TransmitHandler+0x228>
      {
        I2C_MASTER_ReceiveNACK(handle);
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f7ff fe83 	bl	8002604 <I2C_MASTER_ReceiveNACK>
 80028fe:	e002      	b.n	8002906 <I2C_MASTER_TransmitHandler+0x22e>
      }
      else
      {
        I2C_MASTER_ReceiveACK(handle);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f7ff fe73 	bl	80025ec <I2C_MASTER_ReceiveACK>
      }
      ptr_runtime->tx_data_index++;
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	1c5a      	adds	r2, r3, #1
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	60da      	str	r2, [r3, #12]
    }

/***********************************************************************************************************************
   If last byte, then disable ACK event
 **********************************************************************************************************************/
     if (handle->runtime->tx_data_index == handle->runtime->tx_data_count)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	68da      	ldr	r2, [r3, #12]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	429a      	cmp	r2, r3
 800291e:	d104      	bne.n	800292a <I2C_MASTER_TransmitHandler+0x252>
     {
       I2C_MASTER_DisableEvent(handle,(uint32_t)XMC_I2C_CH_EVENT_ACK);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002926:	f7ff fe53 	bl	80025d0 <I2C_MASTER_DisableEvent>
     }
  } /* end of else */
 } /* end of else */
}
 800292a:	3710      	adds	r7, #16
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <I2C_MASTER_lSendStop_JumpTo_TxCallback>:

/* Function to issue Send Stop command and jump to callback routine */
static void I2C_MASTER_lSendStop_JumpTo_TxCallback(I2C_MASTER_t *const handle)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  ptr_runtime = handle->runtime;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	60fb      	str	r3, [r7, #12]

  I2C_MASTER_DisableEvent(handle,((uint32_t)XMC_I2C_CH_EVENT_ACK ));
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002944:	f7ff fe44 	bl	80025d0 <I2C_MASTER_DisableEvent>

  if (ptr_runtime->send_stop == true)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	69db      	ldr	r3, [r3, #28]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d106      	bne.n	800295e <I2C_MASTER_lSendStop_JumpTo_TxCallback+0x2e>
  {
    ptr_runtime->bus_acquired = false;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    I2C_MASTER_SendStop(handle);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f7ff fe5f 	bl	800261c <I2C_MASTER_SendStop>
  }

  while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
 800295e:	bf00      	nop
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4618      	mov	r0, r3
 8002966:	f7ff fd45 	bl	80023f4 <XMC_USIC_CH_GetTransmitBufferStatus>
 800296a:	4603      	mov	r3, r0
 800296c:	2b80      	cmp	r3, #128	; 0x80
 800296e:	d0f7      	beq.n	8002960 <I2C_MASTER_lSendStop_JumpTo_TxCallback+0x30>

  /*All data is transmitted*/
  ptr_runtime->tx_busy = false;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  if (handle->config->tx_cbhandler != NULL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d003      	beq.n	800298a <I2C_MASTER_lSendStop_JumpTo_TxCallback+0x5a>
  {
    /*Execute the 'End of transmission' callback function*/
    handle->config->tx_cbhandler();
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	4798      	blx	r3
  }
}
 800298a:	3710      	adds	r7, #16
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <I2C_MASTER_ReceiveHandler>:
 * @param  handle I2C_MASTER APP handle pointer of type I2C_MASTER_t*
 *
 * @return void
 */
void I2C_MASTER_ReceiveHandler(I2C_MASTER_t * const handle)
{
 8002990:	b590      	push	{r4, r7, lr}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  I2C_MASTER_RUNTIME_t * ptr_runtime;
  uint8_t fifo_lindex;
  uint8_t fifo_min;

  ptr_runtime = handle->runtime;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	60bb      	str	r3, [r7, #8]
  fifo_lindex = 0U;
 800299e:	2300      	movs	r3, #0
 80029a0:	73fb      	strb	r3, [r7, #15]

  if (ptr_runtime->rx_busy == true)
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f000 8111 	beq.w	8002bd2 <I2C_MASTER_ReceiveHandler+0x242>
  {
    if (handle->config->rxFIFO_size > 0)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f000 80c7 	beq.w	8002b4c <I2C_MASTER_ReceiveHandler+0x1bc>
    {
      /*****************************************************************************************************************
       Rx FIFO enabled
      *****************************************************************************************************************/
      while (I2C_MASTER_IsRXFIFOEmpty(handle) == false)
 80029be:	e020      	b.n	8002a02 <I2C_MASTER_ReceiveHandler+0x72>
      {
        /*Read all the content of Receive FIFO */
        ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)I2C_MASTER_GetReceivedByte(handle);
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	685a      	ldr	r2, [r3, #4]
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	695b      	ldr	r3, [r3, #20]
 80029c8:	18d4      	adds	r4, r2, r3
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f7ff fde2 	bl	8002594 <I2C_MASTER_GetReceivedByte>
 80029d0:	4603      	mov	r3, r0
 80029d2:	7023      	strb	r3, [r4, #0]
        ptr_runtime->rx_data_index++;
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	695b      	ldr	r3, [r3, #20]
 80029d8:	1c5a      	adds	r2, r3, #1
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	615a      	str	r2, [r3, #20]

        if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	695a      	ldr	r2, [r3, #20]
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d10b      	bne.n	8002a02 <I2C_MASTER_ReceiveHandler+0x72>
        {
          /*Reception complete*/
          ptr_runtime->rx_busy = false;
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

            /*Disable both standard receive and alternative receive FIFO events*/
            XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 80029fc:	f7ff fd58 	bl	80024b0 <XMC_USIC_CH_RXFIFO_DisableEvent>
                                          (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
                                                     (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));

          break;
 8002a00:	e008      	b.n	8002a14 <I2C_MASTER_ReceiveHandler+0x84>
    if (handle->config->rxFIFO_size > 0)
    {
      /*****************************************************************************************************************
       Rx FIFO enabled
      *****************************************************************************************************************/
      while (I2C_MASTER_IsRXFIFOEmpty(handle) == false)
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f7ff fdb8 	bl	8002578 <I2C_MASTER_IsRXFIFOEmpty>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	f083 0301 	eor.w	r3, r3, #1
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1d5      	bne.n	80029c0 <I2C_MASTER_ReceiveHandler+0x30>
          break;
        }
      } /* end of while(I2C_MASTER_IsRXFIFOEmpty(handle) == false)*/

      /*Set the trigger limit if data still to be received*/
      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	695a      	ldr	r2, [r3, #20]
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d277      	bcs.n	8002b10 <I2C_MASTER_ReceiveHandler+0x180>
      {
        I2C_MASTER_lReconfigureRxFIFO(handle,(uint32_t)(ptr_runtime->rx_data_count - ptr_runtime->rx_data_index));
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	691a      	ldr	r2, [r3, #16]
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	695b      	ldr	r3, [r3, #20]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	f000 f94f 	bl	8002cd0 <I2C_MASTER_lReconfigureRxFIFO>

        if ((handle->config->txFIFO_size > 0))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d015      	beq.n	8002a6a <I2C_MASTER_ReceiveHandler+0xda>
        {
          fifo_min = (uint8_t)calculate_minfifosize(((uint32_t)1 << (uint32_t)handle->config->txFIFO_size),
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002a46:	461a      	mov	r2, r3
 8002a48:	2301      	movs	r3, #1
 8002a4a:	fa03 f202 	lsl.w	r2, r3, r2
                                                    ((uint32_t)1 << (uint32_t)handle->config->rxFIFO_size));
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
      {
        I2C_MASTER_lReconfigureRxFIFO(handle,(uint32_t)(ptr_runtime->rx_data_count - ptr_runtime->rx_data_index));

        if ((handle->config->txFIFO_size > 0))
        {
          fifo_min = (uint8_t)calculate_minfifosize(((uint32_t)1 << (uint32_t)handle->config->txFIFO_size),
 8002a56:	4619      	mov	r1, r3
 8002a58:	2301      	movs	r3, #1
 8002a5a:	408b      	lsls	r3, r1
 8002a5c:	4610      	mov	r0, r2
 8002a5e:	4619      	mov	r1, r3
 8002a60:	f7ff fdee 	bl	8002640 <calculate_minfifosize>
 8002a64:	4603      	mov	r3, r0
 8002a66:	73bb      	strb	r3, [r7, #14]
 8002a68:	e001      	b.n	8002a6e <I2C_MASTER_ReceiveHandler+0xde>
                                                    ((uint32_t)1 << (uint32_t)handle->config->rxFIFO_size));
       }
       else
       {
          fifo_min = 2U;
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	73bb      	strb	r3, [r7, #14]
       }
       /****************************************************************************************************************
         Rx and Tx FIFO enabled
        ***************************************************************************************************************/
        if (handle->config->txFIFO_size > 0)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d033      	beq.n	8002ae2 <I2C_MASTER_ReceiveHandler+0x152>
        {
          /*Fill the transmit FIFO */
          while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 8002a7a:	e027      	b.n	8002acc <I2C_MASTER_ReceiveHandler+0x13c>
          {
            if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	68da      	ldr	r2, [r3, #12]
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d220      	bcs.n	8002aca <I2C_MASTER_ReceiveHandler+0x13a>
            {
              if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	1c5a      	adds	r2, r3, #1
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d107      	bne.n	8002aa6 <I2C_MASTER_ReceiveHandler+0x116>
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	6a1b      	ldr	r3, [r3, #32]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d103      	bne.n	8002aa6 <I2C_MASTER_ReceiveHandler+0x116>
              {
                I2C_MASTER_ReceiveNACK(handle);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f7ff fdb0 	bl	8002604 <I2C_MASTER_ReceiveNACK>
 8002aa4:	e002      	b.n	8002aac <I2C_MASTER_ReceiveHandler+0x11c>
              }
              else
              {
                I2C_MASTER_ReceiveACK(handle);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f7ff fda0 	bl	80025ec <I2C_MASTER_ReceiveACK>
              }
              ptr_runtime->tx_data_index++;
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	1c5a      	adds	r2, r3, #1
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	60da      	str	r2, [r3, #12]

              /* if fifo size- break */
              if ((++fifo_lindex) >= fifo_min)
 8002ab6:	7bfb      	ldrb	r3, [r7, #15]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	73fb      	strb	r3, [r7, #15]
 8002abc:	7bfa      	ldrb	r2, [r7, #15]
 8002abe:	7bbb      	ldrb	r3, [r7, #14]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d303      	bcc.n	8002acc <I2C_MASTER_ReceiveHandler+0x13c>
              {
                fifo_lindex = 0U;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	73fb      	strb	r3, [r7, #15]
                break;
 8002ac8:	e00a      	b.n	8002ae0 <I2C_MASTER_ReceiveHandler+0x150>
              }
            }/* end of if(handle->runtime->tx_data_index < handle->runtime->tx_data_count) */
            else
            {
              break;
 8002aca:	e009      	b.n	8002ae0 <I2C_MASTER_ReceiveHandler+0x150>
         Rx and Tx FIFO enabled
        ***************************************************************************************************************/
        if (handle->config->txFIFO_size > 0)
        {
          /*Fill the transmit FIFO */
          while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f7ff fd45 	bl	800255c <I2C_MASTER_IsTXFIFOFull>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	f083 0301 	eor.w	r3, r3, #1
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1ce      	bne.n	8002a7c <I2C_MASTER_ReceiveHandler+0xec>
 8002ade:	e017      	b.n	8002b10 <I2C_MASTER_ReceiveHandler+0x180>
 8002ae0:	e016      	b.n	8002b10 <I2C_MASTER_ReceiveHandler+0x180>
       /****************************************************************************************************************
          Rx FIFO is enabled, Tx FIFO disabled
       ****************************************************************************************************************/
       else
       {
         if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	1c5a      	adds	r2, r3, #1
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d107      	bne.n	8002b00 <I2C_MASTER_ReceiveHandler+0x170>
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	6a1b      	ldr	r3, [r3, #32]
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d103      	bne.n	8002b00 <I2C_MASTER_ReceiveHandler+0x170>
         {
           I2C_MASTER_ReceiveNACK(handle);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f7ff fd83 	bl	8002604 <I2C_MASTER_ReceiveNACK>
 8002afe:	e002      	b.n	8002b06 <I2C_MASTER_ReceiveHandler+0x176>
         }
         else
         {
           I2C_MASTER_ReceiveACK(handle);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f7ff fd73 	bl	80025ec <I2C_MASTER_ReceiveACK>
         }

         ptr_runtime->tx_data_index++;
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	1c5a      	adds	r2, r3, #1
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	60da      	str	r2, [r3, #12]
       }
     } /* end of if(ptr_runtime->rx_data_index < ptr_runtime->rx_data_count) */
/***********************************************************************************************************************
     if last byte to receive then disable receive events and jump to callback routine
***********************************************************************************************************************/
     if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	695a      	ldr	r2, [r3, #20]
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	691b      	ldr	r3, [r3, #16]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d15a      	bne.n	8002bd2 <I2C_MASTER_ReceiveHandler+0x242>
     {
       /*Clear both standard receive and alternative receive FIFO events*/
       XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8002b26:	f7ff fcc3 	bl	80024b0 <XMC_USIC_CH_RXFIFO_DisableEvent>
                                                                   (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));

       /*Disable both standard receive and alternative receive events*/
       XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE |
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8002b34:	f7ff fc4c 	bl	80023d0 <XMC_USIC_CH_DisableEvent>
                                                            (uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE));

       if (ptr_runtime->bus_acquired == true)
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d046      	beq.n	8002bd2 <I2C_MASTER_ReceiveHandler+0x242>
       {
         I2C_MASTER_lSendStop_JumpTo_RxCallback(handle);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 f847 	bl	8002bd8 <I2C_MASTER_lSendStop_JumpTo_RxCallback>
 8002b4a:	e042      	b.n	8002bd2 <I2C_MASTER_ReceiveHandler+0x242>
/***********************************************************************************************************************
     Rx FIFO disabled
***********************************************************************************************************************/
    else
    {
      ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)I2C_MASTER_GetReceivedByte(handle);
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	685a      	ldr	r2, [r3, #4]
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	695b      	ldr	r3, [r3, #20]
 8002b54:	18d4      	adds	r4, r2, r3
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f7ff fd1c 	bl	8002594 <I2C_MASTER_GetReceivedByte>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	7023      	strb	r3, [r4, #0]
      ptr_runtime->rx_data_index++;
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	1c5a      	adds	r2, r3, #1
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	615a      	str	r2, [r3, #20]

      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	695a      	ldr	r2, [r3, #20]
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d21d      	bcs.n	8002bb2 <I2C_MASTER_ReceiveHandler+0x222>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	68da      	ldr	r2, [r3, #12]
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d227      	bcs.n	8002bd2 <I2C_MASTER_ReceiveHandler+0x242>
        {
          /* if receive byte is end of byte and send_nack is true, send to receive Nack otherwise Ack*/
          if (((ptr_runtime->tx_data_index) == (ptr_runtime->tx_data_count - 1U)) && (ptr_runtime->send_nack == true))
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	68da      	ldr	r2, [r3, #12]
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d107      	bne.n	8002ba0 <I2C_MASTER_ReceiveHandler+0x210>
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	6a1b      	ldr	r3, [r3, #32]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d103      	bne.n	8002ba0 <I2C_MASTER_ReceiveHandler+0x210>
          {
            I2C_MASTER_ReceiveNACK(handle);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f7ff fd33 	bl	8002604 <I2C_MASTER_ReceiveNACK>
 8002b9e:	e002      	b.n	8002ba6 <I2C_MASTER_ReceiveHandler+0x216>
          }
          else
          {
            I2C_MASTER_ReceiveACK(handle);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f7ff fd23 	bl	80025ec <I2C_MASTER_ReceiveACK>
          }
          ptr_runtime->tx_data_index++;
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	1c5a      	adds	r2, r3, #1
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	60da      	str	r2, [r3, #12]
 8002bb0:	e00f      	b.n	8002bd2 <I2C_MASTER_ReceiveHandler+0x242>
        }
      }
      else
      {
        /*Disable both standard receive and alternative receive events*/
        XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE |
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8002bbc:	f7ff fc08 	bl	80023d0 <XMC_USIC_CH_DisableEvent>
                                                             (uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE));
        if (ptr_runtime->bus_acquired == true)
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d002      	beq.n	8002bd2 <I2C_MASTER_ReceiveHandler+0x242>
        {
          I2C_MASTER_lSendStop_JumpTo_RxCallback(handle);
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f000 f803 	bl	8002bd8 <I2C_MASTER_lSendStop_JumpTo_RxCallback>
        }
      }
    }
  } /* end of  if(ptr_runtime->rx_busy == true)*/
}
 8002bd2:	3714      	adds	r7, #20
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd90      	pop	{r4, r7, pc}

08002bd8 <I2C_MASTER_lSendStop_JumpTo_RxCallback>:

/* Function to issue Send Stop command and jump to receive callback routine */
static void I2C_MASTER_lSendStop_JumpTo_RxCallback(I2C_MASTER_t *const handle)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  ptr_runtime = handle->runtime;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	60fb      	str	r3, [r7, #12]

  if (ptr_runtime->send_stop == true)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	69db      	ldr	r3, [r3, #28]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d10f      	bne.n	8002c0e <I2C_MASTER_lSendStop_JumpTo_RxCallback+0x36>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
 8002bee:	bf00      	nop
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7ff fbfd 	bl	80023f4 <XMC_USIC_CH_GetTransmitBufferStatus>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b80      	cmp	r3, #128	; 0x80
 8002bfe:	d0f7      	beq.n	8002bf0 <I2C_MASTER_lSendStop_JumpTo_RxCallback+0x18>

    ptr_runtime->bus_acquired = false;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    I2C_MASTER_SendStop(handle);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f7ff fd07 	bl	800261c <I2C_MASTER_SendStop>
  }

  while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
 8002c0e:	bf00      	nop
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7ff fbed 	bl	80023f4 <XMC_USIC_CH_GetTransmitBufferStatus>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b80      	cmp	r3, #128	; 0x80
 8002c1e:	d0f7      	beq.n	8002c10 <I2C_MASTER_lSendStop_JumpTo_RxCallback+0x38>

  /* Reception complete */
  ptr_runtime->rx_busy = false;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  ptr_runtime->tx_busy = false;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  if (handle->config->rx_cbhandler != NULL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <I2C_MASTER_lSendStop_JumpTo_RxCallback+0x6a>
  {
    /*Execute the 'End of reception' callback function*/
    handle->config->rx_cbhandler();
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	695b      	ldr	r3, [r3, #20]
 8002c40:	4798      	blx	r3
  }
}
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <I2C_MASTER_ProtocolHandler>:
 * @param  handle I2C_MASTER APP handle pointer of type I2C_MASTER_t*
 *
 * @return void
 */
void I2C_MASTER_ProtocolHandler(I2C_MASTER_t * const handle)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  uint32_t psr_status;

  psr_status = XMC_I2C_CH_GetStatusFlag(handle->channel);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7ff fc53 	bl	8002500 <XMC_I2C_CH_GetStatusFlag>
 8002c5a:	60f8      	str	r0, [r7, #12]

  /* Check for nack event */
  if ((handle->config->nack_cbhandler != NULL) && (psr_status & (uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00c      	beq.n	8002c80 <I2C_MASTER_ProtocolHandler+0x38>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f003 0320 	and.w	r3, r3, #32
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d007      	beq.n	8002c80 <I2C_MASTER_ProtocolHandler+0x38>
  {
    I2C_MASTER_ClearFlag(handle,(uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	2120      	movs	r1, #32
 8002c74:	f7ff fd22 	bl	80026bc <I2C_MASTER_ClearFlag>
    handle->config->nack_cbhandler();
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	4798      	blx	r3
  }

  /* Check for arbitration lost */
  if ((handle->config->arbitration_cbhandler != NULL) && (psr_status & (uint32_t)XMC_I2C_CH_STATUS_FLAG_ARBITRATION_LOST))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	69db      	ldr	r3, [r3, #28]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00c      	beq.n	8002ca4 <I2C_MASTER_ProtocolHandler+0x5c>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d007      	beq.n	8002ca4 <I2C_MASTER_ProtocolHandler+0x5c>
  {
    I2C_MASTER_ClearFlag(handle,(uint32_t)XMC_I2C_CH_STATUS_FLAG_ARBITRATION_LOST);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	2140      	movs	r1, #64	; 0x40
 8002c98:	f7ff fd10 	bl	80026bc <I2C_MASTER_ClearFlag>
    handle->config->arbitration_cbhandler();
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	69db      	ldr	r3, [r3, #28]
 8002ca2:	4798      	blx	r3
  }

  /* Check for error detected */
  if ((handle->config->error_cbhandler != NULL) && (psr_status & ((uint32_t)XMC_I2C_CH_STATUS_FLAG_ERROR | (uint32_t)XMC_I2C_CH_STATUS_FLAG_WRONG_TDF_CODE_FOUND)))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00d      	beq.n	8002cca <I2C_MASTER_ProtocolHandler+0x82>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f403 7381 	and.w	r3, r3, #258	; 0x102
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d008      	beq.n	8002cca <I2C_MASTER_ProtocolHandler+0x82>
  {
    I2C_MASTER_ClearFlag(handle,(uint32_t)XMC_I2C_CH_STATUS_FLAG_ERROR);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002cbe:	f7ff fcfd 	bl	80026bc <I2C_MASTER_ClearFlag>
    handle->config->error_cbhandler();
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	6a1b      	ldr	r3, [r3, #32]
 8002cc8:	4798      	blx	r3
  }
}
 8002cca:	3710      	adds	r7, #16
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <I2C_MASTER_lReconfigureRxFIFO>:
 *
 * @return void.
 */

static void I2C_MASTER_lReconfigureRxFIFO(const I2C_MASTER_t * const handle, uint32_t data_size)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b086      	sub	sp, #24
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
  uint32_t minfifo_value;
  uint8_t tx_fifo_size;
  uint8_t rx_fifo_size;
  uint8_t fifo_limit;

  rx_fifo_size = (uint8_t)((uint8_t)1 << handle->config->rxFIFO_size);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	4093      	lsls	r3, r2
 8002ce8:	75bb      	strb	r3, [r7, #22]

  if ((handle->config->txFIFO_size > 0))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d008      	beq.n	8002d08 <I2C_MASTER_lReconfigureRxFIFO+0x38>
  {
    tx_fifo_size = (uint8_t)((uint8_t)1 << handle->config->txFIFO_size);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002cfe:	461a      	mov	r2, r3
 8002d00:	2301      	movs	r3, #1
 8002d02:	4093      	lsls	r3, r2
 8002d04:	75fb      	strb	r3, [r7, #23]
 8002d06:	e001      	b.n	8002d0c <I2C_MASTER_lReconfigureRxFIFO+0x3c>
  }
  else
  {
    tx_fifo_size = 1U;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	75fb      	strb	r3, [r7, #23]
  }

  minfifo_value = (uint32_t)(calculate_minfifosize((uint32_t)tx_fifo_size, (uint32_t)rx_fifo_size));
 8002d0c:	7dfa      	ldrb	r2, [r7, #23]
 8002d0e:	7dbb      	ldrb	r3, [r7, #22]
 8002d10:	4610      	mov	r0, r2
 8002d12:	4619      	mov	r1, r3
 8002d14:	f7ff fc94 	bl	8002640 <calculate_minfifosize>
 8002d18:	6138      	str	r0, [r7, #16]

  fifo_limit = (uint8_t)(calculate_minfifosize(data_size, minfifo_value));
 8002d1a:	6838      	ldr	r0, [r7, #0]
 8002d1c:	6939      	ldr	r1, [r7, #16]
 8002d1e:	f7ff fc8f 	bl	8002640 <calculate_minfifosize>
 8002d22:	4603      	mov	r3, r0
 8002d24:	73fb      	strb	r3, [r7, #15]

  /* Set the limit value */
  I2C_MASTER_SetRXFIFOTriggerLimit((I2C_MASTER_t *)handle, handle->config->rxFIFO_size, ((uint32_t)fifo_limit - 1U));
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002d2e:	461a      	mov	r2, r3
 8002d30:	7bfb      	ldrb	r3, [r7, #15]
 8002d32:	3b01      	subs	r3, #1
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	4611      	mov	r1, r2
 8002d38:	461a      	mov	r2, r3
 8002d3a:	f7ff fbfd 	bl	8002538 <I2C_MASTER_SetRXFIFOTriggerLimit>
}
 8002d3e:	3718      	adds	r7, #24
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d48:	4b04      	ldr	r3, [pc, #16]	; (8002d5c <__NVIC_GetPriorityGrouping+0x18>)
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d50:	0a1b      	lsrs	r3, r3, #8
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr
 8002d5c:	e000ed00 	.word	0xe000ed00

08002d60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	4603      	mov	r3, r0
 8002d68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	db0b      	blt.n	8002d8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d72:	4908      	ldr	r1, [pc, #32]	; (8002d94 <__NVIC_EnableIRQ+0x34>)
 8002d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d78:	095b      	lsrs	r3, r3, #5
 8002d7a:	79fa      	ldrb	r2, [r7, #7]
 8002d7c:	f002 021f 	and.w	r2, r2, #31
 8002d80:	2001      	movs	r0, #1
 8002d82:	fa00 f202 	lsl.w	r2, r0, r2
 8002d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr
 8002d94:	e000e100 	.word	0xe000e100

08002d98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	4603      	mov	r3, r0
 8002da0:	6039      	str	r1, [r7, #0]
 8002da2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	db0a      	blt.n	8002dc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dac:	490d      	ldr	r1, [pc, #52]	; (8002de4 <__NVIC_SetPriority+0x4c>)
 8002dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	b2d2      	uxtb	r2, r2
 8002db6:	0092      	lsls	r2, r2, #2
 8002db8:	b2d2      	uxtb	r2, r2
 8002dba:	440b      	add	r3, r1
 8002dbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8002dc0:	e00a      	b.n	8002dd8 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dc2:	4909      	ldr	r1, [pc, #36]	; (8002de8 <__NVIC_SetPriority+0x50>)
 8002dc4:	79fb      	ldrb	r3, [r7, #7]
 8002dc6:	f003 030f 	and.w	r3, r3, #15
 8002dca:	3b04      	subs	r3, #4
 8002dcc:	683a      	ldr	r2, [r7, #0]
 8002dce:	b2d2      	uxtb	r2, r2
 8002dd0:	0092      	lsls	r2, r2, #2
 8002dd2:	b2d2      	uxtb	r2, r2
 8002dd4:	440b      	add	r3, r1
 8002dd6:	761a      	strb	r2, [r3, #24]
  }
}
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	e000e100 	.word	0xe000e100
 8002de8:	e000ed00 	.word	0xe000ed00

08002dec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b089      	sub	sp, #36	; 0x24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f003 0307 	and.w	r3, r3, #7
 8002dfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	f1c3 0307 	rsb	r3, r3, #7
 8002e06:	2b06      	cmp	r3, #6
 8002e08:	bf28      	it	cs
 8002e0a:	2306      	movcs	r3, #6
 8002e0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	3306      	adds	r3, #6
 8002e12:	2b06      	cmp	r3, #6
 8002e14:	d902      	bls.n	8002e1c <NVIC_EncodePriority+0x30>
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	3b01      	subs	r3, #1
 8002e1a:	e000      	b.n	8002e1e <NVIC_EncodePriority+0x32>
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	2201      	movs	r2, #1
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	1e5a      	subs	r2, r3, #1
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	401a      	ands	r2, r3
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	2101      	movs	r1, #1
 8002e36:	fa01 f303 	lsl.w	r3, r1, r3
 8002e3a:	1e59      	subs	r1, r3, #1
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8002e40:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3724      	adds	r7, #36	; 0x24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop

08002e50 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	460b      	mov	r3, r1
 8002e5a:	70fb      	strb	r3, [r7, #3]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8002e60:	78f8      	ldrb	r0, [r7, #3]
 8002e62:	78fb      	ldrb	r3, [r7, #3]
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	3306      	adds	r3, #6
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	4413      	add	r3, r2
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f023 0207 	bic.w	r2, r3, #7
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 8002e72:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8002e74:	431a      	orrs	r2, r3
 8002e76:	6879      	ldr	r1, [r7, #4]
 8002e78:	1d83      	adds	r3, r0, #6
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	440b      	add	r3, r1
 8002e7e:	605a      	str	r2, [r3, #4]
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop

08002e8c <XMC_USIC_CH_TXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
  channel->TBCTR |= event;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	431a      	orrs	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <XMC_USIC_CH_RXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  channel->RBCTR |= event;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <XMC_USIC_CH_SetMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	460b      	mov	r3, r1
 8002ede:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee4:	f023 020f 	bic.w	r2, r3, #15
 8002ee8:	78fb      	ldrb	r3, [r7, #3]
 8002eea:	431a      	orrs	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop

08002efc <XMC_I2C_CH_Init>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_USIC_CH_Enable()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_Init(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_CONFIG_t *const config)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  XMC_I2C_CH_InitEx(channel, config, true);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	6839      	ldr	r1, [r7, #0]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f7fe fb8a 	bl	8001624 <XMC_I2C_CH_InitEx>
}
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop

08002f18 <XMC_I2C_CH_Start>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_USIC_CH_SetMode()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_Start(XMC_USIC_CH_t *const channel)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_I2C);
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	2104      	movs	r1, #4
 8002f24:	f7ff ffd6 	bl	8002ed4 <XMC_USIC_CH_SetMode>
}
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop

08002f30 <I2C_MASTER_0_disable_io>:
  .baudrate = (uint32_t)(100000U),
  .address  = 0
};

static void I2C_MASTER_0_disable_io(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)5, XMC_GPIO_MODE_INPUT_TRISTATE);
 8002f34:	4805      	ldr	r0, [pc, #20]	; (8002f4c <I2C_MASTER_0_disable_io+0x1c>)
 8002f36:	2105      	movs	r1, #5
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f7fe fb13 	bl	8001564 <XMC_GPIO_SetMode>
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)11, XMC_GPIO_MODE_INPUT_TRISTATE);
 8002f3e:	4803      	ldr	r0, [pc, #12]	; (8002f4c <I2C_MASTER_0_disable_io+0x1c>)
 8002f40:	210b      	movs	r1, #11
 8002f42:	2200      	movs	r2, #0
 8002f44:	f7fe fb0e 	bl	8001564 <XMC_GPIO_SetMode>
}
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	48028000 	.word	0x48028000

08002f50 <I2C_MASTER_0_enable_io>:

static void I2C_MASTER_0_enable_io(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)5, I2C_MASTER_0_sda_pin_config.mode);
 8002f54:	23d0      	movs	r3, #208	; 0xd0
 8002f56:	4806      	ldr	r0, [pc, #24]	; (8002f70 <I2C_MASTER_0_enable_io+0x20>)
 8002f58:	2105      	movs	r1, #5
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	f7fe fb02 	bl	8001564 <XMC_GPIO_SetMode>
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)11, I2C_MASTER_0_scl_pin_config.mode);
 8002f60:	23d0      	movs	r3, #208	; 0xd0
 8002f62:	4803      	ldr	r0, [pc, #12]	; (8002f70 <I2C_MASTER_0_enable_io+0x20>)
 8002f64:	210b      	movs	r1, #11
 8002f66:	461a      	mov	r2, r3
 8002f68:	f7fe fafc 	bl	8001564 <XMC_GPIO_SetMode>
}
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	48028000 	.word	0x48028000

08002f74 <I2C_MASTER_0_init>:
  .config = &I2C_MASTER_0_config,
  .runtime = &I2C_MASTER_0_runtime,
};

void I2C_MASTER_0_init(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 
  const uint32_t tx_fifo_events = (uint32_t)(0);
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	607b      	str	r3, [r7, #4]
  const uint32_t rx_fifo_events = (uint32_t)(XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE | XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD);
 8002f7e:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8002f82:	603b      	str	r3, [r7, #0]
  XMC_I2C_CH_Init(XMC_I2C1_CH0, &I2C_MASTER_0_channel_config);
 8002f84:	4832      	ldr	r0, [pc, #200]	; (8003050 <I2C_MASTER_0_init+0xdc>)
 8002f86:	4933      	ldr	r1, [pc, #204]	; (8003054 <I2C_MASTER_0_init+0xe0>)
 8002f88:	f7ff ffb8 	bl	8002efc <XMC_I2C_CH_Init>

  XMC_USIC_CH_SetInputSource(XMC_I2C1_CH0, XMC_USIC_CH_INPUT_DX0, 1);
 8002f8c:	4830      	ldr	r0, [pc, #192]	; (8003050 <I2C_MASTER_0_init+0xdc>)
 8002f8e:	2100      	movs	r1, #0
 8002f90:	2201      	movs	r2, #1
 8002f92:	f7ff ff5d 	bl	8002e50 <XMC_USIC_CH_SetInputSource>
  XMC_USIC_CH_SetInputSource(XMC_I2C1_CH0, XMC_USIC_CH_INPUT_DX1, 0);
 8002f96:	482e      	ldr	r0, [pc, #184]	; (8003050 <I2C_MASTER_0_init+0xdc>)
 8002f98:	2101      	movs	r1, #1
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f7ff ff58 	bl	8002e50 <XMC_USIC_CH_SetInputSource>

  /* configure i2c tx fifo */
  XMC_USIC_CH_TXFIFO_Configure(XMC_I2C1_CH0,
 8002fa0:	482b      	ldr	r0, [pc, #172]	; (8003050 <I2C_MASTER_0_init+0xdc>)
 8002fa2:	2110      	movs	r1, #16
 8002fa4:	2204      	movs	r2, #4
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	f7fe fe26 	bl	8001bf8 <XMC_USIC_CH_TXFIFO_Configure>
                               16,
                               XMC_USIC_CH_FIFO_SIZE_16WORDS,
                               (uint32_t)1);
  XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_I2C1_CH0,
 8002fac:	4828      	ldr	r0, [pc, #160]	; (8003050 <I2C_MASTER_0_init+0xdc>)
 8002fae:	2110      	movs	r1, #16
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	f7fe fea7 	bl	8001d04 <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>
                                               XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
                                             ((uint32_t)1));
  XMC_USIC_CH_TXFIFO_EnableEvent(XMC_I2C1_CH0, tx_fifo_events);
 8002fb6:	4826      	ldr	r0, [pc, #152]	; (8003050 <I2C_MASTER_0_init+0xdc>)
 8002fb8:	6879      	ldr	r1, [r7, #4]
 8002fba:	f7ff ff67 	bl	8002e8c <XMC_USIC_CH_TXFIFO_EnableEvent>
  /* configure i2c rx fifo */
  XMC_USIC_CH_RXFIFO_Configure(XMC_I2C1_CH0,
 8002fbe:	4824      	ldr	r0, [pc, #144]	; (8003050 <I2C_MASTER_0_init+0xdc>)
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	2204      	movs	r2, #4
 8002fc4:	230f      	movs	r3, #15
 8002fc6:	f7fe fe3f 	bl	8001c48 <XMC_USIC_CH_RXFIFO_Configure>
                               0,
                               XMC_USIC_CH_FIFO_SIZE_16WORDS,
                                (uint32_t)(15));
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_I2C1_CH0,
 8002fca:	4821      	ldr	r0, [pc, #132]	; (8003050 <I2C_MASTER_0_init+0xdc>)
 8002fcc:	2110      	movs	r1, #16
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f7fe feb6 	bl	8001d40 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
                                               XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
                                              ((uint32_t)0x0));
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_I2C1_CH0,
 8002fd4:	481e      	ldr	r0, [pc, #120]	; (8003050 <I2C_MASTER_0_init+0xdc>)
 8002fd6:	2113      	movs	r1, #19
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f7fe feb1 	bl	8001d40 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
                                               XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE,
                                              ((uint32_t)0x0));
  XMC_USIC_CH_RXFIFO_EnableEvent(XMC_I2C1_CH0, rx_fifo_events);
 8002fde:	481c      	ldr	r0, [pc, #112]	; (8003050 <I2C_MASTER_0_init+0xdc>)
 8002fe0:	6839      	ldr	r1, [r7, #0]
 8002fe2:	f7ff ff65 	bl	8002eb0 <XMC_USIC_CH_RXFIFO_EnableEvent>
  XMC_USIC_CH_SetInterruptNodePointer(XMC_I2C1_CH0,
 8002fe6:	481a      	ldr	r0, [pc, #104]	; (8003050 <I2C_MASTER_0_init+0xdc>)
 8002fe8:	2110      	movs	r1, #16
 8002fea:	2202      	movs	r2, #2
 8002fec:	f7fe fe6e 	bl	8001ccc <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
                                       ((uint32_t)2));
  XMC_I2C_CH_Start(XMC_I2C1_CH0);
 8002ff0:	4817      	ldr	r0, [pc, #92]	; (8003050 <I2C_MASTER_0_init+0xdc>)
 8002ff2:	f7ff ff91 	bl	8002f18 <XMC_I2C_CH_Start>

  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)5, &I2C_MASTER_0_sda_pin_config);
 8002ff6:	4818      	ldr	r0, [pc, #96]	; (8003058 <I2C_MASTER_0_init+0xe4>)
 8002ff8:	2105      	movs	r1, #5
 8002ffa:	4a18      	ldr	r2, [pc, #96]	; (800305c <I2C_MASTER_0_init+0xe8>)
 8002ffc:	f7fd fd00 	bl	8000a00 <XMC_GPIO_Init>
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)11, &I2C_MASTER_0_scl_pin_config);
 8003000:	4815      	ldr	r0, [pc, #84]	; (8003058 <I2C_MASTER_0_init+0xe4>)
 8003002:	210b      	movs	r1, #11
 8003004:	4a16      	ldr	r2, [pc, #88]	; (8003060 <I2C_MASTER_0_init+0xec>)
 8003006:	f7fd fcfb 	bl	8000a00 <XMC_GPIO_Init>
/* Tx interrupt priority settings */
  NVIC_SetPriority((IRQn_Type)91, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),63,0));
 800300a:	f7ff fe9b 	bl	8002d44 <__NVIC_GetPriorityGrouping>
 800300e:	4603      	mov	r3, r0
 8003010:	4618      	mov	r0, r3
 8003012:	213f      	movs	r1, #63	; 0x3f
 8003014:	2200      	movs	r2, #0
 8003016:	f7ff fee9 	bl	8002dec <NVIC_EncodePriority>
 800301a:	4603      	mov	r3, r0
 800301c:	205b      	movs	r0, #91	; 0x5b
 800301e:	4619      	mov	r1, r3
 8003020:	f7ff feba 	bl	8002d98 <__NVIC_SetPriority>
  NVIC_EnableIRQ((IRQn_Type)91);/* Rx interrupt priority settings */
 8003024:	205b      	movs	r0, #91	; 0x5b
 8003026:	f7ff fe9b 	bl	8002d60 <__NVIC_EnableIRQ>
  NVIC_SetPriority((IRQn_Type)90, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),63,0));
 800302a:	f7ff fe8b 	bl	8002d44 <__NVIC_GetPriorityGrouping>
 800302e:	4603      	mov	r3, r0
 8003030:	4618      	mov	r0, r3
 8003032:	213f      	movs	r1, #63	; 0x3f
 8003034:	2200      	movs	r2, #0
 8003036:	f7ff fed9 	bl	8002dec <NVIC_EncodePriority>
 800303a:	4603      	mov	r3, r0
 800303c:	205a      	movs	r0, #90	; 0x5a
 800303e:	4619      	mov	r1, r3
 8003040:	f7ff feaa 	bl	8002d98 <__NVIC_SetPriority>
  NVIC_EnableIRQ((IRQn_Type)90);}
 8003044:	205a      	movs	r0, #90	; 0x5a
 8003046:	f7ff fe8b 	bl	8002d60 <__NVIC_EnableIRQ>
 800304a:	3708      	adds	r7, #8
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	48020000 	.word	0x48020000
 8003054:	0800518c 	.word	0x0800518c
 8003058:	48028000 	.word	0x48028000
 800305c:	08005174 	.word	0x08005174
 8003060:	08005180 	.word	0x08005180

08003064 <USIC1_1_IRQHandler>:
/*Transmit ISR*/
void I2C_MASTER_0_TX_HANDLER()
{
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
  I2C_MASTER_TransmitHandler(&I2C_MASTER_0);
 8003068:	4801      	ldr	r0, [pc, #4]	; (8003070 <USIC1_1_IRQHandler+0xc>)
 800306a:	f7ff fb35 	bl	80026d8 <I2C_MASTER_TransmitHandler>
}
 800306e:	bd80      	pop	{r7, pc}
 8003070:	20000034 	.word	0x20000034

08003074 <USIC1_0_IRQHandler>:
/*Receive ISR*/
void I2C_MASTER_0_RX_HANDLER()
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
  I2C_MASTER_ReceiveHandler(&I2C_MASTER_0);
 8003078:	4801      	ldr	r0, [pc, #4]	; (8003080 <USIC1_0_IRQHandler+0xc>)
 800307a:	f7ff fc89 	bl	8002990 <I2C_MASTER_ReceiveHandler>
}
 800307e:	bd80      	pop	{r7, pc}
 8003080:	20000034 	.word	0x20000034

08003084 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003092:	60da      	str	r2, [r3, #12]
}
 8003094:	370c      	adds	r7, #12
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop

080030a0 <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	7b5b      	ldrb	r3, [r3, #13]
 80030ac:	f083 0301 	eor.w	r3, r3, #1
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00f      	beq.n	80030d6 <GLOBAL_CCU4_Init+0x36>
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	689a      	ldr	r2, [r3, #8]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	7b1b      	ldrb	r3, [r3, #12]
 80030be:	4610      	mov	r0, r2
 80030c0:	4619      	mov	r1, r3
 80030c2:	f7fe fa31 	bl	8001528 <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7ff ffda 	bl	8003084 <XMC_CCU4_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3708      	adds	r7, #8
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <XMC_VADC_GLOBAL_DisablePostCalibration>:
 * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
 * None
 */

__STATIC_INLINE void XMC_VADC_GLOBAL_DisablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, uint32_t group_number)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GLOBAL_DisablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_number));
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	3310      	adds	r3, #16
 80030f4:	4619      	mov	r1, r3
 80030f6:	2301      	movs	r3, #1
 80030f8:	408b      	lsls	r3, r1
 80030fa:	431a      	orrs	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <GLOBAL_ADC_Init>:
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/**
 * This function initializes all instances of the ADC Global APP and low level app.
 */
GLOBAL_ADC_STATUS_t GLOBAL_ADC_Init(GLOBAL_ADC_t *const handle_ptr)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_ADC_Init:Invalid handle_ptr", (handle_ptr != NULL));
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  uint32_t group_index;
#endif

  if (GLOBAL_ADC_UNINITIALIZED == handle_ptr->init_state)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	7e1b      	ldrb	r3, [r3, #24]
 8003118:	2b02      	cmp	r3, #2
 800311a:	d149      	bne.n	80031b0 <GLOBAL_ADC_Init+0xa4>
  {  
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	695a      	ldr	r2, [r3, #20]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	4610      	mov	r0, r2
 8003126:	4619      	mov	r1, r3
 8003128:	f7fe fec8 	bl	8001ebc <XMC_VADC_GLOBAL_Init>

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 800312c:	2300      	movs	r3, #0
 800312e:	60fb      	str	r3, [r7, #12]
 8003130:	e02f      	b.n	8003192 <GLOBAL_ADC_Init+0x86>
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	68fa      	ldr	r2, [r7, #12]
 8003136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800313a:	6819      	ldr	r1, [r3, #0]
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	4608      	mov	r0, r1
 8003148:	4619      	mov	r1, r3
 800314a:	f7fe ff5b 	bl	8002004 <XMC_VADC_GROUP_Init>
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);

      /* Switch on the converter of the Group[group_index]*/
      XMC_VADC_GROUP_SetPowerMode(handle_ptr->group_ptrs_array[group_index]->group_handle,
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4618      	mov	r0, r3
 800315a:	2103      	movs	r1, #3
 800315c:	f7fe ffe2 	bl	8002124 <XMC_VADC_GROUP_SetPowerMode>
                                  XMC_VADC_GROUP_POWERMODE_NORMAL);

      /* Disable the post calibration option for the respective group*/
      if ((bool)false == handle_ptr->group_ptrs_array[group_index]->post_calibration)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003168:	7a1b      	ldrb	r3, [r3, #8]
 800316a:	f083 0301 	eor.w	r3, r3, #1
 800316e:	b2db      	uxtb	r3, r3
 8003170:	2b00      	cmp	r3, #0
 8003172:	d005      	beq.n	8003180 <GLOBAL_ADC_Init+0x74>
      {
        XMC_VADC_GLOBAL_DisablePostCalibration(handle_ptr->module_ptr,group_index);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	695b      	ldr	r3, [r3, #20]
 8003178:	4618      	mov	r0, r3
 800317a:	68f9      	ldr	r1, [r7, #12]
 800317c:	f7ff ffb0 	bl	80030e0 <XMC_VADC_GLOBAL_DisablePostCalibration>

#if(XMC_VADC_SHS_AVAILABLE == 1U)
      XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(handle_ptr->global_shs_ptr, (XMC_VADC_GROUP_INDEX_t)group_index);
#endif

      handle_ptr->group_ptrs_array[group_index]->state = GLOBAL_ADC_SUCCESS;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003188:	2200      	movs	r2, #0
 800318a:	725a      	strb	r2, [r3, #9]
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	3301      	adds	r3, #1
 8003190:	60fb      	str	r3, [r7, #12]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2b03      	cmp	r3, #3
 8003196:	d9cc      	bls.n	8003132 <GLOBAL_ADC_Init+0x26>
#endif
#endif /* _XMC_VADC_GROUP_AVAILABLE_ */
#if(XMC_VADC_SHS_AVAILABLE == 1U)
    XMC_VADC_GLOBAL_SHS_SetAnalogReference(handle_ptr->global_shs_ptr, GLOBAL_ADC_AREF_VALUE);
#endif
    if((bool)true == handle_ptr->enable_startup_calibration)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	7e5b      	ldrb	r3, [r3, #25]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d004      	beq.n	80031aa <GLOBAL_ADC_Init+0x9e>
    {
    	XMC_VADC_GLOBAL_StartupCalibration(handle_ptr->module_ptr);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	695b      	ldr	r3, [r3, #20]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7fe fed7 	bl	8001f58 <XMC_VADC_GLOBAL_StartupCalibration>
    }
    handle_ptr->init_state = GLOBAL_ADC_SUCCESS;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	761a      	strb	r2, [r3, #24]
  }
  return (handle_ptr->init_state);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	7e1b      	ldrb	r3, [r3, #24]
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3710      	adds	r7, #16
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031bc:	b480      	push	{r7}
 80031be:	b085      	sub	sp, #20
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f003 0307 	and.w	r3, r3, #7
 80031ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031cc:	4b0c      	ldr	r3, [pc, #48]	; (8003200 <__NVIC_SetPriorityGrouping+0x44>)
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031d2:	68ba      	ldr	r2, [r7, #8]
 80031d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031d8:	4013      	ands	r3, r2
 80031da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80031e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031ec:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 80031ee:	4a04      	ldr	r2, [pc, #16]	; (8003200 <__NVIC_SetPriorityGrouping+0x44>)
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	60d3      	str	r3, [r2, #12]
}
 80031f4:	3714      	adds	r7, #20
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	e000ed00 	.word	0xe000ed00

08003204 <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 800320a:	2001      	movs	r0, #1
 800320c:	f7ff ffd6 	bl	80031bc <__NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003210:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 8003212:	4b21      	ldr	r3, [pc, #132]	; (8003298 <SystemCoreSetup+0x94>)
 8003214:	4a21      	ldr	r2, [pc, #132]	; (800329c <SystemCoreSetup+0x98>)
 8003216:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003218:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800321c:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 800321e:	4a1e      	ldr	r2, [pc, #120]	; (8003298 <SystemCoreSetup+0x94>)
 8003220:	4b1d      	ldr	r3, [pc, #116]	; (8003298 <SystemCoreSetup+0x94>)
 8003222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003226:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800322a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 800322e:	4b1c      	ldr	r3, [pc, #112]	; (80032a0 <SystemCoreSetup+0x9c>)
 8003230:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003234:	3314      	adds	r3, #20
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f023 030f 	bic.w	r3, r3, #15
 8003240:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f043 0303 	orr.w	r3, r3, #3
 8003248:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 800324a:	4b15      	ldr	r3, [pc, #84]	; (80032a0 <SystemCoreSetup+0x9c>)
 800324c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003250:	3314      	adds	r3, #20
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	601a      	str	r2, [r3, #0]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 8003256:	4a10      	ldr	r2, [pc, #64]	; (8003298 <SystemCoreSetup+0x94>)
 8003258:	4b0f      	ldr	r3, [pc, #60]	; (8003298 <SystemCoreSetup+0x94>)
 800325a:	695b      	ldr	r3, [r3, #20]
 800325c:	f023 0310 	bic.w	r3, r3, #16
 8003260:	6153      	str	r3, [r2, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 8003262:	4a0d      	ldr	r2, [pc, #52]	; (8003298 <SystemCoreSetup+0x94>)
 8003264:	4b0c      	ldr	r3, [pc, #48]	; (8003298 <SystemCoreSetup+0x94>)
 8003266:	695b      	ldr	r3, [r3, #20]
 8003268:	f023 0308 	bic.w	r3, r3, #8
 800326c:	6153      	str	r3, [r2, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800326e:	4a0a      	ldr	r2, [pc, #40]	; (8003298 <SystemCoreSetup+0x94>)
 8003270:	4b09      	ldr	r3, [pc, #36]	; (8003298 <SystemCoreSetup+0x94>)
 8003272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003274:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003278:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 800327a:	4a07      	ldr	r2, [pc, #28]	; (8003298 <SystemCoreSetup+0x94>)
 800327c:	4b06      	ldr	r3, [pc, #24]	; (8003298 <SystemCoreSetup+0x94>)
 800327e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003280:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003284:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 8003286:	4a04      	ldr	r2, [pc, #16]	; (8003298 <SystemCoreSetup+0x94>)
 8003288:	4b03      	ldr	r3, [pc, #12]	; (8003298 <SystemCoreSetup+0x94>)
 800328a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003290:	6253      	str	r3, [r2, #36]	; 0x24
}
 8003292:	3708      	adds	r7, #8
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	e000ed00 	.word	0xe000ed00
 800329c:	08000000 	.word	0x08000000
 80032a0:	58001000 	.word	0x58001000

080032a4 <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 80032ac:	2300      	movs	r3, #0
 80032ae:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	701a      	strb	r2, [r3, #0]

  return (status);
 80032b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3714      	adds	r7, #20
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 80032c8:	4b02      	ldr	r3, [pc, #8]	; (80032d4 <OSCHP_GetFrequency+0x10>)
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr
 80032d4:	00b71b00 	.word	0x00b71b00

080032d8 <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 80032d8:	b5b0      	push	{r4, r5, r7, lr}
 80032da:	b086      	sub	sp, #24
 80032dc:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 80032de:	4b13      	ldr	r3, [pc, #76]	; (800332c <SystemCoreClockSetup+0x54>)
 80032e0:	1d3c      	adds	r4, r7, #4
 80032e2:	461d      	mov	r5, r3
 80032e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032e8:	682b      	ldr	r3, [r5, #0]
 80032ea:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 80032ec:	1d3b      	adds	r3, r7, #4
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7fd fc80 	bl	8000bf4 <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 80032f4:	2000      	movs	r0, #0
 80032f6:	f7fd fda5 	bl	8000e44 <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 80032fa:	2000      	movs	r0, #0
 80032fc:	f7fd fd5a 	bl	8000db4 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(4U);
 8003300:	2004      	movs	r0, #4
 8003302:	f7fd fe2b 	bl	8000f5c <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_EnableUsbPll();
 8003306:	f7fd fe75 	bl	8000ff4 <XMC_SCU_CLOCK_EnableUsbPll>
  XMC_SCU_CLOCK_StartUsbPll(1U, 32U);
 800330a:	2001      	movs	r0, #1
 800330c:	2120      	movs	r1, #32
 800330e:	f7fd fe81 	bl	8001014 <XMC_SCU_CLOCK_StartUsbPll>

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 8003312:	2000      	movs	r0, #0
 8003314:	f7fd fd62 	bl	8000ddc <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 8003318:	2001      	movs	r0, #1
 800331a:	f7fd fe47 	bl	8000fac <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 800331e:	2001      	movs	r0, #1
 8003320:	f7fd fe30 	bl	8000f84 <XMC_SCU_CLOCK_SetEbuClockDivider>
#endif

}
 8003324:	3718      	adds	r7, #24
 8003326:	46bd      	mov	sp, r7
 8003328:	bdb0      	pop	{r4, r5, r7, pc}
 800332a:	bf00      	nop
 800332c:	08005228 	.word	0x08005228

08003330 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003330:	b480      	push	{r7}
 8003332:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003334:	4b04      	ldr	r3, [pc, #16]	; (8003348 <__NVIC_GetPriorityGrouping+0x18>)
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800333c:	0a1b      	lsrs	r3, r3, #8
}
 800333e:	4618      	mov	r0, r3
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr
 8003348:	e000ed00 	.word	0xe000ed00

0800334c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	4603      	mov	r3, r0
 8003354:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800335a:	2b00      	cmp	r3, #0
 800335c:	db0b      	blt.n	8003376 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800335e:	4908      	ldr	r1, [pc, #32]	; (8003380 <__NVIC_EnableIRQ+0x34>)
 8003360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003364:	095b      	lsrs	r3, r3, #5
 8003366:	79fa      	ldrb	r2, [r7, #7]
 8003368:	f002 021f 	and.w	r2, r2, #31
 800336c:	2001      	movs	r0, #1
 800336e:	fa00 f202 	lsl.w	r2, r0, r2
 8003372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr
 8003380:	e000e100 	.word	0xe000e100

08003384 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	4603      	mov	r3, r0
 800338c:	6039      	str	r1, [r7, #0]
 800338e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003394:	2b00      	cmp	r3, #0
 8003396:	db0a      	blt.n	80033ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003398:	490d      	ldr	r1, [pc, #52]	; (80033d0 <__NVIC_SetPriority+0x4c>)
 800339a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	b2d2      	uxtb	r2, r2
 80033a2:	0092      	lsls	r2, r2, #2
 80033a4:	b2d2      	uxtb	r2, r2
 80033a6:	440b      	add	r3, r1
 80033a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80033ac:	e00a      	b.n	80033c4 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ae:	4909      	ldr	r1, [pc, #36]	; (80033d4 <__NVIC_SetPriority+0x50>)
 80033b0:	79fb      	ldrb	r3, [r7, #7]
 80033b2:	f003 030f 	and.w	r3, r3, #15
 80033b6:	3b04      	subs	r3, #4
 80033b8:	683a      	ldr	r2, [r7, #0]
 80033ba:	b2d2      	uxtb	r2, r2
 80033bc:	0092      	lsls	r2, r2, #2
 80033be:	b2d2      	uxtb	r2, r2
 80033c0:	440b      	add	r3, r1
 80033c2:	761a      	strb	r2, [r3, #24]
  }
}
 80033c4:	370c      	adds	r7, #12
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	e000e100 	.word	0xe000e100
 80033d4:	e000ed00 	.word	0xe000ed00

080033d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033d8:	b480      	push	{r7}
 80033da:	b089      	sub	sp, #36	; 0x24
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f003 0307 	and.w	r3, r3, #7
 80033ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	f1c3 0307 	rsb	r3, r3, #7
 80033f2:	2b06      	cmp	r3, #6
 80033f4:	bf28      	it	cs
 80033f6:	2306      	movcs	r3, #6
 80033f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	3306      	adds	r3, #6
 80033fe:	2b06      	cmp	r3, #6
 8003400:	d902      	bls.n	8003408 <NVIC_EncodePriority+0x30>
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	3b01      	subs	r3, #1
 8003406:	e000      	b.n	800340a <NVIC_EncodePriority+0x32>
 8003408:	2300      	movs	r3, #0
 800340a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	2201      	movs	r2, #1
 8003410:	fa02 f303 	lsl.w	r3, r2, r3
 8003414:	1e5a      	subs	r2, r3, #1
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	401a      	ands	r2, r3
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	2101      	movs	r1, #1
 8003422:	fa01 f303 	lsl.w	r3, r1, r3
 8003426:	1e59      	subs	r1, r3, #1
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 800342c:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 800342e:	4618      	mov	r0, r3
 8003430:	3724      	adds	r7, #36	; 0x24
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop

0800343c <XMC_VADC_GLOBAL_BackgroundTriggerConversion>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundTriggerConversion(XMC_VADC_GLOBAL_t *const global_ptr)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundTriggerConversion:Wrong Module Pointer", (global_ptr == VADC))
  global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_LDEV_Msk;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800344a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop

08003460 <XMC_VADC_GLOBAL_BackgroundAddChannelToSequence>:
 *  XMC_VADC_GLOBAL_BackgroundAddMultipleChannels()<BR>
 */
__STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(XMC_VADC_GLOBAL_t *const global_ptr,
    const uint32_t grp_num,
    const uint32_t ch_num)
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Group Number", ((grp_num) < XMC_VADC_MAXIMUM_NUM_GROUPS))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Channel Number",
             ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))

  global_ptr->BRSSEL[grp_num] |= (uint32_t)((uint32_t)1 << ch_num);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	68ba      	ldr	r2, [r7, #8]
 8003470:	3260      	adds	r2, #96	; 0x60
 8003472:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2101      	movs	r1, #1
 800347a:	fa01 f303 	lsl.w	r3, r1, r3
 800347e:	ea42 0103 	orr.w	r1, r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	68ba      	ldr	r2, [r7, #8]
 8003486:	3260      	adds	r2, #96	; 0x60
 8003488:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800348c:	3714      	adds	r7, #20
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop

08003498 <XMC_VADC_GROUP_ResultInit>:
 * XMC_VADC_GROUP_AddResultToFifo()<BR> XMC_VADC_GROUP_EnableResultEvent()<br> XMC_VADC_GROUP_DisableResultEvent()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_ResultInit(XMC_VADC_GROUP_t *const group_ptr,
    const uint32_t res_reg_num,
    const XMC_VADC_RESULT_CONFIG_t *config)
{
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_ResultInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->RCR[res_reg_num] = config->g_rcr;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6819      	ldr	r1, [r3, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	68ba      	ldr	r2, [r7, #8]
 80034ac:	32a0      	adds	r2, #160	; 0xa0
 80034ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 80034b2:	3714      	adds	r7, #20
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <XMC_VADC_GROUP_GetResult>:
 * \par<b>Related APIs:</b><br>
 * XMC_VADC_GROUP_GetDetailedResult().
 */
__STATIC_INLINE XMC_VADC_RESULT_SIZE_t XMC_VADC_GROUP_GetResult(XMC_VADC_GROUP_t *const group_ptr,
    const uint32_t res_reg)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))

  return ((XMC_VADC_RESULT_SIZE_t)group_ptr->RES[res_reg]);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	683a      	ldr	r2, [r7, #0]
 80034ca:	32c0      	adds	r2, #192	; 0xc0
 80034cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034d0:	b29b      	uxth	r3, r3
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop

080034e0 <ADC_MEASUREMENT_Init>:
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Initialization routine to call ADC LLD API's */
ADC_MEASUREMENT_STATUS_t ADC_MEASUREMENT_Init(ADC_MEASUREMENT_t *const handle_ptr)
{
 80034e0:	b590      	push	{r4, r7, lr}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  uint8_t j;
  ADC_MEASUREMENT_STATUS_t status;

  XMC_ASSERT("ADC_MEASUREMENT_Init:Invalid handle_ptr", (handle_ptr != NULL));

  if (ADC_MEASUREMENT_STATUS_UNINITIALIZED == handle_ptr->init_state)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	7e1b      	ldrb	r3, [r3, #24]
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	f040 8099 	bne.w	8003624 <ADC_MEASUREMENT_Init+0x144>
  {
    /* Call the function to initialise Clock and ADC global functional units*/
    status = (ADC_MEASUREMENT_STATUS_t) GLOBAL_ADC_Init(handle_ptr->global_handle);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7ff fe08 	bl	800310c <GLOBAL_ADC_Init>
 80034fc:	4603      	mov	r3, r0
 80034fe:	73bb      	strb	r3, [r7, #14]
  
    /*Initialize the Global Conversion class 0*/
    XMC_VADC_GLOBAL_InputClassInit(handle_ptr->global_handle->module_ptr,*handle_ptr->iclass_config_handle,
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	695a      	ldr	r2, [r3, #20]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	4610      	mov	r0, r2
 800350c:	6819      	ldr	r1, [r3, #0]
 800350e:	2200      	movs	r2, #0
 8003510:	2300      	movs	r3, #0
 8003512:	f7fe fcfd 	bl	8001f10 <XMC_VADC_GLOBAL_InputClassInit>
    XMC_VADC_GLOBAL_InputClassInit(handle_ptr->global_handle->module_ptr,*handle_ptr->iclass_config_handle,
                                      XMC_VADC_GROUP_CONV_STD,ADC_MEASUREMENT_ICLASS_NUM_XMC11);
#endif
  
    /* Initialize the Background Scan hardware */
    XMC_VADC_GLOBAL_BackgroundInit(handle_ptr->global_handle->module_ptr, handle_ptr->backgnd_config_handle);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	695a      	ldr	r2, [r3, #20]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	4610      	mov	r0, r2
 8003522:	4619      	mov	r1, r3
 8003524:	f7fe fe1a 	bl	800215c <XMC_VADC_GLOBAL_BackgroundInit>
#if (XMC_VADC_GROUP_AVAILABLE == 0U)
    /* Initialize the global result register */
    XMC_VADC_GLOBAL_ResultInit(handle_ptr->global_handle->module_ptr,handle_ptr->array->res_handle);
#endif

    for (j = (uint8_t)0; j < (uint8_t)ADC_MEASUREMENT_MAXCHANNELS; j++)
 8003528:	2300      	movs	r3, #0
 800352a:	73fb      	strb	r3, [r7, #15]
 800352c:	e02e      	b.n	800358c <ADC_MEASUREMENT_Init+0xac>
    {
      indexed = handle_ptr->array->channel_array[j];
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	7bfa      	ldrb	r2, [r7, #15]
 8003534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003538:	60bb      	str	r3, [r7, #8]
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
      /* Initialize for configured channels*/
      XMC_VADC_GROUP_ChannelInit(indexed->group_handle,(uint32_t)indexed->ch_num, indexed->ch_handle);
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	689a      	ldr	r2, [r3, #8]
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	7b5b      	ldrb	r3, [r3, #13]
 8003542:	4619      	mov	r1, r3
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4610      	mov	r0, r2
 800354a:	461a      	mov	r2, r3
 800354c:	f7fe fe84 	bl	8002258 <XMC_VADC_GROUP_ChannelInit>
  
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	689a      	ldr	r2, [r3, #8]
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	789b      	ldrb	r3, [r3, #2]
 800355a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800355e:	b2db      	uxtb	r3, r3
 8003560:	4619      	mov	r1, r3
                                indexed->res_handle);
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	685b      	ldr	r3, [r3, #4]
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
      /* Initialize for configured channels*/
      XMC_VADC_GROUP_ChannelInit(indexed->group_handle,(uint32_t)indexed->ch_num, indexed->ch_handle);
  
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
 8003566:	4610      	mov	r0, r2
 8003568:	461a      	mov	r2, r3
 800356a:	f7ff ff95 	bl	8003498 <XMC_VADC_GROUP_ResultInit>
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	695a      	ldr	r2, [r3, #20]
                                                     (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	7b1b      	ldrb	r3, [r3, #12]
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 8003578:	4619      	mov	r1, r3
                                                     (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	7b5b      	ldrb	r3, [r3, #13]
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 800357e:	4610      	mov	r0, r2
 8003580:	461a      	mov	r2, r3
 8003582:	f7ff ff6d 	bl	8003460 <XMC_VADC_GLOBAL_BackgroundAddChannelToSequence>
#if (XMC_VADC_GROUP_AVAILABLE == 0U)
    /* Initialize the global result register */
    XMC_VADC_GLOBAL_ResultInit(handle_ptr->global_handle->module_ptr,handle_ptr->array->res_handle);
#endif

    for (j = (uint8_t)0; j < (uint8_t)ADC_MEASUREMENT_MAXCHANNELS; j++)
 8003586:	7bfb      	ldrb	r3, [r7, #15]
 8003588:	3301      	adds	r3, #1
 800358a:	73fb      	strb	r3, [r7, #15]
 800358c:	7bfb      	ldrb	r3, [r7, #15]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d0cd      	beq.n	800352e <ADC_MEASUREMENT_Init+0x4e>
        status |= (ADC_MEASUREMENT_STATUS_t) ANALOG_IO_Init(indexed->analog_io_config);
      }
#endif
    }
#if(UC_SERIES != XMC11)
    if ((handle_ptr->backgnd_config_handle->req_src_interrupt) && (handle_ptr->req_src_intr_handle != NULL ))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	7a1b      	ldrb	r3, [r3, #8]
 8003598:	f003 0308 	and.w	r3, r3, #8
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d02c      	beq.n	80035fc <ADC_MEASUREMENT_Init+0x11c>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d028      	beq.n	80035fc <ADC_MEASUREMENT_Init+0x11c>
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	b2dc      	uxtb	r4, r3
 80035b2:	f7ff febd 	bl	8003330 <__NVIC_GetPriorityGrouping>
 80035b6:	4601      	mov	r1, r0
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	691b      	ldr	r3, [r3, #16]
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 80035bc:	685a      	ldr	r2, [r3, #4]
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	691b      	ldr	r3, [r3, #16]
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	4608      	mov	r0, r1
 80035c6:	4611      	mov	r1, r2
 80035c8:	461a      	mov	r2, r3
 80035ca:	f7ff ff05 	bl	80033d8 <NVIC_EncodePriority>
 80035ce:	4602      	mov	r2, r0
 80035d0:	b263      	sxtb	r3, r4
 80035d2:	4618      	mov	r0, r3
 80035d4:	4611      	mov	r1, r2
 80035d6:	f7ff fed5 	bl	8003384 <__NVIC_SetPriority>
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
#endif
      /* Connect background Request Source Event to NVIC node */
      XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(handle_ptr->global_handle->module_ptr,
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	695a      	ldr	r2, [r3, #20]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	7e5b      	ldrb	r3, [r3, #25]
 80035e4:	4610      	mov	r0, r2
 80035e6:	4619      	mov	r1, r3
 80035e8:	f7fe fce8 	bl	8001fbc <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode>
                                                 (XMC_VADC_SR_t) handle_ptr->srv_req_node);
    
      /* Enable Background Scan Request source IRQ */
      NVIC_EnableIRQ((IRQn_Type)handle_ptr->req_src_intr_handle->node_id);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	b25b      	sxtb	r3, r3
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7ff fea8 	bl	800334c <__NVIC_EnableIRQ>
    /* Enable Background Scan Request source IRQ */
    NVIC_EnableIRQ((IRQn_Type)handle_ptr->result_intr_handle->node_id);
#endif
#endif
    /* Mux Configuration is done*/
    if (handle_ptr->mux_config != NULL)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	695b      	ldr	r3, [r3, #20]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d002      	beq.n	800360a <ADC_MEASUREMENT_Init+0x12a>
    {
      (handle_ptr->mux_config)();
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	695b      	ldr	r3, [r3, #20]
 8003608:	4798      	blx	r3
    }
  
    if (handle_ptr->start_conversion != (bool)false)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	7e9b      	ldrb	r3, [r3, #26]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d005      	beq.n	800361e <ADC_MEASUREMENT_Init+0x13e>
    {
      /* Start conversion manually using load event trigger*/
      XMC_VADC_GLOBAL_BackgroundTriggerConversion(handle_ptr->global_handle->module_ptr);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	695b      	ldr	r3, [r3, #20]
 8003618:	4618      	mov	r0, r3
 800361a:	f7ff ff0f 	bl	800343c <XMC_VADC_GLOBAL_BackgroundTriggerConversion>
    }
    handle_ptr->init_state = status;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	7bba      	ldrb	r2, [r7, #14]
 8003622:	761a      	strb	r2, [r3, #24]
  }
  return (handle_ptr->init_state);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	7e1b      	ldrb	r3, [r3, #24]
}
 8003628:	4618      	mov	r0, r3
 800362a:	3714      	adds	r7, #20
 800362c:	46bd      	mov	sp, r7
 800362e:	bd90      	pop	{r4, r7, pc}

08003630 <ADC_MEASUREMENT_StartConversion>:
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

/* This API will Software trigger ADC Background request source and starts conversion*/
void ADC_MEASUREMENT_StartConversion(ADC_MEASUREMENT_t *const handle_ptr)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("ADC_MEASUREMENT_Start:Invalid handle_ptr", (handle_ptr != NULL));

  /* Generate a load event to start background request source conversion*/
  XMC_VADC_GLOBAL_BackgroundTriggerConversion(handle_ptr->global_handle->module_ptr);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	695b      	ldr	r3, [r3, #20]
 800363e:	4618      	mov	r0, r3
 8003640:	f7ff fefc 	bl	800343c <XMC_VADC_GLOBAL_BackgroundTriggerConversion>
}
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop

0800364c <ADC_MEASUREMENT_GetResult>:
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
#if(XMC_VADC_GROUP_AVAILABLE == 1U)
/* This API will get the result of a conversion for a specific channel*/
XMC_VADC_RESULT_SIZE_t ADC_MEASUREMENT_GetResult(ADC_MEASUREMENT_CHANNEL_t *const handle_ptr)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  XMC_VADC_RESULT_SIZE_t result;

  XMC_ASSERT("ADC_MEASUREMENT_GetResult:Invalid handle_ptr", (handle_ptr != NULL));

  result = XMC_VADC_GROUP_GetResult(handle_ptr->group_handle, handle_ptr->ch_handle->result_reg_number);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689a      	ldr	r2, [r3, #8]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	789b      	ldrb	r3, [r3, #2]
 800365e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003662:	b2db      	uxtb	r3, r3
 8003664:	4610      	mov	r0, r2
 8003666:	4619      	mov	r1, r3
 8003668:	f7ff ff28 	bl	80034bc <XMC_VADC_GROUP_GetResult>
 800366c:	4603      	mov	r3, r0
 800366e:	81fb      	strh	r3, [r7, #14]

  return (result);
 8003670:	89fb      	ldrh	r3, [r7, #14]
}
 8003672:	4618      	mov	r0, r3
 8003674:	3710      	adds	r7, #16
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop

0800367c <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
__WEAK DAVE_STATUS_t DAVE_Init(void)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 8003682:	2300      	movs	r3, #0
 8003684:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 8003686:	4811      	ldr	r0, [pc, #68]	; (80036cc <DAVE_Init+0x50>)
 8003688:	f7ff fe0c 	bl	80032a4 <CLOCK_XMC4_Init>
 800368c:	4603      	mov	r3, r0
 800368e:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 8003690:	79fb      	ldrb	r3, [r7, #7]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d104      	bne.n	80036a0 <DAVE_Init+0x24>
  {
	 /**  Initialization of I2C_MASTER APP instance I2C_MASTER_0 */
	 init_status = (DAVE_STATUS_t)I2C_MASTER_Init(&I2C_MASTER_0); 
 8003696:	480e      	ldr	r0, [pc, #56]	; (80036d0 <DAVE_Init+0x54>)
 8003698:	f7fe ffe8 	bl	800266c <I2C_MASTER_Init>
 800369c:	4603      	mov	r3, r0
 800369e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80036a0:	79fb      	ldrb	r3, [r7, #7]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d104      	bne.n	80036b0 <DAVE_Init+0x34>
  {
	 /**  Initialization of ADC_MEASUREMENT APP instance ADC_MEASUREMENT_0 */
	 init_status = (DAVE_STATUS_t)ADC_MEASUREMENT_Init(&ADC_MEASUREMENT_0); 
 80036a6:	480b      	ldr	r0, [pc, #44]	; (80036d4 <DAVE_Init+0x58>)
 80036a8:	f7ff ff1a 	bl	80034e0 <ADC_MEASUREMENT_Init>
 80036ac:	4603      	mov	r3, r0
 80036ae:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80036b0:	79fb      	ldrb	r3, [r7, #7]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d104      	bne.n	80036c0 <DAVE_Init+0x44>
  {
	 /**  Initialization of GLOBAL_CCU4 APP instance GLOBAL_CCU4_0 */
	 init_status = (DAVE_STATUS_t)GLOBAL_CCU4_Init(&GLOBAL_CCU4_0); 
 80036b6:	4808      	ldr	r0, [pc, #32]	; (80036d8 <DAVE_Init+0x5c>)
 80036b8:	f7ff fcf2 	bl	80030a0 <GLOBAL_CCU4_Init>
 80036bc:	4603      	mov	r3, r0
 80036be:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 80036c0:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 80036c2:	4618      	mov	r0, r3
 80036c4:	3708      	adds	r7, #8
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	20000348 	.word	0x20000348
 80036d0:	20000034 	.word	0x20000034
 80036d4:	200000bc 	.word	0x200000bc
 80036d8:	20000040 	.word	0x20000040

080036dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	4603      	mov	r3, r0
 80036e4:	6039      	str	r1, [r7, #0]
 80036e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	db0a      	blt.n	8003706 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036f0:	490d      	ldr	r1, [pc, #52]	; (8003728 <__NVIC_SetPriority+0x4c>)
 80036f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f6:	683a      	ldr	r2, [r7, #0]
 80036f8:	b2d2      	uxtb	r2, r2
 80036fa:	0092      	lsls	r2, r2, #2
 80036fc:	b2d2      	uxtb	r2, r2
 80036fe:	440b      	add	r3, r1
 8003700:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8003704:	e00a      	b.n	800371c <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003706:	4909      	ldr	r1, [pc, #36]	; (800372c <__NVIC_SetPriority+0x50>)
 8003708:	79fb      	ldrb	r3, [r7, #7]
 800370a:	f003 030f 	and.w	r3, r3, #15
 800370e:	3b04      	subs	r3, #4
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	b2d2      	uxtb	r2, r2
 8003714:	0092      	lsls	r2, r2, #2
 8003716:	b2d2      	uxtb	r2, r2
 8003718:	440b      	add	r3, r1
 800371a:	761a      	strb	r2, [r3, #24]
  }
}
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	e000e100 	.word	0xe000e100
 800372c:	e000ed00 	.word	0xe000ed00

08003730 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	3b01      	subs	r3, #1
 800373c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003740:	d301      	bcc.n	8003746 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003742:	2301      	movs	r3, #1
 8003744:	e00f      	b.n	8003766 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003746:	4a0a      	ldr	r2, [pc, #40]	; (8003770 <SysTick_Config+0x40>)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	3b01      	subs	r3, #1
 800374c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800374e:	f04f 30ff 	mov.w	r0, #4294967295
 8003752:	213f      	movs	r1, #63	; 0x3f
 8003754:	f7ff ffc2 	bl	80036dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003758:	4b05      	ldr	r3, [pc, #20]	; (8003770 <SysTick_Config+0x40>)
 800375a:	2200      	movs	r2, #0
 800375c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800375e:	4b04      	ldr	r3, [pc, #16]	; (8003770 <SysTick_Config+0x40>)
 8003760:	2207      	movs	r2, #7
 8003762:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	e000e010 	.word	0xe000e010

08003774 <VADC0_C0_2_IRQHandler>:
#include <string.h>

//ADC MEASUREMENT
uint16_t result;
uint16_t Adc_Measurement_Handler()
{
 8003774:	b580      	push	{r7, lr}
 8003776:	af00      	add	r7, sp, #0
	//Get result from ADC-Converter
	result = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_A);			//results for 12bit: 0...4096 => 0...3.3V
 8003778:	4806      	ldr	r0, [pc, #24]	; (8003794 <VADC0_C0_2_IRQHandler+0x20>)
 800377a:	f7ff ff67 	bl	800364c <ADC_MEASUREMENT_GetResult>
 800377e:	4603      	mov	r3, r0
 8003780:	461a      	mov	r2, r3
 8003782:	4b05      	ldr	r3, [pc, #20]	; (8003798 <VADC0_C0_2_IRQHandler+0x24>)
 8003784:	801a      	strh	r2, [r3, #0]
	ADC_MEASUREMENT_StartConversion(&ADC_MEASUREMENT_0);
 8003786:	4805      	ldr	r0, [pc, #20]	; (800379c <VADC0_C0_2_IRQHandler+0x28>)
 8003788:	f7ff ff52 	bl	8003630 <ADC_MEASUREMENT_StartConversion>

	return result;
 800378c:	4b02      	ldr	r3, [pc, #8]	; (8003798 <VADC0_C0_2_IRQHandler+0x24>)
 800378e:	881b      	ldrh	r3, [r3, #0]
}
 8003790:	4618      	mov	r0, r3
 8003792:	bd80      	pop	{r7, pc}
 8003794:	200000a8 	.word	0x200000a8
 8003798:	2000036c 	.word	0x2000036c
 800379c:	200000bc 	.word	0x200000bc

080037a0 <SysTick_Handler>:

//DISPLAY
uint32_t SysTickCnt = 0;
void SysTick_Handler() {
 80037a0:	b480      	push	{r7}
 80037a2:	af00      	add	r7, sp, #0
	SysTickCnt++;
 80037a4:	4b04      	ldr	r3, [pc, #16]	; (80037b8 <SysTick_Handler+0x18>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	3301      	adds	r3, #1
 80037aa:	4a03      	ldr	r2, [pc, #12]	; (80037b8 <SysTick_Handler+0x18>)
 80037ac:	6013      	str	r3, [r2, #0]
}
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	20000350 	.word	0x20000350

080037bc <delay_ms>:

void delay_ms(uint32_t ms) {
 80037bc:	b480      	push	{r7}
 80037be:	b085      	sub	sp, #20
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
	uint32_t now = SysTickCnt;
 80037c4:	4b08      	ldr	r3, [pc, #32]	; (80037e8 <delay_ms+0x2c>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	60fb      	str	r3, [r7, #12]
	while((now + ms) > SysTickCnt) __NOP();
 80037ca:	e000      	b.n	80037ce <delay_ms+0x12>
 80037cc:	bf00      	nop
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	441a      	add	r2, r3
 80037d4:	4b04      	ldr	r3, [pc, #16]	; (80037e8 <delay_ms+0x2c>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d8f7      	bhi.n	80037cc <delay_ms+0x10>
}
 80037dc:	3714      	adds	r7, #20
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	20000350 	.word	0x20000350

080037ec <ssd1306_text>:

//WRITE STRING ON DISPLAY
void ssd1306_text(char *data1, char *data2, char *data3){
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	607a      	str	r2, [r7, #4]
	ssd1306_Fill(Black);
 80037f8:	2000      	movs	r0, #0
 80037fa:	f7fc ff4f 	bl	800069c <ssd1306_Fill>
	ssd1306_SetCursor(2, 1);
 80037fe:	2002      	movs	r0, #2
 8003800:	2101      	movs	r1, #1
 8003802:	f7fd f8b7 	bl	8000974 <ssd1306_SetCursor>
	ssd1306_WriteString(data1, Font_6x8, White);
 8003806:	4b11      	ldr	r3, [pc, #68]	; (800384c <ssd1306_text+0x60>)
 8003808:	68f8      	ldr	r0, [r7, #12]
 800380a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800380e:	2301      	movs	r3, #1
 8003810:	f7fd f886 	bl	8000920 <ssd1306_WriteString>
	ssd1306_SetCursor(2, 12);
 8003814:	2002      	movs	r0, #2
 8003816:	210c      	movs	r1, #12
 8003818:	f7fd f8ac 	bl	8000974 <ssd1306_SetCursor>
	ssd1306_WriteString(data2, Font_6x8, White);
 800381c:	4b0b      	ldr	r3, [pc, #44]	; (800384c <ssd1306_text+0x60>)
 800381e:	68b8      	ldr	r0, [r7, #8]
 8003820:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003824:	2301      	movs	r3, #1
 8003826:	f7fd f87b 	bl	8000920 <ssd1306_WriteString>
	ssd1306_SetCursor(2, 24);
 800382a:	2002      	movs	r0, #2
 800382c:	2118      	movs	r1, #24
 800382e:	f7fd f8a1 	bl	8000974 <ssd1306_SetCursor>
	ssd1306_WriteString(data3, Font_6x8, White);
 8003832:	4b06      	ldr	r3, [pc, #24]	; (800384c <ssd1306_text+0x60>)
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	e893 0006 	ldmia.w	r3, {r1, r2}
 800383a:	2301      	movs	r3, #1
 800383c:	f7fd f870 	bl	8000920 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8003840:	f7fc ff4e 	bl	80006e0 <ssd1306_UpdateScreen>
}
 8003844:	3710      	adds	r7, #16
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	20000000 	.word	0x20000000

08003850 <float2string>:

void float2string(float value, char *variable, char *unit, char *str){
 8003850:	b580      	push	{r7, lr}
 8003852:	b08e      	sub	sp, #56	; 0x38
 8003854:	af04      	add	r7, sp, #16
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
 800385c:	603b      	str	r3, [r7, #0]
	//uint16_t to string: from stackoverflow.com/questions/905928/using-floats-with-sprintf-in-embedded-c
	char *tmpSign = (value < 0) ? "-" : "";
 800385e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003862:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800386a:	d501      	bpl.n	8003870 <float2string+0x20>
 800386c:	4b26      	ldr	r3, [pc, #152]	; (8003908 <float2string+0xb8>)
 800386e:	e000      	b.n	8003872 <float2string+0x22>
 8003870:	4b26      	ldr	r3, [pc, #152]	; (800390c <float2string+0xbc>)
 8003872:	627b      	str	r3, [r7, #36]	; 0x24
	float tmpVal = (value < 0) ? -value : value;
 8003874:	edd7 7a03 	vldr	s15, [r7, #12]
 8003878:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800387c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003880:	d504      	bpl.n	800388c <float2string+0x3c>
 8003882:	edd7 7a03 	vldr	s15, [r7, #12]
 8003886:	eef1 7a67 	vneg.f32	s15, s15
 800388a:	e001      	b.n	8003890 <float2string+0x40>
 800388c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003890:	edc7 7a08 	vstr	s15, [r7, #32]

	int tmpInt1 = tmpVal;                  	// Get the integer (678)
 8003894:	edd7 7a08 	vldr	s15, [r7, #32]
 8003898:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800389c:	ee17 3a90 	vmov	r3, s15
 80038a0:	61fb      	str	r3, [r7, #28]
	float tmpFrac = tmpVal - tmpInt1;      	// Get fraction (0.0123)
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	ee07 3a90 	vmov	s15, r3
 80038a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038ac:	ed97 7a08 	vldr	s14, [r7, #32]
 80038b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038b4:	edc7 7a06 	vstr	s15, [r7, #24]
	int tmpInt2 = trunc(tmpFrac * 100);  	// Turn into integer (123) - For changing decimal place: change 10 to 100 or 1000
 80038b8:	edd7 7a06 	vldr	s15, [r7, #24]
 80038bc:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003910 <float2string+0xc0>
 80038c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038c4:	ee17 0a90 	vmov	r0, s15
 80038c8:	f000 fa3a 	bl	8003d40 <__aeabi_f2d>
 80038cc:	4602      	mov	r2, r0
 80038ce:	460b      	mov	r3, r1
 80038d0:	4610      	mov	r0, r2
 80038d2:	4619      	mov	r1, r3
 80038d4:	f000 f8a0 	bl	8003a18 <trunc>
 80038d8:	4602      	mov	r2, r0
 80038da:	460b      	mov	r3, r1
 80038dc:	4610      	mov	r0, r2
 80038de:	4619      	mov	r1, r3
 80038e0:	f000 fc94 	bl	800420c <__aeabi_d2iz>
 80038e4:	4603      	mov	r3, r0
 80038e6:	617b      	str	r3, [r7, #20]

	sprintf(str, "%s %s%d.%02d %s", variable, tmpSign, tmpInt1, tmpInt2, unit);
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	9300      	str	r3, [sp, #0]
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	9301      	str	r3, [sp, #4]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	9302      	str	r3, [sp, #8]
 80038f4:	6838      	ldr	r0, [r7, #0]
 80038f6:	4907      	ldr	r1, [pc, #28]	; (8003914 <float2string+0xc4>)
 80038f8:	68ba      	ldr	r2, [r7, #8]
 80038fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fc:	f000 fd36 	bl	800436c <siprintf>
}
 8003900:	3728      	adds	r7, #40	; 0x28
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	08005258 	.word	0x08005258
 800390c:	0800525c 	.word	0x0800525c
 8003910:	42c80000 	.word	0x42c80000
 8003914:	08005260 	.word	0x08005260

08003918 <main>:


int main(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b0d0      	sub	sp, #320	; 0x140
 800391c:	af00      	add	r7, sp, #0
	//DAVE
	DAVE_Init();
 800391e:	f7ff fead 	bl	800367c <DAVE_Init>
	float voltage;
	float current;
	float power;

	//OPEN COMMUNICATION WITH I2C
	SysTick_Config(SystemCoreClock / 1000);
 8003922:	4b31      	ldr	r3, [pc, #196]	; (80039e8 <main+0xd0>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a31      	ldr	r2, [pc, #196]	; (80039ec <main+0xd4>)
 8003928:	fba2 2303 	umull	r2, r3, r2, r3
 800392c:	099b      	lsrs	r3, r3, #6
 800392e:	4618      	mov	r0, r3
 8003930:	f7ff fefe 	bl	8003730 <SysTick_Config>
	ssd1306_Init(I2C_MASTER_0.channel, &delay_ms);
 8003934:	4b2e      	ldr	r3, [pc, #184]	; (80039f0 <main+0xd8>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4618      	mov	r0, r3
 800393a:	492e      	ldr	r1, [pc, #184]	; (80039f4 <main+0xdc>)
 800393c:	f7fc fe38 	bl	80005b0 <ssd1306_Init>

	while(1)
	{
		//GET RESULT FROM ADC
		adc = result;
 8003940:	4b2d      	ldr	r3, [pc, #180]	; (80039f8 <main+0xe0>)
 8003942:	881b      	ldrh	r3, [r3, #0]
 8003944:	ee07 3a90 	vmov	s15, r3
 8003948:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800394c:	edc7 7a4f 	vstr	s15, [r7, #316]	; 0x13c

		//CALCULATE
		voltage = adc * (3.3/4096.0);
 8003950:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8003954:	f000 f9f4 	bl	8003d40 <__aeabi_f2d>
 8003958:	4602      	mov	r2, r0
 800395a:	460b      	mov	r3, r1
 800395c:	4610      	mov	r0, r2
 800395e:	4619      	mov	r1, r3
 8003960:	a31f      	add	r3, pc, #124	; (adr r3, 80039e0 <main+0xc8>)
 8003962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003966:	f000 fa3f 	bl	8003de8 <__aeabi_dmul>
 800396a:	4602      	mov	r2, r0
 800396c:	460b      	mov	r3, r1
 800396e:	4610      	mov	r0, r2
 8003970:	4619      	mov	r1, r3
 8003972:	f000 fc73 	bl	800425c <__aeabi_d2f>
 8003976:	4603      	mov	r3, r0
 8003978:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
		current = voltage * 10;
 800397c:	edd7 7a4e 	vldr	s15, [r7, #312]	; 0x138
 8003980:	eeb2 7a04 	vmov.f32	s14, #36	; 0x24
 8003984:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003988:	edc7 7a4d 	vstr	s15, [r7, #308]	; 0x134
		power = current * 230;
 800398c:	edd7 7a4d 	vldr	s15, [r7, #308]	; 0x134
 8003990:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80039fc <main+0xe4>
 8003994:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003998:	edc7 7a4c 	vstr	s15, [r7, #304]	; 0x130

		//VOLTAGE STRING
		char voltage_str [100];
		float2string(voltage, "Voltage:", "V", voltage_str);
 800399c:	1d3b      	adds	r3, r7, #4
 800399e:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 80039a2:	4917      	ldr	r1, [pc, #92]	; (8003a00 <main+0xe8>)
 80039a4:	4a17      	ldr	r2, [pc, #92]	; (8003a04 <main+0xec>)
 80039a6:	f7ff ff53 	bl	8003850 <float2string>
		//CURRENT STRING
		char current_str [100];
		float2string(current, "Current:", "A", current_str);
 80039aa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80039ae:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
 80039b2:	4915      	ldr	r1, [pc, #84]	; (8003a08 <main+0xf0>)
 80039b4:	4a15      	ldr	r2, [pc, #84]	; (8003a0c <main+0xf4>)
 80039b6:	f7ff ff4b 	bl	8003850 <float2string>
		//POWER STRING
		char power_str [100];
		float2string(power, "Power:", "W", power_str);
 80039ba:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80039be:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 80039c2:	4913      	ldr	r1, [pc, #76]	; (8003a10 <main+0xf8>)
 80039c4:	4a13      	ldr	r2, [pc, #76]	; (8003a14 <main+0xfc>)
 80039c6:	f7ff ff43 	bl	8003850 <float2string>

		//DISPLAY THE STRING'S
		ssd1306_text(voltage_str, current_str, power_str);
 80039ca:	1d39      	adds	r1, r7, #4
 80039cc:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80039d0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80039d4:	4608      	mov	r0, r1
 80039d6:	4611      	mov	r1, r2
 80039d8:	461a      	mov	r2, r3
 80039da:	f7ff ff07 	bl	80037ec <ssd1306_text>
	}
 80039de:	e7af      	b.n	8003940 <main+0x28>
 80039e0:	66666666 	.word	0x66666666
 80039e4:	3f4a6666 	.word	0x3f4a6666
 80039e8:	2000ffc0 	.word	0x2000ffc0
 80039ec:	10624dd3 	.word	0x10624dd3
 80039f0:	20000034 	.word	0x20000034
 80039f4:	080037bd 	.word	0x080037bd
 80039f8:	2000036c 	.word	0x2000036c
 80039fc:	43660000 	.word	0x43660000
 8003a00:	08005270 	.word	0x08005270
 8003a04:	0800527c 	.word	0x0800527c
 8003a08:	08005280 	.word	0x08005280
 8003a0c:	0800528c 	.word	0x0800528c
 8003a10:	08005290 	.word	0x08005290
 8003a14:	08005298 	.word	0x08005298

08003a18 <trunc>:
 8003a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a1a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8003a1e:	f2a6 34ff 	subw	r4, r6, #1023	; 0x3ff
 8003a22:	2c13      	cmp	r4, #19
 8003a24:	460b      	mov	r3, r1
 8003a26:	460d      	mov	r5, r1
 8003a28:	dc0d      	bgt.n	8003a46 <trunc+0x2e>
 8003a2a:	2c00      	cmp	r4, #0
 8003a2c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003a30:	db1a      	blt.n	8003a68 <trunc+0x50>
 8003a32:	4b10      	ldr	r3, [pc, #64]	; (8003a74 <trunc+0x5c>)
 8003a34:	4123      	asrs	r3, r4
 8003a36:	ea25 0503 	bic.w	r5, r5, r3
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	ea45 0301 	orr.w	r3, r5, r1
 8003a40:	4610      	mov	r0, r2
 8003a42:	4619      	mov	r1, r3
 8003a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a46:	2c33      	cmp	r4, #51	; 0x33
 8003a48:	4602      	mov	r2, r0
 8003a4a:	dd03      	ble.n	8003a54 <trunc+0x3c>
 8003a4c:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8003a50:	d00d      	beq.n	8003a6e <trunc+0x56>
 8003a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a54:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
 8003a58:	f04f 31ff 	mov.w	r1, #4294967295
 8003a5c:	40f1      	lsrs	r1, r6
 8003a5e:	ea20 0201 	bic.w	r2, r0, r1
 8003a62:	4610      	mov	r0, r2
 8003a64:	4629      	mov	r1, r5
 8003a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a68:	2200      	movs	r2, #0
 8003a6a:	4610      	mov	r0, r2
 8003a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a6e:	f000 f809 	bl	8003a84 <__adddf3>
 8003a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a74:	000fffff 	.word	0x000fffff

08003a78 <__aeabi_drsub>:
 8003a78:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8003a7c:	e002      	b.n	8003a84 <__adddf3>
 8003a7e:	bf00      	nop

08003a80 <__aeabi_dsub>:
 8003a80:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08003a84 <__adddf3>:
 8003a84:	b530      	push	{r4, r5, lr}
 8003a86:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8003a8a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8003a8e:	ea94 0f05 	teq	r4, r5
 8003a92:	bf08      	it	eq
 8003a94:	ea90 0f02 	teqeq	r0, r2
 8003a98:	bf1f      	itttt	ne
 8003a9a:	ea54 0c00 	orrsne.w	ip, r4, r0
 8003a9e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8003aa2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8003aa6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8003aaa:	f000 80e2 	beq.w	8003c72 <__adddf3+0x1ee>
 8003aae:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8003ab2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8003ab6:	bfb8      	it	lt
 8003ab8:	426d      	neglt	r5, r5
 8003aba:	dd0c      	ble.n	8003ad6 <__adddf3+0x52>
 8003abc:	442c      	add	r4, r5
 8003abe:	ea80 0202 	eor.w	r2, r0, r2
 8003ac2:	ea81 0303 	eor.w	r3, r1, r3
 8003ac6:	ea82 0000 	eor.w	r0, r2, r0
 8003aca:	ea83 0101 	eor.w	r1, r3, r1
 8003ace:	ea80 0202 	eor.w	r2, r0, r2
 8003ad2:	ea81 0303 	eor.w	r3, r1, r3
 8003ad6:	2d36      	cmp	r5, #54	; 0x36
 8003ad8:	bf88      	it	hi
 8003ada:	bd30      	pophi	{r4, r5, pc}
 8003adc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8003ae0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8003ae4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8003ae8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8003aec:	d002      	beq.n	8003af4 <__adddf3+0x70>
 8003aee:	4240      	negs	r0, r0
 8003af0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8003af4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8003af8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8003afc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8003b00:	d002      	beq.n	8003b08 <__adddf3+0x84>
 8003b02:	4252      	negs	r2, r2
 8003b04:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8003b08:	ea94 0f05 	teq	r4, r5
 8003b0c:	f000 80a7 	beq.w	8003c5e <__adddf3+0x1da>
 8003b10:	f1a4 0401 	sub.w	r4, r4, #1
 8003b14:	f1d5 0e20 	rsbs	lr, r5, #32
 8003b18:	db0d      	blt.n	8003b36 <__adddf3+0xb2>
 8003b1a:	fa02 fc0e 	lsl.w	ip, r2, lr
 8003b1e:	fa22 f205 	lsr.w	r2, r2, r5
 8003b22:	1880      	adds	r0, r0, r2
 8003b24:	f141 0100 	adc.w	r1, r1, #0
 8003b28:	fa03 f20e 	lsl.w	r2, r3, lr
 8003b2c:	1880      	adds	r0, r0, r2
 8003b2e:	fa43 f305 	asr.w	r3, r3, r5
 8003b32:	4159      	adcs	r1, r3
 8003b34:	e00e      	b.n	8003b54 <__adddf3+0xd0>
 8003b36:	f1a5 0520 	sub.w	r5, r5, #32
 8003b3a:	f10e 0e20 	add.w	lr, lr, #32
 8003b3e:	2a01      	cmp	r2, #1
 8003b40:	fa03 fc0e 	lsl.w	ip, r3, lr
 8003b44:	bf28      	it	cs
 8003b46:	f04c 0c02 	orrcs.w	ip, ip, #2
 8003b4a:	fa43 f305 	asr.w	r3, r3, r5
 8003b4e:	18c0      	adds	r0, r0, r3
 8003b50:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8003b54:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8003b58:	d507      	bpl.n	8003b6a <__adddf3+0xe6>
 8003b5a:	f04f 0e00 	mov.w	lr, #0
 8003b5e:	f1dc 0c00 	rsbs	ip, ip, #0
 8003b62:	eb7e 0000 	sbcs.w	r0, lr, r0
 8003b66:	eb6e 0101 	sbc.w	r1, lr, r1
 8003b6a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8003b6e:	d31b      	bcc.n	8003ba8 <__adddf3+0x124>
 8003b70:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8003b74:	d30c      	bcc.n	8003b90 <__adddf3+0x10c>
 8003b76:	0849      	lsrs	r1, r1, #1
 8003b78:	ea5f 0030 	movs.w	r0, r0, rrx
 8003b7c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8003b80:	f104 0401 	add.w	r4, r4, #1
 8003b84:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8003b88:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8003b8c:	f080 809a 	bcs.w	8003cc4 <__adddf3+0x240>
 8003b90:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8003b94:	bf08      	it	eq
 8003b96:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8003b9a:	f150 0000 	adcs.w	r0, r0, #0
 8003b9e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8003ba2:	ea41 0105 	orr.w	r1, r1, r5
 8003ba6:	bd30      	pop	{r4, r5, pc}
 8003ba8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8003bac:	4140      	adcs	r0, r0
 8003bae:	eb41 0101 	adc.w	r1, r1, r1
 8003bb2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003bb6:	f1a4 0401 	sub.w	r4, r4, #1
 8003bba:	d1e9      	bne.n	8003b90 <__adddf3+0x10c>
 8003bbc:	f091 0f00 	teq	r1, #0
 8003bc0:	bf04      	itt	eq
 8003bc2:	4601      	moveq	r1, r0
 8003bc4:	2000      	moveq	r0, #0
 8003bc6:	fab1 f381 	clz	r3, r1
 8003bca:	bf08      	it	eq
 8003bcc:	3320      	addeq	r3, #32
 8003bce:	f1a3 030b 	sub.w	r3, r3, #11
 8003bd2:	f1b3 0220 	subs.w	r2, r3, #32
 8003bd6:	da0c      	bge.n	8003bf2 <__adddf3+0x16e>
 8003bd8:	320c      	adds	r2, #12
 8003bda:	dd08      	ble.n	8003bee <__adddf3+0x16a>
 8003bdc:	f102 0c14 	add.w	ip, r2, #20
 8003be0:	f1c2 020c 	rsb	r2, r2, #12
 8003be4:	fa01 f00c 	lsl.w	r0, r1, ip
 8003be8:	fa21 f102 	lsr.w	r1, r1, r2
 8003bec:	e00c      	b.n	8003c08 <__adddf3+0x184>
 8003bee:	f102 0214 	add.w	r2, r2, #20
 8003bf2:	bfd8      	it	le
 8003bf4:	f1c2 0c20 	rsble	ip, r2, #32
 8003bf8:	fa01 f102 	lsl.w	r1, r1, r2
 8003bfc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8003c00:	bfdc      	itt	le
 8003c02:	ea41 010c 	orrle.w	r1, r1, ip
 8003c06:	4090      	lslle	r0, r2
 8003c08:	1ae4      	subs	r4, r4, r3
 8003c0a:	bfa2      	ittt	ge
 8003c0c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8003c10:	4329      	orrge	r1, r5
 8003c12:	bd30      	popge	{r4, r5, pc}
 8003c14:	ea6f 0404 	mvn.w	r4, r4
 8003c18:	3c1f      	subs	r4, #31
 8003c1a:	da1c      	bge.n	8003c56 <__adddf3+0x1d2>
 8003c1c:	340c      	adds	r4, #12
 8003c1e:	dc0e      	bgt.n	8003c3e <__adddf3+0x1ba>
 8003c20:	f104 0414 	add.w	r4, r4, #20
 8003c24:	f1c4 0220 	rsb	r2, r4, #32
 8003c28:	fa20 f004 	lsr.w	r0, r0, r4
 8003c2c:	fa01 f302 	lsl.w	r3, r1, r2
 8003c30:	ea40 0003 	orr.w	r0, r0, r3
 8003c34:	fa21 f304 	lsr.w	r3, r1, r4
 8003c38:	ea45 0103 	orr.w	r1, r5, r3
 8003c3c:	bd30      	pop	{r4, r5, pc}
 8003c3e:	f1c4 040c 	rsb	r4, r4, #12
 8003c42:	f1c4 0220 	rsb	r2, r4, #32
 8003c46:	fa20 f002 	lsr.w	r0, r0, r2
 8003c4a:	fa01 f304 	lsl.w	r3, r1, r4
 8003c4e:	ea40 0003 	orr.w	r0, r0, r3
 8003c52:	4629      	mov	r1, r5
 8003c54:	bd30      	pop	{r4, r5, pc}
 8003c56:	fa21 f004 	lsr.w	r0, r1, r4
 8003c5a:	4629      	mov	r1, r5
 8003c5c:	bd30      	pop	{r4, r5, pc}
 8003c5e:	f094 0f00 	teq	r4, #0
 8003c62:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8003c66:	bf06      	itte	eq
 8003c68:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8003c6c:	3401      	addeq	r4, #1
 8003c6e:	3d01      	subne	r5, #1
 8003c70:	e74e      	b.n	8003b10 <__adddf3+0x8c>
 8003c72:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8003c76:	bf18      	it	ne
 8003c78:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8003c7c:	d029      	beq.n	8003cd2 <__adddf3+0x24e>
 8003c7e:	ea94 0f05 	teq	r4, r5
 8003c82:	bf08      	it	eq
 8003c84:	ea90 0f02 	teqeq	r0, r2
 8003c88:	d005      	beq.n	8003c96 <__adddf3+0x212>
 8003c8a:	ea54 0c00 	orrs.w	ip, r4, r0
 8003c8e:	bf04      	itt	eq
 8003c90:	4619      	moveq	r1, r3
 8003c92:	4610      	moveq	r0, r2
 8003c94:	bd30      	pop	{r4, r5, pc}
 8003c96:	ea91 0f03 	teq	r1, r3
 8003c9a:	bf1e      	ittt	ne
 8003c9c:	2100      	movne	r1, #0
 8003c9e:	2000      	movne	r0, #0
 8003ca0:	bd30      	popne	{r4, r5, pc}
 8003ca2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8003ca6:	d105      	bne.n	8003cb4 <__adddf3+0x230>
 8003ca8:	0040      	lsls	r0, r0, #1
 8003caa:	4149      	adcs	r1, r1
 8003cac:	bf28      	it	cs
 8003cae:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8003cb2:	bd30      	pop	{r4, r5, pc}
 8003cb4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8003cb8:	bf3c      	itt	cc
 8003cba:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8003cbe:	bd30      	popcc	{r4, r5, pc}
 8003cc0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8003cc4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8003cc8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003ccc:	f04f 0000 	mov.w	r0, #0
 8003cd0:	bd30      	pop	{r4, r5, pc}
 8003cd2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8003cd6:	bf1a      	itte	ne
 8003cd8:	4619      	movne	r1, r3
 8003cda:	4610      	movne	r0, r2
 8003cdc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8003ce0:	bf1c      	itt	ne
 8003ce2:	460b      	movne	r3, r1
 8003ce4:	4602      	movne	r2, r0
 8003ce6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8003cea:	bf06      	itte	eq
 8003cec:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8003cf0:	ea91 0f03 	teqeq	r1, r3
 8003cf4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8003cf8:	bd30      	pop	{r4, r5, pc}
 8003cfa:	bf00      	nop

08003cfc <__aeabi_ui2d>:
 8003cfc:	f090 0f00 	teq	r0, #0
 8003d00:	bf04      	itt	eq
 8003d02:	2100      	moveq	r1, #0
 8003d04:	4770      	bxeq	lr
 8003d06:	b530      	push	{r4, r5, lr}
 8003d08:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003d0c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8003d10:	f04f 0500 	mov.w	r5, #0
 8003d14:	f04f 0100 	mov.w	r1, #0
 8003d18:	e750      	b.n	8003bbc <__adddf3+0x138>
 8003d1a:	bf00      	nop

08003d1c <__aeabi_i2d>:
 8003d1c:	f090 0f00 	teq	r0, #0
 8003d20:	bf04      	itt	eq
 8003d22:	2100      	moveq	r1, #0
 8003d24:	4770      	bxeq	lr
 8003d26:	b530      	push	{r4, r5, lr}
 8003d28:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003d2c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8003d30:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8003d34:	bf48      	it	mi
 8003d36:	4240      	negmi	r0, r0
 8003d38:	f04f 0100 	mov.w	r1, #0
 8003d3c:	e73e      	b.n	8003bbc <__adddf3+0x138>
 8003d3e:	bf00      	nop

08003d40 <__aeabi_f2d>:
 8003d40:	0042      	lsls	r2, r0, #1
 8003d42:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8003d46:	ea4f 0131 	mov.w	r1, r1, rrx
 8003d4a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8003d4e:	bf1f      	itttt	ne
 8003d50:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8003d54:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8003d58:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8003d5c:	4770      	bxne	lr
 8003d5e:	f092 0f00 	teq	r2, #0
 8003d62:	bf14      	ite	ne
 8003d64:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8003d68:	4770      	bxeq	lr
 8003d6a:	b530      	push	{r4, r5, lr}
 8003d6c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8003d70:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8003d74:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003d78:	e720      	b.n	8003bbc <__adddf3+0x138>
 8003d7a:	bf00      	nop

08003d7c <__aeabi_ul2d>:
 8003d7c:	ea50 0201 	orrs.w	r2, r0, r1
 8003d80:	bf08      	it	eq
 8003d82:	4770      	bxeq	lr
 8003d84:	b530      	push	{r4, r5, lr}
 8003d86:	f04f 0500 	mov.w	r5, #0
 8003d8a:	e00a      	b.n	8003da2 <__aeabi_l2d+0x16>

08003d8c <__aeabi_l2d>:
 8003d8c:	ea50 0201 	orrs.w	r2, r0, r1
 8003d90:	bf08      	it	eq
 8003d92:	4770      	bxeq	lr
 8003d94:	b530      	push	{r4, r5, lr}
 8003d96:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8003d9a:	d502      	bpl.n	8003da2 <__aeabi_l2d+0x16>
 8003d9c:	4240      	negs	r0, r0
 8003d9e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8003da2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003da6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8003daa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8003dae:	f43f aedc 	beq.w	8003b6a <__adddf3+0xe6>
 8003db2:	f04f 0203 	mov.w	r2, #3
 8003db6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8003dba:	bf18      	it	ne
 8003dbc:	3203      	addne	r2, #3
 8003dbe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8003dc2:	bf18      	it	ne
 8003dc4:	3203      	addne	r2, #3
 8003dc6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8003dca:	f1c2 0320 	rsb	r3, r2, #32
 8003dce:	fa00 fc03 	lsl.w	ip, r0, r3
 8003dd2:	fa20 f002 	lsr.w	r0, r0, r2
 8003dd6:	fa01 fe03 	lsl.w	lr, r1, r3
 8003dda:	ea40 000e 	orr.w	r0, r0, lr
 8003dde:	fa21 f102 	lsr.w	r1, r1, r2
 8003de2:	4414      	add	r4, r2
 8003de4:	e6c1      	b.n	8003b6a <__adddf3+0xe6>
 8003de6:	bf00      	nop

08003de8 <__aeabi_dmul>:
 8003de8:	b570      	push	{r4, r5, r6, lr}
 8003dea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8003dee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8003df2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8003df6:	bf1d      	ittte	ne
 8003df8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8003dfc:	ea94 0f0c 	teqne	r4, ip
 8003e00:	ea95 0f0c 	teqne	r5, ip
 8003e04:	f000 f8de 	bleq	8003fc4 <__aeabi_dmul+0x1dc>
 8003e08:	442c      	add	r4, r5
 8003e0a:	ea81 0603 	eor.w	r6, r1, r3
 8003e0e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8003e12:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8003e16:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8003e1a:	bf18      	it	ne
 8003e1c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8003e20:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003e24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e28:	d038      	beq.n	8003e9c <__aeabi_dmul+0xb4>
 8003e2a:	fba0 ce02 	umull	ip, lr, r0, r2
 8003e2e:	f04f 0500 	mov.w	r5, #0
 8003e32:	fbe1 e502 	umlal	lr, r5, r1, r2
 8003e36:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8003e3a:	fbe0 e503 	umlal	lr, r5, r0, r3
 8003e3e:	f04f 0600 	mov.w	r6, #0
 8003e42:	fbe1 5603 	umlal	r5, r6, r1, r3
 8003e46:	f09c 0f00 	teq	ip, #0
 8003e4a:	bf18      	it	ne
 8003e4c:	f04e 0e01 	orrne.w	lr, lr, #1
 8003e50:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8003e54:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8003e58:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8003e5c:	d204      	bcs.n	8003e68 <__aeabi_dmul+0x80>
 8003e5e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8003e62:	416d      	adcs	r5, r5
 8003e64:	eb46 0606 	adc.w	r6, r6, r6
 8003e68:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8003e6c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8003e70:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8003e74:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8003e78:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8003e7c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8003e80:	bf88      	it	hi
 8003e82:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8003e86:	d81e      	bhi.n	8003ec6 <__aeabi_dmul+0xde>
 8003e88:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8003e8c:	bf08      	it	eq
 8003e8e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8003e92:	f150 0000 	adcs.w	r0, r0, #0
 8003e96:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8003e9a:	bd70      	pop	{r4, r5, r6, pc}
 8003e9c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8003ea0:	ea46 0101 	orr.w	r1, r6, r1
 8003ea4:	ea40 0002 	orr.w	r0, r0, r2
 8003ea8:	ea81 0103 	eor.w	r1, r1, r3
 8003eac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8003eb0:	bfc2      	ittt	gt
 8003eb2:	ebd4 050c 	rsbsgt	r5, r4, ip
 8003eb6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8003eba:	bd70      	popgt	{r4, r5, r6, pc}
 8003ebc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003ec0:	f04f 0e00 	mov.w	lr, #0
 8003ec4:	3c01      	subs	r4, #1
 8003ec6:	f300 80ab 	bgt.w	8004020 <__aeabi_dmul+0x238>
 8003eca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8003ece:	bfde      	ittt	le
 8003ed0:	2000      	movle	r0, #0
 8003ed2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8003ed6:	bd70      	pople	{r4, r5, r6, pc}
 8003ed8:	f1c4 0400 	rsb	r4, r4, #0
 8003edc:	3c20      	subs	r4, #32
 8003ede:	da35      	bge.n	8003f4c <__aeabi_dmul+0x164>
 8003ee0:	340c      	adds	r4, #12
 8003ee2:	dc1b      	bgt.n	8003f1c <__aeabi_dmul+0x134>
 8003ee4:	f104 0414 	add.w	r4, r4, #20
 8003ee8:	f1c4 0520 	rsb	r5, r4, #32
 8003eec:	fa00 f305 	lsl.w	r3, r0, r5
 8003ef0:	fa20 f004 	lsr.w	r0, r0, r4
 8003ef4:	fa01 f205 	lsl.w	r2, r1, r5
 8003ef8:	ea40 0002 	orr.w	r0, r0, r2
 8003efc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8003f00:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003f04:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8003f08:	fa21 f604 	lsr.w	r6, r1, r4
 8003f0c:	eb42 0106 	adc.w	r1, r2, r6
 8003f10:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8003f14:	bf08      	it	eq
 8003f16:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8003f1a:	bd70      	pop	{r4, r5, r6, pc}
 8003f1c:	f1c4 040c 	rsb	r4, r4, #12
 8003f20:	f1c4 0520 	rsb	r5, r4, #32
 8003f24:	fa00 f304 	lsl.w	r3, r0, r4
 8003f28:	fa20 f005 	lsr.w	r0, r0, r5
 8003f2c:	fa01 f204 	lsl.w	r2, r1, r4
 8003f30:	ea40 0002 	orr.w	r0, r0, r2
 8003f34:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003f38:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8003f3c:	f141 0100 	adc.w	r1, r1, #0
 8003f40:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8003f44:	bf08      	it	eq
 8003f46:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8003f4a:	bd70      	pop	{r4, r5, r6, pc}
 8003f4c:	f1c4 0520 	rsb	r5, r4, #32
 8003f50:	fa00 f205 	lsl.w	r2, r0, r5
 8003f54:	ea4e 0e02 	orr.w	lr, lr, r2
 8003f58:	fa20 f304 	lsr.w	r3, r0, r4
 8003f5c:	fa01 f205 	lsl.w	r2, r1, r5
 8003f60:	ea43 0302 	orr.w	r3, r3, r2
 8003f64:	fa21 f004 	lsr.w	r0, r1, r4
 8003f68:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003f6c:	fa21 f204 	lsr.w	r2, r1, r4
 8003f70:	ea20 0002 	bic.w	r0, r0, r2
 8003f74:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8003f78:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8003f7c:	bf08      	it	eq
 8003f7e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8003f82:	bd70      	pop	{r4, r5, r6, pc}
 8003f84:	f094 0f00 	teq	r4, #0
 8003f88:	d10f      	bne.n	8003faa <__aeabi_dmul+0x1c2>
 8003f8a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8003f8e:	0040      	lsls	r0, r0, #1
 8003f90:	eb41 0101 	adc.w	r1, r1, r1
 8003f94:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003f98:	bf08      	it	eq
 8003f9a:	3c01      	subeq	r4, #1
 8003f9c:	d0f7      	beq.n	8003f8e <__aeabi_dmul+0x1a6>
 8003f9e:	ea41 0106 	orr.w	r1, r1, r6
 8003fa2:	f095 0f00 	teq	r5, #0
 8003fa6:	bf18      	it	ne
 8003fa8:	4770      	bxne	lr
 8003faa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8003fae:	0052      	lsls	r2, r2, #1
 8003fb0:	eb43 0303 	adc.w	r3, r3, r3
 8003fb4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003fb8:	bf08      	it	eq
 8003fba:	3d01      	subeq	r5, #1
 8003fbc:	d0f7      	beq.n	8003fae <__aeabi_dmul+0x1c6>
 8003fbe:	ea43 0306 	orr.w	r3, r3, r6
 8003fc2:	4770      	bx	lr
 8003fc4:	ea94 0f0c 	teq	r4, ip
 8003fc8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8003fcc:	bf18      	it	ne
 8003fce:	ea95 0f0c 	teqne	r5, ip
 8003fd2:	d00c      	beq.n	8003fee <__aeabi_dmul+0x206>
 8003fd4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8003fd8:	bf18      	it	ne
 8003fda:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8003fde:	d1d1      	bne.n	8003f84 <__aeabi_dmul+0x19c>
 8003fe0:	ea81 0103 	eor.w	r1, r1, r3
 8003fe4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003fe8:	f04f 0000 	mov.w	r0, #0
 8003fec:	bd70      	pop	{r4, r5, r6, pc}
 8003fee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8003ff2:	bf06      	itte	eq
 8003ff4:	4610      	moveq	r0, r2
 8003ff6:	4619      	moveq	r1, r3
 8003ff8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8003ffc:	d019      	beq.n	8004032 <__aeabi_dmul+0x24a>
 8003ffe:	ea94 0f0c 	teq	r4, ip
 8004002:	d102      	bne.n	800400a <__aeabi_dmul+0x222>
 8004004:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8004008:	d113      	bne.n	8004032 <__aeabi_dmul+0x24a>
 800400a:	ea95 0f0c 	teq	r5, ip
 800400e:	d105      	bne.n	800401c <__aeabi_dmul+0x234>
 8004010:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8004014:	bf1c      	itt	ne
 8004016:	4610      	movne	r0, r2
 8004018:	4619      	movne	r1, r3
 800401a:	d10a      	bne.n	8004032 <__aeabi_dmul+0x24a>
 800401c:	ea81 0103 	eor.w	r1, r1, r3
 8004020:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004024:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8004028:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800402c:	f04f 0000 	mov.w	r0, #0
 8004030:	bd70      	pop	{r4, r5, r6, pc}
 8004032:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8004036:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800403a:	bd70      	pop	{r4, r5, r6, pc}

0800403c <__aeabi_ddiv>:
 800403c:	b570      	push	{r4, r5, r6, lr}
 800403e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8004042:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8004046:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800404a:	bf1d      	ittte	ne
 800404c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8004050:	ea94 0f0c 	teqne	r4, ip
 8004054:	ea95 0f0c 	teqne	r5, ip
 8004058:	f000 f8a7 	bleq	80041aa <__aeabi_ddiv+0x16e>
 800405c:	eba4 0405 	sub.w	r4, r4, r5
 8004060:	ea81 0e03 	eor.w	lr, r1, r3
 8004064:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8004068:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800406c:	f000 8088 	beq.w	8004180 <__aeabi_ddiv+0x144>
 8004070:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8004074:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8004078:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800407c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8004080:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8004084:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8004088:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800408c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8004090:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8004094:	429d      	cmp	r5, r3
 8004096:	bf08      	it	eq
 8004098:	4296      	cmpeq	r6, r2
 800409a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800409e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80040a2:	d202      	bcs.n	80040aa <__aeabi_ddiv+0x6e>
 80040a4:	085b      	lsrs	r3, r3, #1
 80040a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80040aa:	1ab6      	subs	r6, r6, r2
 80040ac:	eb65 0503 	sbc.w	r5, r5, r3
 80040b0:	085b      	lsrs	r3, r3, #1
 80040b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80040b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80040ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80040be:	ebb6 0e02 	subs.w	lr, r6, r2
 80040c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80040c6:	bf22      	ittt	cs
 80040c8:	1ab6      	subcs	r6, r6, r2
 80040ca:	4675      	movcs	r5, lr
 80040cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80040d0:	085b      	lsrs	r3, r3, #1
 80040d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80040d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80040da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80040de:	bf22      	ittt	cs
 80040e0:	1ab6      	subcs	r6, r6, r2
 80040e2:	4675      	movcs	r5, lr
 80040e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80040e8:	085b      	lsrs	r3, r3, #1
 80040ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80040ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80040f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80040f6:	bf22      	ittt	cs
 80040f8:	1ab6      	subcs	r6, r6, r2
 80040fa:	4675      	movcs	r5, lr
 80040fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8004100:	085b      	lsrs	r3, r3, #1
 8004102:	ea4f 0232 	mov.w	r2, r2, rrx
 8004106:	ebb6 0e02 	subs.w	lr, r6, r2
 800410a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800410e:	bf22      	ittt	cs
 8004110:	1ab6      	subcs	r6, r6, r2
 8004112:	4675      	movcs	r5, lr
 8004114:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8004118:	ea55 0e06 	orrs.w	lr, r5, r6
 800411c:	d018      	beq.n	8004150 <__aeabi_ddiv+0x114>
 800411e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8004122:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8004126:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800412a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800412e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8004132:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8004136:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800413a:	d1c0      	bne.n	80040be <__aeabi_ddiv+0x82>
 800413c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004140:	d10b      	bne.n	800415a <__aeabi_ddiv+0x11e>
 8004142:	ea41 0100 	orr.w	r1, r1, r0
 8004146:	f04f 0000 	mov.w	r0, #0
 800414a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800414e:	e7b6      	b.n	80040be <__aeabi_ddiv+0x82>
 8004150:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004154:	bf04      	itt	eq
 8004156:	4301      	orreq	r1, r0
 8004158:	2000      	moveq	r0, #0
 800415a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800415e:	bf88      	it	hi
 8004160:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8004164:	f63f aeaf 	bhi.w	8003ec6 <__aeabi_dmul+0xde>
 8004168:	ebb5 0c03 	subs.w	ip, r5, r3
 800416c:	bf04      	itt	eq
 800416e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8004172:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8004176:	f150 0000 	adcs.w	r0, r0, #0
 800417a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800417e:	bd70      	pop	{r4, r5, r6, pc}
 8004180:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8004184:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8004188:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800418c:	bfc2      	ittt	gt
 800418e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8004192:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8004196:	bd70      	popgt	{r4, r5, r6, pc}
 8004198:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800419c:	f04f 0e00 	mov.w	lr, #0
 80041a0:	3c01      	subs	r4, #1
 80041a2:	e690      	b.n	8003ec6 <__aeabi_dmul+0xde>
 80041a4:	ea45 0e06 	orr.w	lr, r5, r6
 80041a8:	e68d      	b.n	8003ec6 <__aeabi_dmul+0xde>
 80041aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80041ae:	ea94 0f0c 	teq	r4, ip
 80041b2:	bf08      	it	eq
 80041b4:	ea95 0f0c 	teqeq	r5, ip
 80041b8:	f43f af3b 	beq.w	8004032 <__aeabi_dmul+0x24a>
 80041bc:	ea94 0f0c 	teq	r4, ip
 80041c0:	d10a      	bne.n	80041d8 <__aeabi_ddiv+0x19c>
 80041c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80041c6:	f47f af34 	bne.w	8004032 <__aeabi_dmul+0x24a>
 80041ca:	ea95 0f0c 	teq	r5, ip
 80041ce:	f47f af25 	bne.w	800401c <__aeabi_dmul+0x234>
 80041d2:	4610      	mov	r0, r2
 80041d4:	4619      	mov	r1, r3
 80041d6:	e72c      	b.n	8004032 <__aeabi_dmul+0x24a>
 80041d8:	ea95 0f0c 	teq	r5, ip
 80041dc:	d106      	bne.n	80041ec <__aeabi_ddiv+0x1b0>
 80041de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80041e2:	f43f aefd 	beq.w	8003fe0 <__aeabi_dmul+0x1f8>
 80041e6:	4610      	mov	r0, r2
 80041e8:	4619      	mov	r1, r3
 80041ea:	e722      	b.n	8004032 <__aeabi_dmul+0x24a>
 80041ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80041f0:	bf18      	it	ne
 80041f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80041f6:	f47f aec5 	bne.w	8003f84 <__aeabi_dmul+0x19c>
 80041fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80041fe:	f47f af0d 	bne.w	800401c <__aeabi_dmul+0x234>
 8004202:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8004206:	f47f aeeb 	bne.w	8003fe0 <__aeabi_dmul+0x1f8>
 800420a:	e712      	b.n	8004032 <__aeabi_dmul+0x24a>

0800420c <__aeabi_d2iz>:
 800420c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8004210:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8004214:	d215      	bcs.n	8004242 <__aeabi_d2iz+0x36>
 8004216:	d511      	bpl.n	800423c <__aeabi_d2iz+0x30>
 8004218:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800421c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8004220:	d912      	bls.n	8004248 <__aeabi_d2iz+0x3c>
 8004222:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8004226:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800422a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800422e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8004232:	fa23 f002 	lsr.w	r0, r3, r2
 8004236:	bf18      	it	ne
 8004238:	4240      	negne	r0, r0
 800423a:	4770      	bx	lr
 800423c:	f04f 0000 	mov.w	r0, #0
 8004240:	4770      	bx	lr
 8004242:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8004246:	d105      	bne.n	8004254 <__aeabi_d2iz+0x48>
 8004248:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800424c:	bf08      	it	eq
 800424e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8004252:	4770      	bx	lr
 8004254:	f04f 0000 	mov.w	r0, #0
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop

0800425c <__aeabi_d2f>:
 800425c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8004260:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8004264:	bf24      	itt	cs
 8004266:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800426a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800426e:	d90d      	bls.n	800428c <__aeabi_d2f+0x30>
 8004270:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8004274:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8004278:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800427c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8004280:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8004284:	bf08      	it	eq
 8004286:	f020 0001 	biceq.w	r0, r0, #1
 800428a:	4770      	bx	lr
 800428c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8004290:	d121      	bne.n	80042d6 <__aeabi_d2f+0x7a>
 8004292:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8004296:	bfbc      	itt	lt
 8004298:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800429c:	4770      	bxlt	lr
 800429e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80042a2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80042a6:	f1c2 0218 	rsb	r2, r2, #24
 80042aa:	f1c2 0c20 	rsb	ip, r2, #32
 80042ae:	fa10 f30c 	lsls.w	r3, r0, ip
 80042b2:	fa20 f002 	lsr.w	r0, r0, r2
 80042b6:	bf18      	it	ne
 80042b8:	f040 0001 	orrne.w	r0, r0, #1
 80042bc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80042c0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80042c4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80042c8:	ea40 000c 	orr.w	r0, r0, ip
 80042cc:	fa23 f302 	lsr.w	r3, r3, r2
 80042d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80042d4:	e7cc      	b.n	8004270 <__aeabi_d2f+0x14>
 80042d6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80042da:	d107      	bne.n	80042ec <__aeabi_d2f+0x90>
 80042dc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80042e0:	bf1e      	ittt	ne
 80042e2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80042e6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80042ea:	4770      	bxne	lr
 80042ec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80042f0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80042f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop

080042fc <__errno>:
 80042fc:	4b01      	ldr	r3, [pc, #4]	; (8004304 <__errno+0x8>)
 80042fe:	6818      	ldr	r0, [r3, #0]
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	20000138 	.word	0x20000138

08004308 <__libc_init_array>:
 8004308:	b570      	push	{r4, r5, r6, lr}
 800430a:	4b0e      	ldr	r3, [pc, #56]	; (8004344 <__libc_init_array+0x3c>)
 800430c:	4c0e      	ldr	r4, [pc, #56]	; (8004348 <__libc_init_array+0x40>)
 800430e:	1ae4      	subs	r4, r4, r3
 8004310:	10a4      	asrs	r4, r4, #2
 8004312:	2500      	movs	r5, #0
 8004314:	461e      	mov	r6, r3
 8004316:	42a5      	cmp	r5, r4
 8004318:	d004      	beq.n	8004324 <__libc_init_array+0x1c>
 800431a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800431e:	4798      	blx	r3
 8004320:	3501      	adds	r5, #1
 8004322:	e7f8      	b.n	8004316 <__libc_init_array+0xe>
 8004324:	f7fe f830 	bl	8002388 <_init>
 8004328:	4c08      	ldr	r4, [pc, #32]	; (800434c <__libc_init_array+0x44>)
 800432a:	4b09      	ldr	r3, [pc, #36]	; (8004350 <__libc_init_array+0x48>)
 800432c:	1ae4      	subs	r4, r4, r3
 800432e:	10a4      	asrs	r4, r4, #2
 8004330:	2500      	movs	r5, #0
 8004332:	461e      	mov	r6, r3
 8004334:	42a5      	cmp	r5, r4
 8004336:	d004      	beq.n	8004342 <__libc_init_array+0x3a>
 8004338:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800433c:	4798      	blx	r3
 800433e:	3501      	adds	r5, #1
 8004340:	e7f8      	b.n	8004334 <__libc_init_array+0x2c>
 8004342:	bd70      	pop	{r4, r5, r6, pc}
 8004344:	2000013c 	.word	0x2000013c
 8004348:	2000013c 	.word	0x2000013c
 800434c:	2000013c 	.word	0x2000013c
 8004350:	2000013c 	.word	0x2000013c

08004354 <memcpy>:
 8004354:	b510      	push	{r4, lr}
 8004356:	1e43      	subs	r3, r0, #1
 8004358:	440a      	add	r2, r1
 800435a:	4291      	cmp	r1, r2
 800435c:	d004      	beq.n	8004368 <memcpy+0x14>
 800435e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004362:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004366:	e7f8      	b.n	800435a <memcpy+0x6>
 8004368:	bd10      	pop	{r4, pc}
	...

0800436c <siprintf>:
 800436c:	b40e      	push	{r1, r2, r3}
 800436e:	b500      	push	{lr}
 8004370:	b09c      	sub	sp, #112	; 0x70
 8004372:	f44f 7102 	mov.w	r1, #520	; 0x208
 8004376:	f8ad 1014 	strh.w	r1, [sp, #20]
 800437a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800437e:	9104      	str	r1, [sp, #16]
 8004380:	9107      	str	r1, [sp, #28]
 8004382:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004386:	ab1d      	add	r3, sp, #116	; 0x74
 8004388:	f8ad 1016 	strh.w	r1, [sp, #22]
 800438c:	4908      	ldr	r1, [pc, #32]	; (80043b0 <siprintf+0x44>)
 800438e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004392:	9002      	str	r0, [sp, #8]
 8004394:	9006      	str	r0, [sp, #24]
 8004396:	6808      	ldr	r0, [r1, #0]
 8004398:	9301      	str	r3, [sp, #4]
 800439a:	a902      	add	r1, sp, #8
 800439c:	f000 f864 	bl	8004468 <_svfiprintf_r>
 80043a0:	9b02      	ldr	r3, [sp, #8]
 80043a2:	2200      	movs	r2, #0
 80043a4:	701a      	strb	r2, [r3, #0]
 80043a6:	b01c      	add	sp, #112	; 0x70
 80043a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80043ac:	b003      	add	sp, #12
 80043ae:	4770      	bx	lr
 80043b0:	20000138 	.word	0x20000138

080043b4 <__ssputs_r>:
 80043b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043b8:	688e      	ldr	r6, [r1, #8]
 80043ba:	42b3      	cmp	r3, r6
 80043bc:	4682      	mov	sl, r0
 80043be:	460c      	mov	r4, r1
 80043c0:	4690      	mov	r8, r2
 80043c2:	4699      	mov	r9, r3
 80043c4:	d340      	bcc.n	8004448 <__ssputs_r+0x94>
 80043c6:	898a      	ldrh	r2, [r1, #12]
 80043c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80043cc:	d03a      	beq.n	8004444 <__ssputs_r+0x90>
 80043ce:	6825      	ldr	r5, [r4, #0]
 80043d0:	6909      	ldr	r1, [r1, #16]
 80043d2:	1a6f      	subs	r7, r5, r1
 80043d4:	6965      	ldr	r5, [r4, #20]
 80043d6:	2302      	movs	r3, #2
 80043d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80043dc:	fb95 f5f3 	sdiv	r5, r5, r3
 80043e0:	1c7b      	adds	r3, r7, #1
 80043e2:	444b      	add	r3, r9
 80043e4:	429d      	cmp	r5, r3
 80043e6:	bf38      	it	cc
 80043e8:	461d      	movcc	r5, r3
 80043ea:	0553      	lsls	r3, r2, #21
 80043ec:	d50f      	bpl.n	800440e <__ssputs_r+0x5a>
 80043ee:	4629      	mov	r1, r5
 80043f0:	f000 fb2a 	bl	8004a48 <_malloc_r>
 80043f4:	4606      	mov	r6, r0
 80043f6:	b198      	cbz	r0, 8004420 <__ssputs_r+0x6c>
 80043f8:	6921      	ldr	r1, [r4, #16]
 80043fa:	463a      	mov	r2, r7
 80043fc:	f7ff ffaa 	bl	8004354 <memcpy>
 8004400:	89a3      	ldrh	r3, [r4, #12]
 8004402:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004406:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800440a:	81a3      	strh	r3, [r4, #12]
 800440c:	e013      	b.n	8004436 <__ssputs_r+0x82>
 800440e:	462a      	mov	r2, r5
 8004410:	f000 fb70 	bl	8004af4 <_realloc_r>
 8004414:	4606      	mov	r6, r0
 8004416:	b970      	cbnz	r0, 8004436 <__ssputs_r+0x82>
 8004418:	4650      	mov	r0, sl
 800441a:	6921      	ldr	r1, [r4, #16]
 800441c:	f000 fad0 	bl	80049c0 <_free_r>
 8004420:	230c      	movs	r3, #12
 8004422:	f8ca 3000 	str.w	r3, [sl]
 8004426:	89a3      	ldrh	r3, [r4, #12]
 8004428:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800442c:	81a3      	strh	r3, [r4, #12]
 800442e:	f04f 30ff 	mov.w	r0, #4294967295
 8004432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004436:	6126      	str	r6, [r4, #16]
 8004438:	6165      	str	r5, [r4, #20]
 800443a:	443e      	add	r6, r7
 800443c:	1bed      	subs	r5, r5, r7
 800443e:	6026      	str	r6, [r4, #0]
 8004440:	60a5      	str	r5, [r4, #8]
 8004442:	464e      	mov	r6, r9
 8004444:	45b1      	cmp	r9, r6
 8004446:	d200      	bcs.n	800444a <__ssputs_r+0x96>
 8004448:	464e      	mov	r6, r9
 800444a:	4632      	mov	r2, r6
 800444c:	6820      	ldr	r0, [r4, #0]
 800444e:	4641      	mov	r1, r8
 8004450:	f000 fa9b 	bl	800498a <memmove>
 8004454:	68a3      	ldr	r3, [r4, #8]
 8004456:	1b9b      	subs	r3, r3, r6
 8004458:	60a3      	str	r3, [r4, #8]
 800445a:	6823      	ldr	r3, [r4, #0]
 800445c:	441e      	add	r6, r3
 800445e:	6026      	str	r6, [r4, #0]
 8004460:	2000      	movs	r0, #0
 8004462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08004468 <_svfiprintf_r>:
 8004468:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800446c:	b09d      	sub	sp, #116	; 0x74
 800446e:	4606      	mov	r6, r0
 8004470:	9303      	str	r3, [sp, #12]
 8004472:	898b      	ldrh	r3, [r1, #12]
 8004474:	061c      	lsls	r4, r3, #24
 8004476:	460d      	mov	r5, r1
 8004478:	4690      	mov	r8, r2
 800447a:	d50c      	bpl.n	8004496 <_svfiprintf_r+0x2e>
 800447c:	690b      	ldr	r3, [r1, #16]
 800447e:	b953      	cbnz	r3, 8004496 <_svfiprintf_r+0x2e>
 8004480:	2140      	movs	r1, #64	; 0x40
 8004482:	f000 fae1 	bl	8004a48 <_malloc_r>
 8004486:	6028      	str	r0, [r5, #0]
 8004488:	6128      	str	r0, [r5, #16]
 800448a:	b910      	cbnz	r0, 8004492 <_svfiprintf_r+0x2a>
 800448c:	230c      	movs	r3, #12
 800448e:	6033      	str	r3, [r6, #0]
 8004490:	e0cc      	b.n	800462c <_svfiprintf_r+0x1c4>
 8004492:	2340      	movs	r3, #64	; 0x40
 8004494:	616b      	str	r3, [r5, #20]
 8004496:	2300      	movs	r3, #0
 8004498:	9309      	str	r3, [sp, #36]	; 0x24
 800449a:	2320      	movs	r3, #32
 800449c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80044a0:	2330      	movs	r3, #48	; 0x30
 80044a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80044a6:	4643      	mov	r3, r8
 80044a8:	461c      	mov	r4, r3
 80044aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80044ae:	b91a      	cbnz	r2, 80044b8 <_svfiprintf_r+0x50>
 80044b0:	ebb4 0908 	subs.w	r9, r4, r8
 80044b4:	d00f      	beq.n	80044d6 <_svfiprintf_r+0x6e>
 80044b6:	e002      	b.n	80044be <_svfiprintf_r+0x56>
 80044b8:	2a25      	cmp	r2, #37	; 0x25
 80044ba:	d1f5      	bne.n	80044a8 <_svfiprintf_r+0x40>
 80044bc:	e7f8      	b.n	80044b0 <_svfiprintf_r+0x48>
 80044be:	4630      	mov	r0, r6
 80044c0:	4629      	mov	r1, r5
 80044c2:	4642      	mov	r2, r8
 80044c4:	464b      	mov	r3, r9
 80044c6:	f7ff ff75 	bl	80043b4 <__ssputs_r>
 80044ca:	3001      	adds	r0, #1
 80044cc:	f000 80a9 	beq.w	8004622 <_svfiprintf_r+0x1ba>
 80044d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044d2:	444b      	add	r3, r9
 80044d4:	9309      	str	r3, [sp, #36]	; 0x24
 80044d6:	7823      	ldrb	r3, [r4, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f000 80a2 	beq.w	8004622 <_svfiprintf_r+0x1ba>
 80044de:	2300      	movs	r3, #0
 80044e0:	f04f 32ff 	mov.w	r2, #4294967295
 80044e4:	9304      	str	r3, [sp, #16]
 80044e6:	9307      	str	r3, [sp, #28]
 80044e8:	9205      	str	r2, [sp, #20]
 80044ea:	9306      	str	r3, [sp, #24]
 80044ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80044f0:	931a      	str	r3, [sp, #104]	; 0x68
 80044f2:	f104 0801 	add.w	r8, r4, #1
 80044f6:	4644      	mov	r4, r8
 80044f8:	f8df 9148 	ldr.w	r9, [pc, #328]	; 8004644 <_svfiprintf_r+0x1dc>
 80044fc:	7821      	ldrb	r1, [r4, #0]
 80044fe:	4648      	mov	r0, r9
 8004500:	2205      	movs	r2, #5
 8004502:	f000 fa33 	bl	800496c <memchr>
 8004506:	f108 0801 	add.w	r8, r8, #1
 800450a:	9b04      	ldr	r3, [sp, #16]
 800450c:	b130      	cbz	r0, 800451c <_svfiprintf_r+0xb4>
 800450e:	ebc9 0000 	rsb	r0, r9, r0
 8004512:	2201      	movs	r2, #1
 8004514:	4082      	lsls	r2, r0
 8004516:	4313      	orrs	r3, r2
 8004518:	9304      	str	r3, [sp, #16]
 800451a:	e7ec      	b.n	80044f6 <_svfiprintf_r+0x8e>
 800451c:	06d8      	lsls	r0, r3, #27
 800451e:	bf44      	itt	mi
 8004520:	2220      	movmi	r2, #32
 8004522:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004526:	0719      	lsls	r1, r3, #28
 8004528:	bf44      	itt	mi
 800452a:	222b      	movmi	r2, #43	; 0x2b
 800452c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004530:	7822      	ldrb	r2, [r4, #0]
 8004532:	2a2a      	cmp	r2, #42	; 0x2a
 8004534:	d002      	beq.n	800453c <_svfiprintf_r+0xd4>
 8004536:	9907      	ldr	r1, [sp, #28]
 8004538:	4623      	mov	r3, r4
 800453a:	e00e      	b.n	800455a <_svfiprintf_r+0xf2>
 800453c:	9a03      	ldr	r2, [sp, #12]
 800453e:	1d11      	adds	r1, r2, #4
 8004540:	6812      	ldr	r2, [r2, #0]
 8004542:	9103      	str	r1, [sp, #12]
 8004544:	2a00      	cmp	r2, #0
 8004546:	bfbb      	ittet	lt
 8004548:	4252      	neglt	r2, r2
 800454a:	f043 0302 	orrlt.w	r3, r3, #2
 800454e:	9207      	strge	r2, [sp, #28]
 8004550:	9207      	strlt	r2, [sp, #28]
 8004552:	bfb8      	it	lt
 8004554:	9304      	strlt	r3, [sp, #16]
 8004556:	3401      	adds	r4, #1
 8004558:	e00a      	b.n	8004570 <_svfiprintf_r+0x108>
 800455a:	461c      	mov	r4, r3
 800455c:	3301      	adds	r3, #1
 800455e:	7822      	ldrb	r2, [r4, #0]
 8004560:	3a30      	subs	r2, #48	; 0x30
 8004562:	2a09      	cmp	r2, #9
 8004564:	d803      	bhi.n	800456e <_svfiprintf_r+0x106>
 8004566:	200a      	movs	r0, #10
 8004568:	fb00 2101 	mla	r1, r0, r1, r2
 800456c:	e7f5      	b.n	800455a <_svfiprintf_r+0xf2>
 800456e:	9107      	str	r1, [sp, #28]
 8004570:	7823      	ldrb	r3, [r4, #0]
 8004572:	2b2e      	cmp	r3, #46	; 0x2e
 8004574:	d11a      	bne.n	80045ac <_svfiprintf_r+0x144>
 8004576:	7863      	ldrb	r3, [r4, #1]
 8004578:	2b2a      	cmp	r3, #42	; 0x2a
 800457a:	d10a      	bne.n	8004592 <_svfiprintf_r+0x12a>
 800457c:	9b03      	ldr	r3, [sp, #12]
 800457e:	1d1a      	adds	r2, r3, #4
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	9203      	str	r2, [sp, #12]
 8004584:	2b00      	cmp	r3, #0
 8004586:	bfb8      	it	lt
 8004588:	f04f 33ff 	movlt.w	r3, #4294967295
 800458c:	3402      	adds	r4, #2
 800458e:	9305      	str	r3, [sp, #20]
 8004590:	e00c      	b.n	80045ac <_svfiprintf_r+0x144>
 8004592:	1c61      	adds	r1, r4, #1
 8004594:	2200      	movs	r2, #0
 8004596:	460c      	mov	r4, r1
 8004598:	3101      	adds	r1, #1
 800459a:	7823      	ldrb	r3, [r4, #0]
 800459c:	3b30      	subs	r3, #48	; 0x30
 800459e:	2b09      	cmp	r3, #9
 80045a0:	d803      	bhi.n	80045aa <_svfiprintf_r+0x142>
 80045a2:	200a      	movs	r0, #10
 80045a4:	fb00 3202 	mla	r2, r0, r2, r3
 80045a8:	e7f5      	b.n	8004596 <_svfiprintf_r+0x12e>
 80045aa:	9205      	str	r2, [sp, #20]
 80045ac:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8004648 <_svfiprintf_r+0x1e0>
 80045b0:	7821      	ldrb	r1, [r4, #0]
 80045b2:	4640      	mov	r0, r8
 80045b4:	2203      	movs	r2, #3
 80045b6:	f000 f9d9 	bl	800496c <memchr>
 80045ba:	b138      	cbz	r0, 80045cc <_svfiprintf_r+0x164>
 80045bc:	9a04      	ldr	r2, [sp, #16]
 80045be:	ebc8 0000 	rsb	r0, r8, r0
 80045c2:	2340      	movs	r3, #64	; 0x40
 80045c4:	4083      	lsls	r3, r0
 80045c6:	4313      	orrs	r3, r2
 80045c8:	9304      	str	r3, [sp, #16]
 80045ca:	3401      	adds	r4, #1
 80045cc:	7821      	ldrb	r1, [r4, #0]
 80045ce:	481a      	ldr	r0, [pc, #104]	; (8004638 <_svfiprintf_r+0x1d0>)
 80045d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80045d4:	2206      	movs	r2, #6
 80045d6:	f104 0801 	add.w	r8, r4, #1
 80045da:	f000 f9c7 	bl	800496c <memchr>
 80045de:	b188      	cbz	r0, 8004604 <_svfiprintf_r+0x19c>
 80045e0:	4b16      	ldr	r3, [pc, #88]	; (800463c <_svfiprintf_r+0x1d4>)
 80045e2:	b933      	cbnz	r3, 80045f2 <_svfiprintf_r+0x18a>
 80045e4:	9b03      	ldr	r3, [sp, #12]
 80045e6:	3307      	adds	r3, #7
 80045e8:	f023 0307 	bic.w	r3, r3, #7
 80045ec:	3308      	adds	r3, #8
 80045ee:	9303      	str	r3, [sp, #12]
 80045f0:	e013      	b.n	800461a <_svfiprintf_r+0x1b2>
 80045f2:	ab03      	add	r3, sp, #12
 80045f4:	9300      	str	r3, [sp, #0]
 80045f6:	4630      	mov	r0, r6
 80045f8:	a904      	add	r1, sp, #16
 80045fa:	462a      	mov	r2, r5
 80045fc:	4b10      	ldr	r3, [pc, #64]	; (8004640 <_svfiprintf_r+0x1d8>)
 80045fe:	f3af 8000 	nop.w
 8004602:	e007      	b.n	8004614 <_svfiprintf_r+0x1ac>
 8004604:	ab03      	add	r3, sp, #12
 8004606:	9300      	str	r3, [sp, #0]
 8004608:	4630      	mov	r0, r6
 800460a:	a904      	add	r1, sp, #16
 800460c:	462a      	mov	r2, r5
 800460e:	4b0c      	ldr	r3, [pc, #48]	; (8004640 <_svfiprintf_r+0x1d8>)
 8004610:	f000 f892 	bl	8004738 <_printf_i>
 8004614:	1c42      	adds	r2, r0, #1
 8004616:	4607      	mov	r7, r0
 8004618:	d003      	beq.n	8004622 <_svfiprintf_r+0x1ba>
 800461a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800461c:	443b      	add	r3, r7
 800461e:	9309      	str	r3, [sp, #36]	; 0x24
 8004620:	e741      	b.n	80044a6 <_svfiprintf_r+0x3e>
 8004622:	89ab      	ldrh	r3, [r5, #12]
 8004624:	065b      	lsls	r3, r3, #25
 8004626:	d401      	bmi.n	800462c <_svfiprintf_r+0x1c4>
 8004628:	9809      	ldr	r0, [sp, #36]	; 0x24
 800462a:	e001      	b.n	8004630 <_svfiprintf_r+0x1c8>
 800462c:	f04f 30ff 	mov.w	r0, #4294967295
 8004630:	b01d      	add	sp, #116	; 0x74
 8004632:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004636:	bf00      	nop
 8004638:	080052a8 	.word	0x080052a8
 800463c:	00000000 	.word	0x00000000
 8004640:	080043b5 	.word	0x080043b5
 8004644:	0800529e 	.word	0x0800529e
 8004648:	080052a4 	.word	0x080052a4

0800464c <_printf_common>:
 800464c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004650:	4691      	mov	r9, r2
 8004652:	461f      	mov	r7, r3
 8004654:	688a      	ldr	r2, [r1, #8]
 8004656:	690b      	ldr	r3, [r1, #16]
 8004658:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800465c:	4293      	cmp	r3, r2
 800465e:	bfb8      	it	lt
 8004660:	4613      	movlt	r3, r2
 8004662:	f8c9 3000 	str.w	r3, [r9]
 8004666:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800466a:	4606      	mov	r6, r0
 800466c:	460c      	mov	r4, r1
 800466e:	b112      	cbz	r2, 8004676 <_printf_common+0x2a>
 8004670:	3301      	adds	r3, #1
 8004672:	f8c9 3000 	str.w	r3, [r9]
 8004676:	6823      	ldr	r3, [r4, #0]
 8004678:	0699      	lsls	r1, r3, #26
 800467a:	bf42      	ittt	mi
 800467c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004680:	3302      	addmi	r3, #2
 8004682:	f8c9 3000 	strmi.w	r3, [r9]
 8004686:	6825      	ldr	r5, [r4, #0]
 8004688:	f015 0506 	ands.w	r5, r5, #6
 800468c:	d01c      	beq.n	80046c8 <_printf_common+0x7c>
 800468e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004692:	6822      	ldr	r2, [r4, #0]
 8004694:	3300      	adds	r3, #0
 8004696:	bf18      	it	ne
 8004698:	2301      	movne	r3, #1
 800469a:	0692      	lsls	r2, r2, #26
 800469c:	d51f      	bpl.n	80046de <_printf_common+0x92>
 800469e:	18e1      	adds	r1, r4, r3
 80046a0:	1c5a      	adds	r2, r3, #1
 80046a2:	2030      	movs	r0, #48	; 0x30
 80046a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80046a8:	4422      	add	r2, r4
 80046aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80046ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80046b2:	3302      	adds	r3, #2
 80046b4:	e013      	b.n	80046de <_printf_common+0x92>
 80046b6:	4630      	mov	r0, r6
 80046b8:	4639      	mov	r1, r7
 80046ba:	f104 0219 	add.w	r2, r4, #25
 80046be:	2301      	movs	r3, #1
 80046c0:	47c0      	blx	r8
 80046c2:	3001      	adds	r0, #1
 80046c4:	d007      	beq.n	80046d6 <_printf_common+0x8a>
 80046c6:	3501      	adds	r5, #1
 80046c8:	68e3      	ldr	r3, [r4, #12]
 80046ca:	f8d9 2000 	ldr.w	r2, [r9]
 80046ce:	1a9b      	subs	r3, r3, r2
 80046d0:	429d      	cmp	r5, r3
 80046d2:	dbf0      	blt.n	80046b6 <_printf_common+0x6a>
 80046d4:	e7db      	b.n	800468e <_printf_common+0x42>
 80046d6:	f04f 30ff 	mov.w	r0, #4294967295
 80046da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046de:	4630      	mov	r0, r6
 80046e0:	4639      	mov	r1, r7
 80046e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80046e6:	47c0      	blx	r8
 80046e8:	3001      	adds	r0, #1
 80046ea:	d0f4      	beq.n	80046d6 <_printf_common+0x8a>
 80046ec:	6822      	ldr	r2, [r4, #0]
 80046ee:	f8d9 5000 	ldr.w	r5, [r9]
 80046f2:	68e3      	ldr	r3, [r4, #12]
 80046f4:	f002 0206 	and.w	r2, r2, #6
 80046f8:	2a04      	cmp	r2, #4
 80046fa:	bf08      	it	eq
 80046fc:	1b5d      	subeq	r5, r3, r5
 80046fe:	6922      	ldr	r2, [r4, #16]
 8004700:	68a3      	ldr	r3, [r4, #8]
 8004702:	bf0c      	ite	eq
 8004704:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004708:	2500      	movne	r5, #0
 800470a:	4293      	cmp	r3, r2
 800470c:	bfc4      	itt	gt
 800470e:	1a9b      	subgt	r3, r3, r2
 8004710:	18ed      	addgt	r5, r5, r3
 8004712:	f04f 0900 	mov.w	r9, #0
 8004716:	45a9      	cmp	r9, r5
 8004718:	da0a      	bge.n	8004730 <_printf_common+0xe4>
 800471a:	4630      	mov	r0, r6
 800471c:	4639      	mov	r1, r7
 800471e:	f104 021a 	add.w	r2, r4, #26
 8004722:	2301      	movs	r3, #1
 8004724:	47c0      	blx	r8
 8004726:	3001      	adds	r0, #1
 8004728:	d0d5      	beq.n	80046d6 <_printf_common+0x8a>
 800472a:	f109 0901 	add.w	r9, r9, #1
 800472e:	e7f2      	b.n	8004716 <_printf_common+0xca>
 8004730:	2000      	movs	r0, #0
 8004732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08004738 <_printf_i>:
 8004738:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800473c:	460c      	mov	r4, r1
 800473e:	4617      	mov	r7, r2
 8004740:	7e22      	ldrb	r2, [r4, #24]
 8004742:	2a6e      	cmp	r2, #110	; 0x6e
 8004744:	4698      	mov	r8, r3
 8004746:	4606      	mov	r6, r0
 8004748:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800474a:	f101 0143 	add.w	r1, r1, #67	; 0x43
 800474e:	f000 80a9 	beq.w	80048a4 <_printf_i+0x16c>
 8004752:	d812      	bhi.n	800477a <_printf_i+0x42>
 8004754:	2a63      	cmp	r2, #99	; 0x63
 8004756:	d023      	beq.n	80047a0 <_printf_i+0x68>
 8004758:	d80a      	bhi.n	8004770 <_printf_i+0x38>
 800475a:	2a00      	cmp	r2, #0
 800475c:	f000 80b6 	beq.w	80048cc <_printf_i+0x194>
 8004760:	2a58      	cmp	r2, #88	; 0x58
 8004762:	f040 80c5 	bne.w	80048f0 <_printf_i+0x1b8>
 8004766:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800476a:	f8df e1f8 	ldr.w	lr, [pc, #504]	; 8004964 <_printf_i+0x22c>
 800476e:	e051      	b.n	8004814 <_printf_i+0xdc>
 8004770:	2a64      	cmp	r2, #100	; 0x64
 8004772:	d01e      	beq.n	80047b2 <_printf_i+0x7a>
 8004774:	2a69      	cmp	r2, #105	; 0x69
 8004776:	d01c      	beq.n	80047b2 <_printf_i+0x7a>
 8004778:	e0ba      	b.n	80048f0 <_printf_i+0x1b8>
 800477a:	2a73      	cmp	r2, #115	; 0x73
 800477c:	f000 80aa 	beq.w	80048d4 <_printf_i+0x19c>
 8004780:	d809      	bhi.n	8004796 <_printf_i+0x5e>
 8004782:	2a6f      	cmp	r2, #111	; 0x6f
 8004784:	d02b      	beq.n	80047de <_printf_i+0xa6>
 8004786:	2a70      	cmp	r2, #112	; 0x70
 8004788:	f040 80b2 	bne.w	80048f0 <_printf_i+0x1b8>
 800478c:	6822      	ldr	r2, [r4, #0]
 800478e:	f042 0220 	orr.w	r2, r2, #32
 8004792:	6022      	str	r2, [r4, #0]
 8004794:	e039      	b.n	800480a <_printf_i+0xd2>
 8004796:	2a75      	cmp	r2, #117	; 0x75
 8004798:	d021      	beq.n	80047de <_printf_i+0xa6>
 800479a:	2a78      	cmp	r2, #120	; 0x78
 800479c:	d035      	beq.n	800480a <_printf_i+0xd2>
 800479e:	e0a7      	b.n	80048f0 <_printf_i+0x1b8>
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	1d11      	adds	r1, r2, #4
 80047a4:	6019      	str	r1, [r3, #0]
 80047a6:	6813      	ldr	r3, [r2, #0]
 80047a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047b0:	e0a2      	b.n	80048f8 <_printf_i+0x1c0>
 80047b2:	6820      	ldr	r0, [r4, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80047ba:	d003      	beq.n	80047c4 <_printf_i+0x8c>
 80047bc:	1d10      	adds	r0, r2, #4
 80047be:	6018      	str	r0, [r3, #0]
 80047c0:	6813      	ldr	r3, [r2, #0]
 80047c2:	e005      	b.n	80047d0 <_printf_i+0x98>
 80047c4:	0645      	lsls	r5, r0, #25
 80047c6:	d5f9      	bpl.n	80047bc <_printf_i+0x84>
 80047c8:	1d10      	adds	r0, r2, #4
 80047ca:	6018      	str	r0, [r3, #0]
 80047cc:	f9b2 3000 	ldrsh.w	r3, [r2]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	da3b      	bge.n	800484c <_printf_i+0x114>
 80047d4:	222d      	movs	r2, #45	; 0x2d
 80047d6:	425b      	negs	r3, r3
 80047d8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80047dc:	e036      	b.n	800484c <_printf_i+0x114>
 80047de:	6820      	ldr	r0, [r4, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80047e6:	d003      	beq.n	80047f0 <_printf_i+0xb8>
 80047e8:	1d10      	adds	r0, r2, #4
 80047ea:	6018      	str	r0, [r3, #0]
 80047ec:	6813      	ldr	r3, [r2, #0]
 80047ee:	e004      	b.n	80047fa <_printf_i+0xc2>
 80047f0:	0640      	lsls	r0, r0, #25
 80047f2:	d5f9      	bpl.n	80047e8 <_printf_i+0xb0>
 80047f4:	1d10      	adds	r0, r2, #4
 80047f6:	6018      	str	r0, [r3, #0]
 80047f8:	8813      	ldrh	r3, [r2, #0]
 80047fa:	7e22      	ldrb	r2, [r4, #24]
 80047fc:	f8df e164 	ldr.w	lr, [pc, #356]	; 8004964 <_printf_i+0x22c>
 8004800:	2a6f      	cmp	r2, #111	; 0x6f
 8004802:	bf0c      	ite	eq
 8004804:	2208      	moveq	r2, #8
 8004806:	220a      	movne	r2, #10
 8004808:	e01c      	b.n	8004844 <_printf_i+0x10c>
 800480a:	2278      	movs	r2, #120	; 0x78
 800480c:	f8df e158 	ldr.w	lr, [pc, #344]	; 8004968 <_printf_i+0x230>
 8004810:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8004814:	6822      	ldr	r2, [r4, #0]
 8004816:	6818      	ldr	r0, [r3, #0]
 8004818:	f012 0f80 	tst.w	r2, #128	; 0x80
 800481c:	f100 0504 	add.w	r5, r0, #4
 8004820:	601d      	str	r5, [r3, #0]
 8004822:	d001      	beq.n	8004828 <_printf_i+0xf0>
 8004824:	6803      	ldr	r3, [r0, #0]
 8004826:	e002      	b.n	800482e <_printf_i+0xf6>
 8004828:	0655      	lsls	r5, r2, #25
 800482a:	d5fb      	bpl.n	8004824 <_printf_i+0xec>
 800482c:	8803      	ldrh	r3, [r0, #0]
 800482e:	07d0      	lsls	r0, r2, #31
 8004830:	bf44      	itt	mi
 8004832:	f042 0220 	orrmi.w	r2, r2, #32
 8004836:	6022      	strmi	r2, [r4, #0]
 8004838:	b91b      	cbnz	r3, 8004842 <_printf_i+0x10a>
 800483a:	6822      	ldr	r2, [r4, #0]
 800483c:	f022 0220 	bic.w	r2, r2, #32
 8004840:	6022      	str	r2, [r4, #0]
 8004842:	2210      	movs	r2, #16
 8004844:	2000      	movs	r0, #0
 8004846:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800484a:	e002      	b.n	8004852 <_printf_i+0x11a>
 800484c:	f8df e114 	ldr.w	lr, [pc, #276]	; 8004964 <_printf_i+0x22c>
 8004850:	220a      	movs	r2, #10
 8004852:	6865      	ldr	r5, [r4, #4]
 8004854:	60a5      	str	r5, [r4, #8]
 8004856:	2d00      	cmp	r5, #0
 8004858:	bfa2      	ittt	ge
 800485a:	6820      	ldrge	r0, [r4, #0]
 800485c:	f020 0004 	bicge.w	r0, r0, #4
 8004860:	6020      	strge	r0, [r4, #0]
 8004862:	b903      	cbnz	r3, 8004866 <_printf_i+0x12e>
 8004864:	b165      	cbz	r5, 8004880 <_printf_i+0x148>
 8004866:	460d      	mov	r5, r1
 8004868:	fbb3 f0f2 	udiv	r0, r3, r2
 800486c:	fb02 3310 	mls	r3, r2, r0, r3
 8004870:	f81e 3003 	ldrb.w	r3, [lr, r3]
 8004874:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004878:	4603      	mov	r3, r0
 800487a:	2800      	cmp	r0, #0
 800487c:	d1f4      	bne.n	8004868 <_printf_i+0x130>
 800487e:	e000      	b.n	8004882 <_printf_i+0x14a>
 8004880:	460d      	mov	r5, r1
 8004882:	2a08      	cmp	r2, #8
 8004884:	d10b      	bne.n	800489e <_printf_i+0x166>
 8004886:	6823      	ldr	r3, [r4, #0]
 8004888:	07da      	lsls	r2, r3, #31
 800488a:	d508      	bpl.n	800489e <_printf_i+0x166>
 800488c:	6923      	ldr	r3, [r4, #16]
 800488e:	6862      	ldr	r2, [r4, #4]
 8004890:	429a      	cmp	r2, r3
 8004892:	bfde      	ittt	le
 8004894:	2330      	movle	r3, #48	; 0x30
 8004896:	f805 3c01 	strble.w	r3, [r5, #-1]
 800489a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800489e:	1b49      	subs	r1, r1, r5
 80048a0:	6121      	str	r1, [r4, #16]
 80048a2:	e02e      	b.n	8004902 <_printf_i+0x1ca>
 80048a4:	6825      	ldr	r5, [r4, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	6960      	ldr	r0, [r4, #20]
 80048aa:	f015 0f80 	tst.w	r5, #128	; 0x80
 80048ae:	d003      	beq.n	80048b8 <_printf_i+0x180>
 80048b0:	1d15      	adds	r5, r2, #4
 80048b2:	601d      	str	r5, [r3, #0]
 80048b4:	6813      	ldr	r3, [r2, #0]
 80048b6:	e008      	b.n	80048ca <_printf_i+0x192>
 80048b8:	f015 0f40 	tst.w	r5, #64	; 0x40
 80048bc:	f102 0504 	add.w	r5, r2, #4
 80048c0:	601d      	str	r5, [r3, #0]
 80048c2:	6813      	ldr	r3, [r2, #0]
 80048c4:	d001      	beq.n	80048ca <_printf_i+0x192>
 80048c6:	8018      	strh	r0, [r3, #0]
 80048c8:	e000      	b.n	80048cc <_printf_i+0x194>
 80048ca:	6018      	str	r0, [r3, #0]
 80048cc:	2300      	movs	r3, #0
 80048ce:	6123      	str	r3, [r4, #16]
 80048d0:	460d      	mov	r5, r1
 80048d2:	e016      	b.n	8004902 <_printf_i+0x1ca>
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	1d11      	adds	r1, r2, #4
 80048d8:	6019      	str	r1, [r3, #0]
 80048da:	6815      	ldr	r5, [r2, #0]
 80048dc:	6862      	ldr	r2, [r4, #4]
 80048de:	4628      	mov	r0, r5
 80048e0:	2100      	movs	r1, #0
 80048e2:	f000 f843 	bl	800496c <memchr>
 80048e6:	b108      	cbz	r0, 80048ec <_printf_i+0x1b4>
 80048e8:	1b40      	subs	r0, r0, r5
 80048ea:	6060      	str	r0, [r4, #4]
 80048ec:	6863      	ldr	r3, [r4, #4]
 80048ee:	e004      	b.n	80048fa <_printf_i+0x1c2>
 80048f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048f4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80048f8:	2301      	movs	r3, #1
 80048fa:	6123      	str	r3, [r4, #16]
 80048fc:	2300      	movs	r3, #0
 80048fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004902:	f8cd 8000 	str.w	r8, [sp]
 8004906:	4630      	mov	r0, r6
 8004908:	4621      	mov	r1, r4
 800490a:	aa03      	add	r2, sp, #12
 800490c:	463b      	mov	r3, r7
 800490e:	f7ff fe9d 	bl	800464c <_printf_common>
 8004912:	3001      	adds	r0, #1
 8004914:	d102      	bne.n	800491c <_printf_i+0x1e4>
 8004916:	f04f 30ff 	mov.w	r0, #4294967295
 800491a:	e01f      	b.n	800495c <_printf_i+0x224>
 800491c:	4630      	mov	r0, r6
 800491e:	4639      	mov	r1, r7
 8004920:	462a      	mov	r2, r5
 8004922:	6923      	ldr	r3, [r4, #16]
 8004924:	47c0      	blx	r8
 8004926:	3001      	adds	r0, #1
 8004928:	d0f5      	beq.n	8004916 <_printf_i+0x1de>
 800492a:	6823      	ldr	r3, [r4, #0]
 800492c:	079b      	lsls	r3, r3, #30
 800492e:	d405      	bmi.n	800493c <_printf_i+0x204>
 8004930:	68e0      	ldr	r0, [r4, #12]
 8004932:	9b03      	ldr	r3, [sp, #12]
 8004934:	4298      	cmp	r0, r3
 8004936:	bfb8      	it	lt
 8004938:	4618      	movlt	r0, r3
 800493a:	e00f      	b.n	800495c <_printf_i+0x224>
 800493c:	2500      	movs	r5, #0
 800493e:	68e3      	ldr	r3, [r4, #12]
 8004940:	9a03      	ldr	r2, [sp, #12]
 8004942:	1a9b      	subs	r3, r3, r2
 8004944:	429d      	cmp	r5, r3
 8004946:	daf3      	bge.n	8004930 <_printf_i+0x1f8>
 8004948:	4630      	mov	r0, r6
 800494a:	4639      	mov	r1, r7
 800494c:	f104 0219 	add.w	r2, r4, #25
 8004950:	2301      	movs	r3, #1
 8004952:	47c0      	blx	r8
 8004954:	3001      	adds	r0, #1
 8004956:	d0de      	beq.n	8004916 <_printf_i+0x1de>
 8004958:	3501      	adds	r5, #1
 800495a:	e7f0      	b.n	800493e <_printf_i+0x206>
 800495c:	b004      	add	sp, #16
 800495e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004962:	bf00      	nop
 8004964:	080052af 	.word	0x080052af
 8004968:	080052c0 	.word	0x080052c0

0800496c <memchr>:
 800496c:	b510      	push	{r4, lr}
 800496e:	b2c9      	uxtb	r1, r1
 8004970:	4402      	add	r2, r0
 8004972:	4290      	cmp	r0, r2
 8004974:	4603      	mov	r3, r0
 8004976:	d006      	beq.n	8004986 <memchr+0x1a>
 8004978:	781c      	ldrb	r4, [r3, #0]
 800497a:	428c      	cmp	r4, r1
 800497c:	f100 0001 	add.w	r0, r0, #1
 8004980:	d1f7      	bne.n	8004972 <memchr+0x6>
 8004982:	4618      	mov	r0, r3
 8004984:	bd10      	pop	{r4, pc}
 8004986:	2000      	movs	r0, #0
 8004988:	bd10      	pop	{r4, pc}

0800498a <memmove>:
 800498a:	4281      	cmp	r1, r0
 800498c:	b510      	push	{r4, lr}
 800498e:	eb01 0302 	add.w	r3, r1, r2
 8004992:	d301      	bcc.n	8004998 <memmove+0xe>
 8004994:	1e42      	subs	r2, r0, #1
 8004996:	e00b      	b.n	80049b0 <memmove+0x26>
 8004998:	4298      	cmp	r0, r3
 800499a:	d2fb      	bcs.n	8004994 <memmove+0xa>
 800499c:	1881      	adds	r1, r0, r2
 800499e:	1ad2      	subs	r2, r2, r3
 80049a0:	42d3      	cmn	r3, r2
 80049a2:	d004      	beq.n	80049ae <memmove+0x24>
 80049a4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80049a8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80049ac:	e7f8      	b.n	80049a0 <memmove+0x16>
 80049ae:	bd10      	pop	{r4, pc}
 80049b0:	4299      	cmp	r1, r3
 80049b2:	d004      	beq.n	80049be <memmove+0x34>
 80049b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049b8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80049bc:	e7f8      	b.n	80049b0 <memmove+0x26>
 80049be:	bd10      	pop	{r4, pc}

080049c0 <_free_r>:
 80049c0:	b530      	push	{r4, r5, lr}
 80049c2:	2900      	cmp	r1, #0
 80049c4:	d03d      	beq.n	8004a42 <_free_r+0x82>
 80049c6:	f851 2c04 	ldr.w	r2, [r1, #-4]
 80049ca:	1f0b      	subs	r3, r1, #4
 80049cc:	491d      	ldr	r1, [pc, #116]	; (8004a44 <_free_r+0x84>)
 80049ce:	2a00      	cmp	r2, #0
 80049d0:	bfb8      	it	lt
 80049d2:	189b      	addlt	r3, r3, r2
 80049d4:	680a      	ldr	r2, [r1, #0]
 80049d6:	460c      	mov	r4, r1
 80049d8:	b912      	cbnz	r2, 80049e0 <_free_r+0x20>
 80049da:	605a      	str	r2, [r3, #4]
 80049dc:	600b      	str	r3, [r1, #0]
 80049de:	bd30      	pop	{r4, r5, pc}
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d20d      	bcs.n	8004a00 <_free_r+0x40>
 80049e4:	6819      	ldr	r1, [r3, #0]
 80049e6:	1858      	adds	r0, r3, r1
 80049e8:	4290      	cmp	r0, r2
 80049ea:	bf01      	itttt	eq
 80049ec:	585a      	ldreq	r2, [r3, r1]
 80049ee:	1852      	addeq	r2, r2, r1
 80049f0:	601a      	streq	r2, [r3, #0]
 80049f2:	6842      	ldreq	r2, [r0, #4]
 80049f4:	605a      	str	r2, [r3, #4]
 80049f6:	6023      	str	r3, [r4, #0]
 80049f8:	bd30      	pop	{r4, r5, pc}
 80049fa:	4299      	cmp	r1, r3
 80049fc:	d803      	bhi.n	8004a06 <_free_r+0x46>
 80049fe:	460a      	mov	r2, r1
 8004a00:	6851      	ldr	r1, [r2, #4]
 8004a02:	2900      	cmp	r1, #0
 8004a04:	d1f9      	bne.n	80049fa <_free_r+0x3a>
 8004a06:	6814      	ldr	r4, [r2, #0]
 8004a08:	1915      	adds	r5, r2, r4
 8004a0a:	429d      	cmp	r5, r3
 8004a0c:	d10a      	bne.n	8004a24 <_free_r+0x64>
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4423      	add	r3, r4
 8004a12:	18d0      	adds	r0, r2, r3
 8004a14:	4288      	cmp	r0, r1
 8004a16:	6013      	str	r3, [r2, #0]
 8004a18:	d113      	bne.n	8004a42 <_free_r+0x82>
 8004a1a:	6808      	ldr	r0, [r1, #0]
 8004a1c:	4403      	add	r3, r0
 8004a1e:	6013      	str	r3, [r2, #0]
 8004a20:	684b      	ldr	r3, [r1, #4]
 8004a22:	e00d      	b.n	8004a40 <_free_r+0x80>
 8004a24:	d902      	bls.n	8004a2c <_free_r+0x6c>
 8004a26:	230c      	movs	r3, #12
 8004a28:	6003      	str	r3, [r0, #0]
 8004a2a:	bd30      	pop	{r4, r5, pc}
 8004a2c:	681c      	ldr	r4, [r3, #0]
 8004a2e:	1918      	adds	r0, r3, r4
 8004a30:	4288      	cmp	r0, r1
 8004a32:	bf04      	itt	eq
 8004a34:	6808      	ldreq	r0, [r1, #0]
 8004a36:	6849      	ldreq	r1, [r1, #4]
 8004a38:	6059      	str	r1, [r3, #4]
 8004a3a:	bf04      	itt	eq
 8004a3c:	1900      	addeq	r0, r0, r4
 8004a3e:	6018      	streq	r0, [r3, #0]
 8004a40:	6053      	str	r3, [r2, #4]
 8004a42:	bd30      	pop	{r4, r5, pc}
 8004a44:	20000358 	.word	0x20000358

08004a48 <_malloc_r>:
 8004a48:	b570      	push	{r4, r5, r6, lr}
 8004a4a:	1ccc      	adds	r4, r1, #3
 8004a4c:	f024 0403 	bic.w	r4, r4, #3
 8004a50:	3408      	adds	r4, #8
 8004a52:	2c0c      	cmp	r4, #12
 8004a54:	bf38      	it	cc
 8004a56:	240c      	movcc	r4, #12
 8004a58:	2c00      	cmp	r4, #0
 8004a5a:	4606      	mov	r6, r0
 8004a5c:	da03      	bge.n	8004a66 <_malloc_r+0x1e>
 8004a5e:	230c      	movs	r3, #12
 8004a60:	6033      	str	r3, [r6, #0]
 8004a62:	2000      	movs	r0, #0
 8004a64:	bd70      	pop	{r4, r5, r6, pc}
 8004a66:	428c      	cmp	r4, r1
 8004a68:	d3f9      	bcc.n	8004a5e <_malloc_r+0x16>
 8004a6a:	4a20      	ldr	r2, [pc, #128]	; (8004aec <_malloc_r+0xa4>)
 8004a6c:	6813      	ldr	r3, [r2, #0]
 8004a6e:	4610      	mov	r0, r2
 8004a70:	4619      	mov	r1, r3
 8004a72:	b1a1      	cbz	r1, 8004a9e <_malloc_r+0x56>
 8004a74:	680a      	ldr	r2, [r1, #0]
 8004a76:	1b12      	subs	r2, r2, r4
 8004a78:	d40e      	bmi.n	8004a98 <_malloc_r+0x50>
 8004a7a:	2a0b      	cmp	r2, #11
 8004a7c:	d903      	bls.n	8004a86 <_malloc_r+0x3e>
 8004a7e:	600a      	str	r2, [r1, #0]
 8004a80:	188b      	adds	r3, r1, r2
 8004a82:	508c      	str	r4, [r1, r2]
 8004a84:	e01f      	b.n	8004ac6 <_malloc_r+0x7e>
 8004a86:	428b      	cmp	r3, r1
 8004a88:	bf0d      	iteet	eq
 8004a8a:	685a      	ldreq	r2, [r3, #4]
 8004a8c:	684a      	ldrne	r2, [r1, #4]
 8004a8e:	605a      	strne	r2, [r3, #4]
 8004a90:	6002      	streq	r2, [r0, #0]
 8004a92:	bf18      	it	ne
 8004a94:	460b      	movne	r3, r1
 8004a96:	e016      	b.n	8004ac6 <_malloc_r+0x7e>
 8004a98:	460b      	mov	r3, r1
 8004a9a:	6849      	ldr	r1, [r1, #4]
 8004a9c:	e7e9      	b.n	8004a72 <_malloc_r+0x2a>
 8004a9e:	4d14      	ldr	r5, [pc, #80]	; (8004af0 <_malloc_r+0xa8>)
 8004aa0:	682b      	ldr	r3, [r5, #0]
 8004aa2:	b91b      	cbnz	r3, 8004aac <_malloc_r+0x64>
 8004aa4:	4630      	mov	r0, r6
 8004aa6:	f000 f84b 	bl	8004b40 <_sbrk_r>
 8004aaa:	6028      	str	r0, [r5, #0]
 8004aac:	4630      	mov	r0, r6
 8004aae:	4621      	mov	r1, r4
 8004ab0:	f000 f846 	bl	8004b40 <_sbrk_r>
 8004ab4:	1c42      	adds	r2, r0, #1
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	d0d1      	beq.n	8004a5e <_malloc_r+0x16>
 8004aba:	1cc5      	adds	r5, r0, #3
 8004abc:	f025 0503 	bic.w	r5, r5, #3
 8004ac0:	4285      	cmp	r5, r0
 8004ac2:	d10a      	bne.n	8004ada <_malloc_r+0x92>
 8004ac4:	601c      	str	r4, [r3, #0]
 8004ac6:	f103 000b 	add.w	r0, r3, #11
 8004aca:	1d1a      	adds	r2, r3, #4
 8004acc:	f020 0007 	bic.w	r0, r0, #7
 8004ad0:	1a82      	subs	r2, r0, r2
 8004ad2:	d00a      	beq.n	8004aea <_malloc_r+0xa2>
 8004ad4:	4251      	negs	r1, r2
 8004ad6:	5099      	str	r1, [r3, r2]
 8004ad8:	bd70      	pop	{r4, r5, r6, pc}
 8004ada:	4630      	mov	r0, r6
 8004adc:	1ae9      	subs	r1, r5, r3
 8004ade:	f000 f82f 	bl	8004b40 <_sbrk_r>
 8004ae2:	3001      	adds	r0, #1
 8004ae4:	d0bb      	beq.n	8004a5e <_malloc_r+0x16>
 8004ae6:	462b      	mov	r3, r5
 8004ae8:	e7ec      	b.n	8004ac4 <_malloc_r+0x7c>
 8004aea:	bd70      	pop	{r4, r5, r6, pc}
 8004aec:	20000358 	.word	0x20000358
 8004af0:	20000354 	.word	0x20000354

08004af4 <_realloc_r>:
 8004af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004af6:	4607      	mov	r7, r0
 8004af8:	4615      	mov	r5, r2
 8004afa:	460e      	mov	r6, r1
 8004afc:	b921      	cbnz	r1, 8004b08 <_realloc_r+0x14>
 8004afe:	4611      	mov	r1, r2
 8004b00:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004b04:	f7ff bfa0 	b.w	8004a48 <_malloc_r>
 8004b08:	b91a      	cbnz	r2, 8004b12 <_realloc_r+0x1e>
 8004b0a:	f7ff ff59 	bl	80049c0 <_free_r>
 8004b0e:	4628      	mov	r0, r5
 8004b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b12:	f000 f825 	bl	8004b60 <_malloc_usable_size_r>
 8004b16:	42a8      	cmp	r0, r5
 8004b18:	d20e      	bcs.n	8004b38 <_realloc_r+0x44>
 8004b1a:	4638      	mov	r0, r7
 8004b1c:	4629      	mov	r1, r5
 8004b1e:	f7ff ff93 	bl	8004a48 <_malloc_r>
 8004b22:	4604      	mov	r4, r0
 8004b24:	b150      	cbz	r0, 8004b3c <_realloc_r+0x48>
 8004b26:	4631      	mov	r1, r6
 8004b28:	462a      	mov	r2, r5
 8004b2a:	f7ff fc13 	bl	8004354 <memcpy>
 8004b2e:	4638      	mov	r0, r7
 8004b30:	4631      	mov	r1, r6
 8004b32:	f7ff ff45 	bl	80049c0 <_free_r>
 8004b36:	e001      	b.n	8004b3c <_realloc_r+0x48>
 8004b38:	4630      	mov	r0, r6
 8004b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b3c:	4620      	mov	r0, r4
 8004b3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004b40 <_sbrk_r>:
 8004b40:	b538      	push	{r3, r4, r5, lr}
 8004b42:	4c06      	ldr	r4, [pc, #24]	; (8004b5c <_sbrk_r+0x1c>)
 8004b44:	2300      	movs	r3, #0
 8004b46:	4605      	mov	r5, r0
 8004b48:	4608      	mov	r0, r1
 8004b4a:	6023      	str	r3, [r4, #0]
 8004b4c:	f7fd fbe8 	bl	8002320 <_sbrk>
 8004b50:	1c43      	adds	r3, r0, #1
 8004b52:	d102      	bne.n	8004b5a <_sbrk_r+0x1a>
 8004b54:	6823      	ldr	r3, [r4, #0]
 8004b56:	b103      	cbz	r3, 8004b5a <_sbrk_r+0x1a>
 8004b58:	602b      	str	r3, [r5, #0]
 8004b5a:	bd38      	pop	{r3, r4, r5, pc}
 8004b5c:	20000370 	.word	0x20000370

08004b60 <_malloc_usable_size_r>:
 8004b60:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8004b64:	2800      	cmp	r0, #0
 8004b66:	bfbe      	ittt	lt
 8004b68:	1809      	addlt	r1, r1, r0
 8004b6a:	f851 3c04 	ldrlt.w	r3, [r1, #-4]
 8004b6e:	18c0      	addlt	r0, r0, r3
 8004b70:	3804      	subs	r0, #4
 8004b72:	4770      	bx	lr

08004b74 <Font6x8>:
	...
 8004b84:	2000 2000 2000 2000 2000 0000 2000 0000     . . . . . ... ..
 8004b94:	5000 5000 5000 0000 0000 0000 0000 0000     .P.P.P..........
 8004ba4:	5000 5000 f800 5000 f800 5000 5000 0000     .P.P...P...P.P..
 8004bb4:	2000 7800 a000 7000 2800 f000 2000 0000     . .x...p.(... ..
 8004bc4:	c000 c800 1000 2000 4000 9800 1800 0000     ....... .@......
 8004bd4:	4000 a000 a000 4000 a800 9000 6800 0000     .@.....@.....h..
 8004be4:	3000 3000 2000 4000 0000 0000 0000 0000     .0.0. .@........
 8004bf4:	1000 2000 4000 4000 4000 2000 1000 0000     ... .@.@.@. ....
 8004c04:	4000 2000 1000 1000 1000 2000 4000 0000     .@. ....... .@..
 8004c14:	2000 a800 7000 f800 7000 a800 2000 0000     . ...p...p... ..
 8004c24:	0000 2000 2000 f800 2000 2000 0000 0000     ... . ... . ....
	...
 8004c3c:	3000 3000 2000 0000 0000 0000 0000 f800     .0.0. ..........
	...
 8004c5c:	0000 3000 3000 0000 0000 0800 1000 2000     ...0.0......... 
 8004c6c:	4000 8000 0000 0000 7000 8800 9800 a800     .@.......p......
 8004c7c:	c800 8800 7000 0000 2000 6000 2000 2000     .....p... .`. . 
 8004c8c:	2000 2000 7000 0000 7000 8800 0800 7000     . . .p...p.....p
 8004c9c:	8000 8000 f800 0000 f800 0800 1000 3000     ...............0
 8004cac:	0800 8800 7000 0000 1000 3000 5000 9000     .....p.....0.P..
 8004cbc:	f800 1000 1000 0000 f800 8000 f000 0800     ................
 8004ccc:	0800 8800 7000 0000 3800 4000 8000 f000     .....p...8.@....
 8004cdc:	8800 8800 7000 0000 f800 0800 0800 1000     .....p..........
 8004cec:	2000 4000 8000 0000 7000 8800 8800 7000     . .@.....p.....p
 8004cfc:	8800 8800 7000 0000 7000 8800 8800 7800     .....p...p.....x
 8004d0c:	0800 1000 e000 0000 0000 0000 2000 0000     ............. ..
 8004d1c:	2000 0000 0000 0000 0000 0000 2000 0000     . ........... ..
 8004d2c:	2000 2000 4000 0000 0800 1000 2000 4000     . . .@....... .@
 8004d3c:	2000 1000 0800 0000 0000 0000 f800 0000     . ..............
 8004d4c:	f800 0000 0000 0000 4000 2000 1000 0800     .........@. ....
 8004d5c:	1000 2000 4000 0000 7000 8800 0800 3000     ... .@...p.....0
 8004d6c:	2000 0000 2000 0000 7000 8800 a800 b800     . ... ...p......
 8004d7c:	b000 8000 7800 0000 2000 5000 8800 8800     .....x... .P....
 8004d8c:	f800 8800 8800 0000 f000 8800 8800 f000     ................
 8004d9c:	8800 8800 f000 0000 7000 8800 8000 8000     .........p......
 8004dac:	8000 8800 7000 0000 f000 8800 8800 8800     .....p..........
 8004dbc:	8800 8800 f000 0000 f800 8000 8000 f000     ................
 8004dcc:	8000 8000 f800 0000 f800 8000 8000 f000     ................
 8004ddc:	8000 8000 8000 0000 7800 8800 8000 8000     .........x......
 8004dec:	9800 8800 7800 0000 8800 8800 8800 f800     .....x..........
 8004dfc:	8800 8800 8800 0000 7000 2000 2000 2000     .........p. . . 
 8004e0c:	2000 2000 7000 0000 3800 1000 1000 1000     . . .p...8......
 8004e1c:	1000 9000 6000 0000 8800 9000 a000 c000     .....`..........
 8004e2c:	a000 9000 8800 0000 8000 8000 8000 8000     ................
 8004e3c:	8000 8000 f800 0000 8800 d800 a800 a800     ................
 8004e4c:	a800 8800 8800 0000 8800 8800 c800 a800     ................
 8004e5c:	9800 8800 8800 0000 7000 8800 8800 8800     .........p......
 8004e6c:	8800 8800 7000 0000 f000 8800 8800 f000     .....p..........
 8004e7c:	8000 8000 8000 0000 7000 8800 8800 8800     .........p......
 8004e8c:	a800 9000 6800 0000 f000 8800 8800 f000     .....h..........
 8004e9c:	a000 9000 8800 0000 7000 8800 8000 7000     .........p.....p
 8004eac:	0800 8800 7000 0000 f800 a800 2000 2000     .....p....... . 
 8004ebc:	2000 2000 2000 0000 8800 8800 8800 8800     . . . ..........
 8004ecc:	8800 8800 7000 0000 8800 8800 8800 8800     .....p..........
 8004edc:	8800 5000 2000 0000 8800 8800 8800 a800     ...P. ..........
 8004eec:	a800 a800 5000 0000 8800 8800 5000 2000     .....P.......P. 
 8004efc:	5000 8800 8800 0000 8800 8800 5000 2000     .P...........P. 
 8004f0c:	2000 2000 2000 0000 f800 0800 1000 7000     . . . .........p
 8004f1c:	4000 8000 f800 0000 7800 4000 4000 4000     .@.......x.@.@.@
 8004f2c:	4000 4000 7800 0000 0000 8000 4000 2000     .@.@.x.......@. 
 8004f3c:	1000 0800 0000 0000 7800 0800 0800 0800     .........x......
 8004f4c:	0800 0800 7800 0000 2000 5000 8800 0000     .....x... .P....
	...
 8004f70:	f800 0000 6000 6000 2000 1000 0000 0000     .....`.`. ......
	...
 8004f88:	6000 1000 7000 9000 7800 0000 8000 8000     .`...p...x......
 8004f98:	b000 c800 8800 c800 b000 0000 0000 0000     ................
 8004fa8:	7000 8800 8000 8800 7000 0000 0800 0800     .p.......p......
 8004fb8:	6800 9800 8800 9800 6800 0000 0000 0000     .h.......h......
 8004fc8:	7000 8800 f800 8000 7000 0000 1000 2800     .p.......p.....(
 8004fd8:	2000 7000 2000 2000 2000 0000 0000 0000     . .p. . . ......
 8004fe8:	7000 9800 9800 6800 0800 0000 8000 8000     .p.....h........
 8004ff8:	b000 c800 8800 8800 8800 0000 2000 0000     ............. ..
 8005008:	6000 2000 2000 2000 7000 0000 1000 0000     .`. . . .p......
 8005018:	1000 1000 1000 9000 6000 0000 8000 8000     .........`......
 8005028:	9000 a000 c000 a000 9000 0000 6000 2000     .............`. 
 8005038:	2000 2000 2000 2000 7000 0000 0000 0000     . . . . .p......
 8005048:	d000 a800 a800 a800 a800 0000 0000 0000     ................
 8005058:	b000 c800 8800 8800 8800 0000 0000 0000     ................
 8005068:	7000 8800 8800 8800 7000 0000 0000 0000     .p.......p......
 8005078:	b000 c800 c800 b000 8000 0000 0000 0000     ................
 8005088:	6800 9800 9800 6800 0800 0000 0000 0000     .h.....h........
 8005098:	b000 c800 8000 8000 8000 0000 0000 0000     ................
 80050a8:	7800 8000 7000 0800 f000 0000 2000 2000     .x...p....... . 
 80050b8:	f800 2000 2000 2800 1000 0000 0000 0000     ... . .(........
 80050c8:	8800 8800 8800 9800 6800 0000 0000 0000     .........h......
 80050d8:	8800 8800 8800 5000 2000 0000 0000 0000     .......P. ......
 80050e8:	8800 8800 a800 a800 5000 0000 0000 0000     .........P......
 80050f8:	8800 5000 2000 5000 8800 0000 0000 0000     ...P. .P........
 8005108:	8800 8800 7800 0800 8800 0000 0000 0000     .....x..........
 8005118:	f800 1000 2000 4000 f800 0000 1000 2000     ..... .@....... 
 8005128:	2000 4000 2000 2000 1000 0000 2000 2000     . .@. . ..... . 
 8005138:	2000 0000 2000 2000 2000 0000 4000 2000     . ... . . ...@. 
 8005148:	2000 1000 2000 2000 4000 0000 4000 a800     . ... . .@...@..
 8005158:	1000 0000 0000 0000 0000 0000               ............

08005164 <g_xmc_vadc_group_array>:
 8005164:	4400 4000 4800 4000 4c00 4000 5000 4000     .D.@.H.@.L.@.P.@

08005174 <I2C_MASTER_0_sda_pin_config>:
 8005174:	00d0 0000 0001 0000 0000 0000               ............

08005180 <I2C_MASTER_0_scl_pin_config>:
 8005180:	00d0 0000 0001 0000 0000 0000               ............

0800518c <I2C_MASTER_0_channel_config>:
 800518c:	86a0 0001 0000 0000                         ........

08005194 <I2C_MASTER_0_config>:
 8005194:	518c 0800 2f75 0800 2f51 0800 2f31 0800     .Q..u/..Q/..1/..
	...
 80051b8:	0000 0404 5a5b 0000                         ....[Z..

080051c0 <group_init_handle0>:
	...

080051d4 <group_init_handle1>:
	...

080051e8 <group_init_handle2>:
	...

080051fc <group_init_handle3>:
	...

08005210 <global_config>:
 8005210:	0000 0000 0003 0000 0000 0000 0000 0000     ................
	...
 8005228:	0250 0104 0000 0001 0000 0000 0000 0001     P...............
 8005238:	0101 0101                                   ....

0800523c <global_iclass_config>:
 800523c:	0000 0000                                   ....

08005240 <backgnd_rs_intr_handle>:
 8005240:	0010 0000 003f 0000 0000 0000               ....?.......

0800524c <backgnd_config>:
 800524c:	0005 0000 0000 0000 0008 0000 002d 0000     ............-...
 800525c:	0000 0000 7325 2520 2573 2e64 3025 6432     ....%s %s%d.%02d
 800526c:	2520 0073 6f56 746c 6761 3a65 0000 0000      %s.Voltage:....
 800527c:	0056 0000 7543 7272 6e65 3a74 0000 0000     V...Current:....
 800528c:	0041 0000 6f50 6577 3a72 0000 0057 0000     A...Power:..W...
 800529c:	0043 2d23 2b30 0020 6c68 004c 6665 4567     C.#-0+ .hlL.efgE
 80052ac:	4746 3000 3231 3433 3635 3837 4139 4342     FG.0123456789ABC
 80052bc:	4544 0046 3130 3332 3534 3736 3938 6261     DEF.0123456789ab
 80052cc:	6463 6665 0000 0000                         cdef....
